{"id":"node_modules/codemirror/keymap/vim.js","dependencies":[{"name":"/Users/matteo/projects/minerva/ts-socketio/client/package.json","includedInParent":true,"mtime":1644631103482},{"name":"/Users/matteo/projects/minerva/ts-socketio/client/node_modules/codemirror/package.json","includedInParent":true,"mtime":1644631103477},{"name":"../lib/codemirror","loc":{"line":39,"column":16,"index":1463},"parent":"/Users/matteo/projects/minerva/ts-socketio/client/node_modules/codemirror/keymap/vim.js","resolved":"/Users/matteo/projects/minerva/ts-socketio/client/node_modules/codemirror/lib/codemirror.js"},{"name":"../addon/search/searchcursor","loc":{"line":39,"column":46,"index":1493},"parent":"/Users/matteo/projects/minerva/ts-socketio/client/node_modules/codemirror/keymap/vim.js","resolved":"/Users/matteo/projects/minerva/ts-socketio/client/node_modules/codemirror/addon/search/searchcursor.js"},{"name":"../addon/dialog/dialog","loc":{"line":39,"column":87,"index":1534},"parent":"/Users/matteo/projects/minerva/ts-socketio/client/node_modules/codemirror/keymap/vim.js","resolved":"/Users/matteo/projects/minerva/ts-socketio/client/node_modules/codemirror/addon/dialog/dialog.js"},{"name":"../addon/edit/matchbrackets.js","loc":{"line":39,"column":122,"index":1569},"parent":"/Users/matteo/projects/minerva/ts-socketio/client/node_modules/codemirror/keymap/vim.js","resolved":"/Users/matteo/projects/minerva/ts-socketio/client/node_modules/codemirror/addon/edit/matchbrackets.js"}],"generated":{"js":"var define;\nvar global = arguments[3];\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeymap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, ., :, /, _, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/dialog/dialog\"), require(\"../addon/edit/matchbrackets.js\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  'use strict';\n\n  var Pos = CodeMirror.Pos;\n\n  function transformCursor(cm, range) {\n    var vim = cm.state.vim;\n    if (!vim || vim.insertMode) return range.head;\n    var head = vim.sel.head;\n    if (!head)  return range.head;\n\n    if (vim.visualBlock) {\n      if (range.head.line != head.line) {\n        return;\n      }\n    }\n    if (range.from() == range.anchor && !range.empty()) {\n      if (range.head.line == head.line && range.head.ch != head.ch)\n        return new Pos(range.head.line, range.head.ch - 1);\n    }\n\n    return range.head;\n  }\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: 'g<Up>', type: 'keyToKey', toKeys: 'gk' },\n    { keys: 'g<Down>', type: 'keyToKey', toKeys: 'gj' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<Del>', type: 'keyToKey', toKeys: 'x', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'keyToKey', toKeys: 'i', context: 'normal'},\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '(', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: false }},\n    { keys: ')', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    {keys: \"g$\", type: \"motion\", motion: \"moveToEndOfDisplayLine\"},\n    {keys: \"g^\", type: \"motion\", motion: \"moveToStartOfDisplayLine\"},\n    {keys: \"g0\", type: \"motion\", motion: \"moveToStartOfDisplayLine\"},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '=', type: 'operator', operator: 'indentAuto' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    { keys: 'gn', type: 'motion', motion: 'findAndSelectNextInclusive', motionArgs: { forward: true }},\n    { keys: 'gN', type: 'motion', motion: 'findAndSelectNextInclusive', motionArgs: { forward: false }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-u>', type: 'operatorMotion', operator: 'delete', motion: 'moveToStartOfLine', context: 'insert' },\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    //ignore C-w in normal mode\n    { keys: '<C-w>', type: 'idle', context: 'normal' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'gi', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'lastEdit' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'gI', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'bol'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'gJ', type: 'action', action: 'joinLines', actionArgs: { keepSpaces: true }, isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }, context: 'normal'},\n    { keys: 'R', type: 'operator', operator: 'change', operatorArgs: { linewise: true, fullLine: true }, context: 'visual', exitVisualBlock: true},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n  var defaultKeymapLength = defaultKeymap.length;\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'vglobal', shortName: 'v' },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  var Vim = function() {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n      if (highlightTimeout) clearTimeout(highlightTimeout);\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim) {\n        cm.options.$customCursor = null;\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n      }\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim) {\n        if (cm.curOp) cm.curOp.selectionChanged = true;\n        cm.options.$customCursor = transformCursor;\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n      }\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = vimApi.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {Shift:'S',Ctrl:'C',Alt:'A',Cmd:'D',Mod:'A',CapsLock:''};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '_', '/']);\n    var upperCaseChars;\n    try { upperCaseChars = new RegExp(\"^[\\\\p{Lu}]$\", \"u\"); }\n    catch (_) { upperCaseChars = /^[A-Z]$/; }\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return upperCaseChars.test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function isEndOfSentenceSymbol(k) {\n      return '.?!'.indexOf(k) != -1;\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      function find(cm, offset) {\n        var oldPointer = pointer;\n        var mark = move(cm, offset);\n        pointer = oldPointer;\n        return mark && mark.find();\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        find: find,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                document.createTextNode('(recording)['+registerName+']'), null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi= {\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyway.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        return exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // Non-recursive map function.\n      // NOTE: This will not create mappings to key maps that aren't present\n      // in the default key map. See TODO at bottom of function.\n      noremap: function(lhs, rhs, ctx) {\n        function toCtxArray(ctx) {\n          return ctx ? [ctx] : ['normal', 'insert', 'visual'];\n        }\n        var ctxsToMap = toCtxArray(ctx);\n        // Look through all actual defaults to find a map candidate.\n        var actualLength = defaultKeymap.length, origLength = defaultKeymapLength;\n        for (var i = actualLength - origLength;\n             i < actualLength && ctxsToMap.length;\n             i++) {\n          var mapping = defaultKeymap[i];\n          // Omit mappings that operate in the wrong context(s) and those of invalid type.\n          if (mapping.keys == rhs &&\n              (!ctx || !mapping.context || mapping.context === ctx) &&\n              mapping.type.substr(0, 2) !== 'ex' &&\n              mapping.type.substr(0, 3) !== 'key') {\n            // Make a shallow copy of the original keymap entry.\n            var newMapping = {};\n            for (var key in mapping) {\n              newMapping[key] = mapping[key];\n            }\n            // Modify it point to the new mapping with the proper context.\n            newMapping.keys = lhs;\n            if (ctx && !newMapping.context) {\n              newMapping.context = ctx;\n            }\n            // Add it to the keymap with a higher priority than the original.\n            this._mapCommand(newMapping);\n            // Record the mapped contexts as complete.\n            var mappedCtxs = toCtxArray(mapping.context);\n            ctxsToMap = ctxsToMap.filter(function(el) { return mappedCtxs.indexOf(el) === -1; });\n          }\n        }\n        // TODO: Create non-recursive keyToKey mappings for the unmapped contexts once those exist.\n      },\n      // Remove all user-defined mappings for the provided context.\n      mapclear: function(ctx) {\n        // Partition the existing keymap into user-defined and true defaults.\n        var actualLength = defaultKeymap.length,\n            origLength = defaultKeymapLength;\n        var userKeymap = defaultKeymap.slice(0, actualLength - origLength);\n        defaultKeymap = defaultKeymap.slice(actualLength - origLength);\n        if (ctx) {\n          // If a specific context is being cleared, we need to keep mappings\n          // from all other contexts.\n          for (var i = userKeymap.length - 1; i >= 0; i--) {\n            var mapping = userKeymap[i];\n            if (ctx !== mapping.context) {\n              if (mapping.context) {\n                this._mapCommand(mapping);\n              } else {\n                // `mapping` applies to all contexts so create keymap copies\n                // for each context except the one being cleared.\n                var contexts = ['normal', 'insert', 'visual'];\n                for (var j in contexts) {\n                  if (contexts[j] !== ctx) {\n                    var newMapping = {};\n                    for (var key in mapping) {\n                      newMapping[key] = mapping[key];\n                    }\n                    newMapping.context = contexts[j];\n                    this._mapCommand(newMapping);\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            vimApi.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; }\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var mainKey = keysMatcher[2] || keysMatcher[1];\n          if (vim.inputState.operatorShortcut && vim.inputState.operatorShortcut.slice(-1) == mainKey) {\n            // multikey operators act linewise by repeating only the last character\n            mainKey = vim.inputState.operatorShortcut;\n          }\n          var match = commandDispatcher.matchCommand(mainKey, defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return !vim.insertMode && key.length === 1 ? function() { return true; } : undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!vimApi.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        // The black hole register, \"_, means delete/yank to nowhere.\n        if (registerName === '_') return;\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {type: 'none'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n          default:\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (command.keys.length > 1) {\n          inputState.operatorShortcut = command.keys;\n        }\n        if (command.exitVisualBlock) {\n            vim.visualBlock = false;\n            updateCmSelection(cm);\n        }\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: '(JavaScript regexp)',\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown, selectValueOnOpen: false});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim, inputState);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = new Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = new Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = new Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = new Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = new Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n        macroModeState.lastInsertModeChanges.visualBlock = vim.visualBlock ? vim.sel.head.line - vim.sel.anchor.line : 0;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return new Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      /**\n       * Find and select the next occurrence of the search query. If the cursor is currently\n       * within a match, then find and select the current match. Otherwise, find the next occurrence in the\n       * appropriate direction.\n       *\n       * This differs from `findNext` in the following ways:\n       *\n       * 1. Instead of only returning the \"from\", this returns a \"from\", \"to\" range.\n       * 2. If the cursor is currently inside a search match, this selects the current match\n       *    instead of the next match.\n       * 3. If there is no associated operator, this will turn on visual mode.\n       */\n      findAndSelectNextInclusive: function(cm, _head, motionArgs, vim, prevInputState) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n\n        if (!query) {\n          return;\n        }\n\n        var prev = !motionArgs.forward;\n        prev = (state.isReversed()) ? !prev : prev;\n\n        // next: [from, to] | null\n        var next = findNextFromAndToInclusive(cm, prev, query, motionArgs.repeat, vim);\n\n        // No matches.\n        if (!next) {\n          return;\n        }\n\n        // If there's an operator that will be executed, return the selection.\n        if (prevInputState.operator) {\n          return next;\n        }\n\n        // At this point, we know that there is no accompanying operator -- let's\n        // deal with visual mode in order to select an appropriate match.\n\n        var from = next[0];\n        // For whatever reason, when we use the \"to\" as returned by searchcursor.js directly,\n        // the resulting selection is extended by 1 char. Let's shrink it so that only the\n        // match is selected.\n        var to = new Pos(next[1].line, next[1].ch - 1);\n\n        if (vim.visualMode) {\n          // If we were in visualLine or visualBlock mode, get out of it.\n          if (vim.visualLine || vim.visualBlock) {\n            vim.visualLine = false;\n            vim.visualBlock = false;\n            CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: \"\"});\n          }\n\n          // If we're currently in visual mode, we should extend the selection to include\n          // the search result.\n          var anchor = vim.sel.anchor;\n          if (anchor) {\n            if (state.isReversed()) {\n              if (motionArgs.forward) {\n                return [anchor, from];\n              }\n\n              return [anchor, to];\n            } else {\n              if (motionArgs.forward) {\n                return [anchor, to];\n              }\n\n              return [anchor, from];\n            }\n          }\n        } else {\n          // Let's turn visual mode on.\n          vim.visualMode = true;\n          vim.visualLine = false;\n          vim.visualBlock = false;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: \"\"});\n        }\n\n        return prev ? [to, from] : [from, to];\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, new Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, new Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = new Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return new Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        var posV = cm.findPosV(cur, (motionArgs.forward ? repeat : -repeat), 'line', vim.lastHSPos);\n        var hasMarkedText = motionArgs.forward ? posV.line > line : posV.line < line;\n        if (hasMarkedText) {\n          line = posV.line;\n          endCh = posV.ch;\n        }\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        } else if (line > last && cur.line == last){\n            return moveToEol(cm, head, motionArgs, vim, true);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(new Pos(line, endCh),'div').left;\n        return new Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(new Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveBySentence: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findSentence(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim) {\n        return moveToEol(cm, head, motionArgs, vim, false);\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return new Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(new Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          // Only include angle brackets in analysis if they are being matched.\n          var re = (ch === '<' || ch === '>') ? /[(){}[\\]<>]/ : /[(){}[\\]]/;\n          var matched = cm.findMatchingBracket(new Pos(line, ch), {bracketRegex: re});\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return new Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return new Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      moveToStartOfDisplayLine: function(cm) {\n        cm.execCommand(\"goLineLeft\");\n        return cm.getCursor();\n      },\n      moveToEndOfDisplayLine: function(cm) {\n        cm.execCommand(\"goLineRight\");\n        var head = cm.getCursor();\n        if (head.sticky == \"before\") head.ch--;\n        return head;\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '[',\n                             '<': '>', '>': '<'};\n        var selfPaired = {'\\'': true, '\"': true, '`': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else if (character === 't') {\n          tmp = expandTagUnderCursor(cm, head, inclusive);\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        var anchor = ranges[0].anchor,\n            head = ranges[0].head;\n        if (!vim.visualMode) {\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else if (args.fullLine) {\n            head.ch = Number.MAX_VALUE;\n            head.line--;\n            cm.setSelection(anchor, head)\n            text = cm.getSelection();\n            cm.replaceSelection(\"\");\n            finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = new Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      indentAuto: function(cm, _args, ranges) {\n        cm.execCommand(\"indentAuto\");\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(new Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight;\n            break;\n          case 'bottom': y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        } else {\n          macroModeState.latestRegister = registerName;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = new Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'bol') {\n          head = new Pos(head.line, 0);\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = new Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = new Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n            if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = new Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = new Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch, sel.anchor.ch) + 1);\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        } else if (insertAt == 'lastEdit') {\n          head = getLastEditPos(cm) || head;\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, new Pos(anchor.line, anchor.ch + repeat - 1));\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, new Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = new Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = actionArgs.keepSpaces\n            ? text.replace(/\\n\\r?/g, '')\n            : text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = new Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', new Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        var text = register.toString();\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (blockwise) {\n          text = text.split('\\n');\n          if (linewise) {\n              text.pop();\n          }\n          for (var i = 0; i < text.length; i++) {\n            text[i] = (text[i] == '') ? ' ' : text[i];\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n          cur.ch = Math.min(lineLength(cm, cur.line), cur.ch);\n        } else if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = new Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  new Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, new Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = new Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = new Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = new Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /(-?)(?:(0x)([\\da-f]+)|(0b|0|)(\\d+))/gi;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        while ((match = re.exec(lineStr)) !== null) {\n          start = match.index;\n          end = start + match[0].length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (match) {\n          var baseStr = match[2] || match[4]\n          var digits = match[3] || match[5]\n          var increment = actionArgs.increase ? 1 : -1;\n          var base = {'0b': 2, '0': 8, '': 10, '0x': 16}[baseStr.toLowerCase()];\n          var number = parseInt(match[1] + digits, base) + (increment * actionArgs.repeat);\n          numberStr = number.toString(base);\n          var zeroPadding = baseStr ? new Array(digits.length - numberStr.length + 1 + match[1].length).join('0') : ''\n          if (numberStr.charAt(0) === '-') {\n            numberStr = '-' + baseStr + zeroPadding + numberStr.substr(1);\n          } else {\n            numberStr = baseStr + zeroPadding + numberStr;\n          }\n          var from = new Pos(cur.line, start);\n          var to = new Pos(cur.line, end);\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(new Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur) {\n      var vim = cm.state.vim;\n      var includeLineBreak = vim.insertMode || vim.visualMode;\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1 + !!includeLineBreak;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return new Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return new Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return new Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(new Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = new Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = new Pos(i, selectionStart.ch);\n            var head = new Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = new Pos(selectionStart.line, 0);\n            selectionEnd = new Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = new Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            fromCh = anchor.ch,\n            bottom = Math.max(anchor.line, head.line),\n            toCh = head.ch;\n        if (fromCh < toCh) { toCh += 1 }\n        else { fromCh += 1 };\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: new Pos(top + i, fromCh),\n            head: new Pos(top + i, toCh)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      if (!vim.insertMode) CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: new Pos(cur.line, start), end: new Pos(cur.line, end) };\n    }\n\n    /**\n     * Depends on the following:\n     *\n     * - editor mode should be htmlmixedmode / xml\n     * - mode/xml/xml.js should be loaded\n     * - addon/fold/xml-fold.js should be loaded\n     *\n     * If any of the above requirements are not true, this function noops.\n     *\n     * This is _NOT_ a 100% accurate implementation of vim tag text objects.\n     * The following caveats apply (based off cursory testing, I'm sure there\n     * are other discrepancies):\n     *\n     * - Does not work inside comments:\n     *   ```\n     *   <!-- <div>broken</div> -->\n     *   ```\n     * - Does not work when tags have different cases:\n     *   ```\n     *   <div>broken</DIV>\n     *   ```\n     * - Does not work when cursor is inside a broken tag:\n     *   ```\n     *   <div><brok><en></div>\n     *   ```\n     */\n    function expandTagUnderCursor(cm, head, inclusive) {\n      var cur = head;\n      if (!CodeMirror.findMatchingTag || !CodeMirror.findEnclosingTag) {\n        return { start: cur, end: cur };\n      }\n\n      var tags = CodeMirror.findMatchingTag(cm, head) || CodeMirror.findEnclosingTag(cm, head);\n      if (!tags || !tags.open || !tags.close) {\n        return { start: cur, end: cur };\n      }\n\n      if (inclusive) {\n        return { start: tags.open.from, end: tags.close.to };\n      }\n      return { start: tags.open.to, end: tags.close.from };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/^#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return new Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /*\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = new Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return new Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return new Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return new Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return new Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToEol(cm, head, motionArgs, vim, keepHPos) {\n      var cur = head;\n      var retval= new Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      var end=cm.clipPos(retval);\n      end.ch--;\n      if (!keepHPos) {\n        vim.lastHPos = Infinity;\n        vim.lastHSPos = cm.charCoords(end,'div').left;\n      }\n      return retval;\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return new Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, new Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    function findSentence(cm, cur, repeat, dir) {\n\n      /*\n        Takes an index object\n        {\n          line: the line string,\n          ln: line number,\n          pos: index in line,\n          dir: direction of traversal (-1 or 1)\n        }\n        and modifies the line, ln, and pos members to represent the\n        next valid position or sets them to null if there are\n        no more valid positions.\n       */\n      function nextChar(cm, idx) {\n        if (idx.pos + idx.dir < 0 || idx.pos + idx.dir >= idx.line.length) {\n          idx.ln += idx.dir;\n          if (!isLine(cm, idx.ln)) {\n            idx.line = null;\n            idx.ln = null;\n            idx.pos = null;\n            return;\n          }\n          idx.line = cm.getLine(idx.ln);\n          idx.pos = (idx.dir > 0) ? 0 : idx.line.length - 1;\n        }\n        else {\n          idx.pos += idx.dir;\n        }\n      }\n\n      /*\n        Performs one iteration of traversal in forward direction\n        Returns an index object of the new location\n       */\n      function forward(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n        var stop = (line === \"\");\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        }\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: curr.pos,\n        }\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n          last_valid.ln = curr.ln;\n          last_valid.pos = curr.pos;\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (stop && curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n            && !stop\n            && (curr.pos === curr.line.length - 1\n              || isWhiteSpaceString(curr.line[curr.pos + 1]))) {\n            stop = true;\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the last non whitespace character on the last\n          valid line in the case that we reach the end of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = line.length - 1; i >= 0; --i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n\n        return last_valid;\n\n      }\n\n      /*\n        Performs one iteration of traversal in reverse direction\n        Returns an index object of the new location\n       */\n      function reverse(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        }\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: null,\n        };\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            if (last_valid.pos !== null) {\n              return last_valid;\n            }\n            else {\n              return { ln: curr.ln, pos: curr.pos };\n            }\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n              && last_valid.pos !== null\n              && !(curr.ln === last_valid.ln && curr.pos + 1 === last_valid.pos)) {\n            return last_valid;\n          }\n          else if (curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            skip_empty_lines = false;\n            last_valid = { ln: curr.ln, pos: curr.pos }\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the first non whitespace character on the last\n          valid line in the case that we reach the beginning of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = 0; i < line.length; ++i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n        return last_valid;\n      }\n\n      var curr_index = {\n        ln: cur.line,\n        pos: cur.ch,\n      };\n\n      while (repeat > 0) {\n        if (dir < 0) {\n          curr_index = reverse(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        else {\n          curr_index = forward(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        repeat--;\n      }\n\n      return new Pos(curr_index.ln, curr_index.pos);\n    }\n\n    // TODO: perhaps this finagling of start and end positions belongs\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/,\n        '<': /[<>]/, '>': /[<>]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{',\n        '<': '<', '>': '<'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(new Pos(cur.line, cur.ch + offset), -1, undefined, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(new Pos(cur.line, cur.ch + offset), 1, undefined, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: new Pos(cur.line, start),\n        end: new Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function splitBySlash(argString) {\n      return splitBySeparator(argString, '/');\n    }\n\n    function findUnescapedSlashes(argString) {\n      return findUnescapedSeparators(argString, '/');\n    }\n\n    function splitBySeparator(argString, separator) {\n      var slashes = findUnescapedSeparators(argString, separator) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSeparators(str, separator) {\n      if (!separator)\n        separator = '/';\n\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == separator) {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t', '\\\\&':'&'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'im' : 'm');\n      return regexp;\n    }\n\n    /**\n     * dom - Document Object Manipulator\n     * Usage:\n     *   dom('<tag>'|<node>[, ...{<attributes>|<$styles>}|<child-node>|'<text>'])\n     * Examples:\n     *   dom('div', {id:'xyz'}, dom('p', 'CM rocks!', {$color:'red'}))\n     *   dom(document.head, dom('script', 'alert(\"hello!\")'))\n     * Not supported:\n     *   dom('p', ['arrays are objects'], Error('objects specify attributes'))\n     */\n    function dom(n) {\n      if (typeof n === 'string') n = document.createElement(n);\n      for (var a, i = 1; i < arguments.length; i++) {\n        if (!(a = arguments[i])) continue;\n        if (typeof a !== 'object') a = document.createTextNode(a);\n        if (a.nodeType) n.appendChild(a);\n        else for (var key in a) {\n          if (!Object.prototype.hasOwnProperty.call(a, key)) continue;\n          if (key[0] === '$') n.style[key.slice(1)] = a[key];\n          else n.setAttribute(key, a[key]);\n        }\n      }\n      return n;\n    }\n\n    function showConfirm(cm, template) {\n      var pre = dom('pre', {$color: 'red', class: 'cm-vim-message'}, template);\n      if (cm.openNotification) {\n        cm.openNotification(pre, {bottom: true, duration: 5000});\n      } else {\n        alert(pre.innerText);\n      }\n    }\n\n    function makePrompt(prefix, desc) {\n      return dom(document.createDocumentFragment(),\n               dom('span', {$fontFamily: 'monospace', $whiteSpace: 'pre'},\n                 prefix,\n                 dom('input', {type: 'text', autocorrect: 'off',\n                               autocapitalize: 'off', spellcheck: 'false'})),\n               desc && dom('span', {$color: '#888'}, desc));\n    }\n\n    function showPrompt(cm, options) {\n      var template = makePrompt(options.prefix, options.desc);\n      if (cm.openDialog) {\n        cm.openDialog(template, options.onClose, {\n          onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n          bottom: true, selectValueOnOpen: false, value: options.value\n        });\n      }\n      else {\n        var shortText = '';\n        if (typeof options.prefix != \"string\" && options.prefix) shortText += options.prefix.textContent;\n        if (options.desc) shortText += \" \" + options.desc;\n        options.onClose(prompt(shortText, ''));\n      }\n    }\n\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    var highlightTimeout = 0;\n    function highlightSearchMatches(cm, query) {\n      clearTimeout(highlightTimeout);\n      highlightTimeout = setTimeout(function() {\n        if (!cm.state.vim) return;\n        var searchState = getSearchState(cm);\n        var overlay = searchState.getOverlay();\n        if (!overlay || query != overlay.query) {\n          if (overlay) {\n            cm.removeOverlay(overlay);\n          }\n          overlay = searchOverlay(query);\n          cm.addOverlay(overlay);\n          if (cm.showMatchesOnScrollbar) {\n            if (searchState.getScrollbarAnnotate()) {\n              searchState.getScrollbarAnnotate().clear();\n            }\n            searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n          }\n          searchState.setOverlay(overlay);\n        }\n      }, 50);\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) {\n            var lastEndPos = prev ? cursor.from() : cursor.to();\n            found = cursor.find(prev);\n            if (found && !found[0] && cursorEqual(cursor.from(), lastEndPos)) {\n              if (cm.getLine(lastEndPos.line).length == lastEndPos.ch)\n                found = cursor.find(prev);\n            }\n          }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? new Pos(cm.lastLine()) : new Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    /**\n     * Pretty much the same as `findNext`, except for the following differences:\n     *\n     * 1. Before starting the search, move to the previous search. This way if our cursor is\n     * already inside a match, we should return the current match.\n     * 2. Rather than only returning the cursor's from, we return the cursor's from and to as a tuple.\n     */\n    function findNextFromAndToInclusive(cm, prev, query, repeat, vim) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n\n        // Go back one result to ensure that if the cursor is currently a match, we keep it.\n        var found = cursor.find(!prev);\n\n        // If we haven't moved, go back one more (similar to if i==0 logic in findNext).\n        if (!vim.visualMode && found && cursorEqual(cursor.from(), pos)) {\n          cursor.find(!prev);\n        }\n\n        for (var i = 0; i < repeat; i++) {\n          found = cursor.find(prev);\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? new Pos(cm.lastLine()) : new Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return [cursor.from(), cursor.to()];\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (typeof end == 'number') {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'' || markName == '`') {\n        return vimGlobalState.jumpList.find(cm, -1) || new Pos(0, 0);\n      } else if (markName == '.') {\n        return getLastEditPos(cm);\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    function getLastEditPos(cm) {\n      var done = cm.doc.history.done;\n      for (var i = done.length; i--;) {\n        if (done[i].changes) {\n          return copyCursor(done[i].changes[0].to);\n        }\n      }\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e.toString());\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                vimApi.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e.toString());\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+|!!|@@|[!#&*<=>@~])/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return true;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return true;\n            }\n          }\n        }\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1 || !exCommandDispatcher.unmap(mapArgs[0], ctx)) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n        }\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------\\n\\n';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '\\n'\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '\\n'\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = new Pos(lineStart, 0);\n        var curEnd = new Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      vglobal: function(cm, params) {\n        // global inspects params.commandName\n        this.global(cm, params);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        var inverted = params.commandName[0] === 'v';\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [];\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var line = cm.getLineHandle(i);\n          var matched = query.test(line.text);\n          if (matched !== inverted) {\n            matchedLines.push(cmd ? line : line.text);\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, matchedLines.join('\\n'));\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var line = matchedLines[index++];\n            var lineNum = cm.getLineNumber(line);\n            if (lineNum == null) {\n              nextCommand();\n              return;\n            }\n            var command = (lineNum + 1) + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySeparator(argString, argString[0]) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          if (getOption('pcre') && regexPart !== '') {\n              regexPart = new RegExp(regexPart).source; //normalize not escaped characters\n          }\n          replacePart = tokens[1];\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart.replace(/([^\\\\])&/g,\"$1$$&\"));\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n            }\n            if (getOption('pcre')) {\n               regexPart = regexPart + '/' + flagsPart;\n            } else {\n               regexPart = regexPart.replace(/\\//g, \"\\\\/\") + '/' + flagsPart;\n            }\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, new Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using JavaScript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos, modifiedLineNumber, joined;\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        var unmodifiedLineNumber = searchCursor.to().line;\n        searchCursor.replace(newText);\n        modifiedLineNumber = searchCursor.to().line;\n        lineEnd += modifiedLineNumber - unmodifiedLineNumber;\n        joined = modifiedLineNumber < unmodifiedLineNumber;\n      }\n      function findNextValidMatch() {\n        var lastMatchTo = lastPos && copyCursor(searchCursor.to());\n        var match = searchCursor.findNext();\n        if (match && !match[0] && lastMatchTo && cursorEqual(searchCursor.from(), lastMatchTo)) {\n          match = searchCursor.findNext();\n        }\n        return match;\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(findNextValidMatch() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && searchCursor.from().line == modifiedLineNumber && !joined) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); }\n        return;\n      }\n      showPrompt(cm, {\n        prefix: dom('span', 'replace with ', dom('strong', replaceWith), ' (y/n/a/q/l)'),\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!isPlaying) {\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          vimApi.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (lastChange.ignoreCount > 1) {\n            lastChange.ignoreCount--;\n          } else if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var selectionCount = cm.listSelections().length;\n            if (selectionCount > 1)\n              lastChange.ignoreCount = selectionCount;\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (text) {\n              if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n              } else {\n                lastChange.changes.push(text);\n              }\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var visualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.visualBlock;\n      if (visualBlock) {\n        // Set up block selection again for repeating the changes.\n        selectForInsert(cm, head, visualBlock + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (visualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            cm.replaceSelection(change);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n            cm.setCursor(end);\n          }\n        }\n      }\n      if (visualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  };\n  // Initialize Vim and make it available as an API.\n  CodeMirror.Vim = Vim();\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":103,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":104,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":105,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":106,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":107,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":108,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":109,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":110,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":111,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":112,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":113,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":114,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":115,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":116,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":117,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":118,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":119,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":120,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":121,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":122,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":123,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":124,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":125,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":126,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":127,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":128,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":129,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":130,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":131,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":132,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":133,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":134,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":135,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":136,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":137,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":138,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":139,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":140,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":141,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":142,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":143,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":144,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":145,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":146,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":147,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":148,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":149,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":150,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":151,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":152,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":153,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":154,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":155,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":156,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":157,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":158,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":159,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":160,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":161,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":162,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":163,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":164,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":165,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":166,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":167,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":168,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":169,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":170,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":171,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":172,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":173,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":174,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":175,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":176,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":177,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":178,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":179,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":180,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":181,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":182,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":183,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":184,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":185,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":186,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":187,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":188,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":189,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":190,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":191,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":192,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":193,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":194,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":195,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":196,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":197,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":198,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":199,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":200,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":201,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":202,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":203,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":204,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":205,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":206,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":207,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":208,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":209,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":210,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":211,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":212,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":213,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":214,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":215,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":216,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":217,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":218,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":219,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":220,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":221,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":222,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":223,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":224,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":225,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":226,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":227,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":228,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":229,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":230,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":231,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":232,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":233,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":234,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":235,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":236,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":237,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":238,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":239,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":240,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":241,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":242,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":243,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":244,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":245,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":246,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":247,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":248,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":249,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":250,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":251,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":252,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":253,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":254,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":255,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":256,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":257,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":258,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":259,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":260,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":261,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":262,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":263,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":264,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":265,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":266,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":267,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":268,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":269,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":270,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":271,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":272,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":273,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":274,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":275,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":276,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":277,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":278,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":279,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":280,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":281,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":282,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":283,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":284,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":285,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":286,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":287,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":288,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":289,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":290,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":291,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":292,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":293,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":294,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":295,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":296,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":297,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":298,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":299,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":300,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":301,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":302,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":303,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":304,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":305,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":306,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":307,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":308,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":309,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":310,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":311,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":312,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":313,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":314,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":315,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":316,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":317,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":318,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":319,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":320,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":321,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":322,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":323,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":324,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":325,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":326,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":327,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":328,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":329,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":330,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":331,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":332,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":333,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":334,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":335,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":336,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":337,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":338,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":339,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":340,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":341,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":342,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":343,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":344,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":345,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":346,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":347,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":348,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":349,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":350,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":351,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":352,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":353,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":354,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":355,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":356,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":357,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":358,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":359,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":360,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":361,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":362,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":363,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":364,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":365,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":366,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":367,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":368,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":369,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":370,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":371,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":372,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":373,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":374,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":375,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":376,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":377,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":378,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":379,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":380,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":381,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":382,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":383,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":384,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":385,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":386,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":387,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":388,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":389,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":390,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":391,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":392,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":393,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":394,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":395,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":396,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":397,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":398,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":399,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":400,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":401,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":402,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":403,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":404,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":405,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":406,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":407,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":408,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":409,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":410,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":411,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":412,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":413,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":414,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":415,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":416,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":417,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":418,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":419,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":420,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":421,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":422,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":423,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":424,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":425,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":426,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":427,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":428,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":429,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":430,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":431,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":432,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":433,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":434,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":435,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":436,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":437,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":438,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":439,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":440,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":441,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":442,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":443,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":444,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":445,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":446,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":447,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":448,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":449,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":450,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":451,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":452,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":453,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":454,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":455,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":456,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":457,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":458,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":459,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":460,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":461,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":462,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":463,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":464,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":465,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":466,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":467,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":468,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":469,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":470,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":471,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":472,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":473,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":474,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":475,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":476,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":477,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":478,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":479,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":480,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":481,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":482,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":483,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":484,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":485,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":486,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":487,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":488,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":489,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":490,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":491,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":492,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":493,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":494,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":495,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":496,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":497,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":498,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":499,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":500,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":501,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":502,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":503,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":504,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":505,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":506,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":507,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":508,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":509,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":510,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":511,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":512,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":513,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":514,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":515,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":516,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":517,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":518,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":519,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":520,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":521,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":522,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":523,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":524,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":525,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":526,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":527,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":528,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":529,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":530,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":531,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":532,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":533,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":534,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":535,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":536,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":537,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":538,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":539,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":540,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":541,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":542,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":543,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":544,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":545,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":546,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":547,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":548,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":549,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":550,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":551,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":552,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":553,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":554,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":555,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":556,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":557,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":558,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":559,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":560,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":561,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":562,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":563,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":564,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":565,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":566,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":567,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":568,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":569,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":570,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":571,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":572,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":573,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":574,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":575,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":576,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":577,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":578,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":579,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":580,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":581,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":582,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":583,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":584,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":585,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":586,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":587,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":588,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":589,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":590,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":591,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":592,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":593,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":594,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":595,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":596,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":597,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":598,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":599,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":600,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":601,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":602,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":603,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":604,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":605,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":606,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":607,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":608,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":609,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":610,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":611,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":612,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":613,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":614,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":615,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":616,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":617,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":618,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":619,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":620,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":621,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":622,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":623,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":624,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":625,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":626,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":627,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":628,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":629,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":630,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":631,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":632,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":633,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":634,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":635,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":636,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":637,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":638,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":639,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":640,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":641,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":642,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":643,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":644,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":645,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":646,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":647,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":648,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":649,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":650,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":651,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":652,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":653,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":654,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":655,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":656,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":657,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":658,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":659,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":660,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":661,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":662,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":663,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":664,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":665,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":666,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":667,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":668,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":669,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":670,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":671,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":672,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":673,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":674,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":675,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":676,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":677,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":678,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":679,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":680,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":681,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":682,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":683,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":684,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":685,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":686,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":687,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":688,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":689,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":690,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":691,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":692,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":693,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":694,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":695,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":696,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":697,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":698,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":699,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":700,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":701,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":702,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":703,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":704,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":705,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":706,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":707,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":708,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":709,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":710,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":711,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":712,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":713,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":714,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":715,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":716,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":717,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":718,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":719,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":720,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":721,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":722,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":723,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":724,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":725,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":726,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":727,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":728,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":729,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":730,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":731,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":732,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":733,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":734,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":735,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":736,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":737,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":738,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":739,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":740,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":741,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":742,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":743,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":744,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":745,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":746,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":747,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":748,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":749,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":750,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":751,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":752,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":753,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":754,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":755,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":756,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":757,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":758,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":759,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":760,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":761,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":762,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":763,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":764,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":765,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":766,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":767,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":768,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":769,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":770,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":771,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":772,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":773,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":774,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":775,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":776,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":777,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":778,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":779,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":780,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":781,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":782,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":783,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":784,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":785,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":786,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":787,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":788,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":789,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":790,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":791,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":792,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":793,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":794,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":795,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":796,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":797,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":798,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":799,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":800,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":801,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":802,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":803,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":804,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":805,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":806,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":807,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":808,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":809,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":810,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":811,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":812,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":813,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":814,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":815,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":816,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":817,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":818,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":819,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":820,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":821,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":822,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":823,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":824,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":825,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":826,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":827,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":828,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":829,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":830,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":831,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":832,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":833,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":834,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":835,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":836,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":837,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":838,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":839,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":840,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":841,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":842,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":843,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":844,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":845,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":846,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":847,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":848,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":849,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":850,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":851,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":852,"column":0},"generated":{"line":854,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":853,"column":0},"generated":{"line":855,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":854,"column":0},"generated":{"line":856,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":855,"column":0},"generated":{"line":857,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":856,"column":0},"generated":{"line":858,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":857,"column":0},"generated":{"line":859,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":858,"column":0},"generated":{"line":860,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":859,"column":0},"generated":{"line":861,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":860,"column":0},"generated":{"line":862,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":861,"column":0},"generated":{"line":863,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":862,"column":0},"generated":{"line":864,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":863,"column":0},"generated":{"line":865,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":864,"column":0},"generated":{"line":866,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":865,"column":0},"generated":{"line":867,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":866,"column":0},"generated":{"line":868,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":867,"column":0},"generated":{"line":869,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":868,"column":0},"generated":{"line":870,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":869,"column":0},"generated":{"line":871,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":870,"column":0},"generated":{"line":872,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":871,"column":0},"generated":{"line":873,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":872,"column":0},"generated":{"line":874,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":873,"column":0},"generated":{"line":875,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":874,"column":0},"generated":{"line":876,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":875,"column":0},"generated":{"line":877,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":876,"column":0},"generated":{"line":878,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":877,"column":0},"generated":{"line":879,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":878,"column":0},"generated":{"line":880,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":879,"column":0},"generated":{"line":881,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":880,"column":0},"generated":{"line":882,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":881,"column":0},"generated":{"line":883,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":882,"column":0},"generated":{"line":884,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":883,"column":0},"generated":{"line":885,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":884,"column":0},"generated":{"line":886,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":885,"column":0},"generated":{"line":887,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":886,"column":0},"generated":{"line":888,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":887,"column":0},"generated":{"line":889,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":888,"column":0},"generated":{"line":890,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":889,"column":0},"generated":{"line":891,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":890,"column":0},"generated":{"line":892,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":891,"column":0},"generated":{"line":893,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":892,"column":0},"generated":{"line":894,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":893,"column":0},"generated":{"line":895,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":894,"column":0},"generated":{"line":896,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":895,"column":0},"generated":{"line":897,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":896,"column":0},"generated":{"line":898,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":897,"column":0},"generated":{"line":899,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":898,"column":0},"generated":{"line":900,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":899,"column":0},"generated":{"line":901,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":900,"column":0},"generated":{"line":902,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":901,"column":0},"generated":{"line":903,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":902,"column":0},"generated":{"line":904,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":903,"column":0},"generated":{"line":905,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":904,"column":0},"generated":{"line":906,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":905,"column":0},"generated":{"line":907,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":906,"column":0},"generated":{"line":908,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":907,"column":0},"generated":{"line":909,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":908,"column":0},"generated":{"line":910,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":909,"column":0},"generated":{"line":911,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":910,"column":0},"generated":{"line":912,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":911,"column":0},"generated":{"line":913,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":912,"column":0},"generated":{"line":914,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":913,"column":0},"generated":{"line":915,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":914,"column":0},"generated":{"line":916,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":915,"column":0},"generated":{"line":917,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":916,"column":0},"generated":{"line":918,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":917,"column":0},"generated":{"line":919,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":918,"column":0},"generated":{"line":920,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":919,"column":0},"generated":{"line":921,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":920,"column":0},"generated":{"line":922,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":921,"column":0},"generated":{"line":923,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":922,"column":0},"generated":{"line":924,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":923,"column":0},"generated":{"line":925,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":924,"column":0},"generated":{"line":926,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":925,"column":0},"generated":{"line":927,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":926,"column":0},"generated":{"line":928,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":927,"column":0},"generated":{"line":929,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":928,"column":0},"generated":{"line":930,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":929,"column":0},"generated":{"line":931,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":930,"column":0},"generated":{"line":932,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":931,"column":0},"generated":{"line":933,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":932,"column":0},"generated":{"line":934,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":933,"column":0},"generated":{"line":935,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":934,"column":0},"generated":{"line":936,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":935,"column":0},"generated":{"line":937,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":936,"column":0},"generated":{"line":938,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":937,"column":0},"generated":{"line":939,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":938,"column":0},"generated":{"line":940,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":939,"column":0},"generated":{"line":941,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":940,"column":0},"generated":{"line":942,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":941,"column":0},"generated":{"line":943,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":942,"column":0},"generated":{"line":944,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":943,"column":0},"generated":{"line":945,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":944,"column":0},"generated":{"line":946,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":945,"column":0},"generated":{"line":947,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":946,"column":0},"generated":{"line":948,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":947,"column":0},"generated":{"line":949,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":948,"column":0},"generated":{"line":950,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":949,"column":0},"generated":{"line":951,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":950,"column":0},"generated":{"line":952,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":951,"column":0},"generated":{"line":953,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":952,"column":0},"generated":{"line":954,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":953,"column":0},"generated":{"line":955,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":954,"column":0},"generated":{"line":956,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":955,"column":0},"generated":{"line":957,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":956,"column":0},"generated":{"line":958,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":957,"column":0},"generated":{"line":959,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":958,"column":0},"generated":{"line":960,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":959,"column":0},"generated":{"line":961,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":960,"column":0},"generated":{"line":962,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":961,"column":0},"generated":{"line":963,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":962,"column":0},"generated":{"line":964,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":963,"column":0},"generated":{"line":965,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":964,"column":0},"generated":{"line":966,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":965,"column":0},"generated":{"line":967,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":966,"column":0},"generated":{"line":968,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":967,"column":0},"generated":{"line":969,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":968,"column":0},"generated":{"line":970,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":969,"column":0},"generated":{"line":971,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":970,"column":0},"generated":{"line":972,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":971,"column":0},"generated":{"line":973,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":972,"column":0},"generated":{"line":974,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":973,"column":0},"generated":{"line":975,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":974,"column":0},"generated":{"line":976,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":975,"column":0},"generated":{"line":977,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":976,"column":0},"generated":{"line":978,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":977,"column":0},"generated":{"line":979,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":978,"column":0},"generated":{"line":980,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":979,"column":0},"generated":{"line":981,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":980,"column":0},"generated":{"line":982,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":981,"column":0},"generated":{"line":983,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":982,"column":0},"generated":{"line":984,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":983,"column":0},"generated":{"line":985,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":984,"column":0},"generated":{"line":986,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":985,"column":0},"generated":{"line":987,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":986,"column":0},"generated":{"line":988,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":987,"column":0},"generated":{"line":989,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":988,"column":0},"generated":{"line":990,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":989,"column":0},"generated":{"line":991,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":990,"column":0},"generated":{"line":992,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":991,"column":0},"generated":{"line":993,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":992,"column":0},"generated":{"line":994,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":993,"column":0},"generated":{"line":995,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":994,"column":0},"generated":{"line":996,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":995,"column":0},"generated":{"line":997,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":996,"column":0},"generated":{"line":998,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":997,"column":0},"generated":{"line":999,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":998,"column":0},"generated":{"line":1000,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":999,"column":0},"generated":{"line":1001,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1000,"column":0},"generated":{"line":1002,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1001,"column":0},"generated":{"line":1003,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1002,"column":0},"generated":{"line":1004,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1003,"column":0},"generated":{"line":1005,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1004,"column":0},"generated":{"line":1006,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1005,"column":0},"generated":{"line":1007,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1006,"column":0},"generated":{"line":1008,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1007,"column":0},"generated":{"line":1009,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1008,"column":0},"generated":{"line":1010,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1009,"column":0},"generated":{"line":1011,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1010,"column":0},"generated":{"line":1012,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1011,"column":0},"generated":{"line":1013,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1012,"column":0},"generated":{"line":1014,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1013,"column":0},"generated":{"line":1015,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1014,"column":0},"generated":{"line":1016,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1015,"column":0},"generated":{"line":1017,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1016,"column":0},"generated":{"line":1018,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1017,"column":0},"generated":{"line":1019,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1018,"column":0},"generated":{"line":1020,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1019,"column":0},"generated":{"line":1021,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1020,"column":0},"generated":{"line":1022,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1021,"column":0},"generated":{"line":1023,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1022,"column":0},"generated":{"line":1024,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1023,"column":0},"generated":{"line":1025,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1024,"column":0},"generated":{"line":1026,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1025,"column":0},"generated":{"line":1027,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1026,"column":0},"generated":{"line":1028,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1027,"column":0},"generated":{"line":1029,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1028,"column":0},"generated":{"line":1030,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1029,"column":0},"generated":{"line":1031,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1030,"column":0},"generated":{"line":1032,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1031,"column":0},"generated":{"line":1033,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1032,"column":0},"generated":{"line":1034,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1033,"column":0},"generated":{"line":1035,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1034,"column":0},"generated":{"line":1036,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1035,"column":0},"generated":{"line":1037,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1036,"column":0},"generated":{"line":1038,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1037,"column":0},"generated":{"line":1039,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1038,"column":0},"generated":{"line":1040,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1039,"column":0},"generated":{"line":1041,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1040,"column":0},"generated":{"line":1042,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1041,"column":0},"generated":{"line":1043,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1042,"column":0},"generated":{"line":1044,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1043,"column":0},"generated":{"line":1045,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1044,"column":0},"generated":{"line":1046,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1045,"column":0},"generated":{"line":1047,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1046,"column":0},"generated":{"line":1048,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1047,"column":0},"generated":{"line":1049,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1048,"column":0},"generated":{"line":1050,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1049,"column":0},"generated":{"line":1051,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1050,"column":0},"generated":{"line":1052,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1051,"column":0},"generated":{"line":1053,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1052,"column":0},"generated":{"line":1054,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1053,"column":0},"generated":{"line":1055,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1054,"column":0},"generated":{"line":1056,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1055,"column":0},"generated":{"line":1057,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1056,"column":0},"generated":{"line":1058,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1057,"column":0},"generated":{"line":1059,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1058,"column":0},"generated":{"line":1060,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1059,"column":0},"generated":{"line":1061,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1060,"column":0},"generated":{"line":1062,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1061,"column":0},"generated":{"line":1063,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1062,"column":0},"generated":{"line":1064,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1063,"column":0},"generated":{"line":1065,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1064,"column":0},"generated":{"line":1066,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1065,"column":0},"generated":{"line":1067,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1066,"column":0},"generated":{"line":1068,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1067,"column":0},"generated":{"line":1069,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1068,"column":0},"generated":{"line":1070,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1069,"column":0},"generated":{"line":1071,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1070,"column":0},"generated":{"line":1072,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1071,"column":0},"generated":{"line":1073,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1072,"column":0},"generated":{"line":1074,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1073,"column":0},"generated":{"line":1075,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1074,"column":0},"generated":{"line":1076,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1075,"column":0},"generated":{"line":1077,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1076,"column":0},"generated":{"line":1078,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1077,"column":0},"generated":{"line":1079,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1078,"column":0},"generated":{"line":1080,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1079,"column":0},"generated":{"line":1081,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1080,"column":0},"generated":{"line":1082,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1081,"column":0},"generated":{"line":1083,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1082,"column":0},"generated":{"line":1084,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1083,"column":0},"generated":{"line":1085,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1084,"column":0},"generated":{"line":1086,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1085,"column":0},"generated":{"line":1087,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1086,"column":0},"generated":{"line":1088,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1087,"column":0},"generated":{"line":1089,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1088,"column":0},"generated":{"line":1090,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1089,"column":0},"generated":{"line":1091,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1090,"column":0},"generated":{"line":1092,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1091,"column":0},"generated":{"line":1093,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1092,"column":0},"generated":{"line":1094,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1093,"column":0},"generated":{"line":1095,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1094,"column":0},"generated":{"line":1096,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1095,"column":0},"generated":{"line":1097,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1096,"column":0},"generated":{"line":1098,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1097,"column":0},"generated":{"line":1099,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1098,"column":0},"generated":{"line":1100,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1099,"column":0},"generated":{"line":1101,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1100,"column":0},"generated":{"line":1102,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1101,"column":0},"generated":{"line":1103,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1102,"column":0},"generated":{"line":1104,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1103,"column":0},"generated":{"line":1105,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1104,"column":0},"generated":{"line":1106,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1105,"column":0},"generated":{"line":1107,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1106,"column":0},"generated":{"line":1108,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1107,"column":0},"generated":{"line":1109,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1108,"column":0},"generated":{"line":1110,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1109,"column":0},"generated":{"line":1111,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1110,"column":0},"generated":{"line":1112,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1111,"column":0},"generated":{"line":1113,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1112,"column":0},"generated":{"line":1114,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1113,"column":0},"generated":{"line":1115,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1114,"column":0},"generated":{"line":1116,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1115,"column":0},"generated":{"line":1117,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1116,"column":0},"generated":{"line":1118,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1117,"column":0},"generated":{"line":1119,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1118,"column":0},"generated":{"line":1120,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1119,"column":0},"generated":{"line":1121,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1120,"column":0},"generated":{"line":1122,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1121,"column":0},"generated":{"line":1123,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1122,"column":0},"generated":{"line":1124,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1123,"column":0},"generated":{"line":1125,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1124,"column":0},"generated":{"line":1126,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1125,"column":0},"generated":{"line":1127,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1126,"column":0},"generated":{"line":1128,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1127,"column":0},"generated":{"line":1129,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1128,"column":0},"generated":{"line":1130,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1129,"column":0},"generated":{"line":1131,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1130,"column":0},"generated":{"line":1132,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1131,"column":0},"generated":{"line":1133,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1132,"column":0},"generated":{"line":1134,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1133,"column":0},"generated":{"line":1135,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1134,"column":0},"generated":{"line":1136,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1135,"column":0},"generated":{"line":1137,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1136,"column":0},"generated":{"line":1138,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1137,"column":0},"generated":{"line":1139,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1138,"column":0},"generated":{"line":1140,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1139,"column":0},"generated":{"line":1141,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1140,"column":0},"generated":{"line":1142,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1141,"column":0},"generated":{"line":1143,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1142,"column":0},"generated":{"line":1144,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1143,"column":0},"generated":{"line":1145,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1144,"column":0},"generated":{"line":1146,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1145,"column":0},"generated":{"line":1147,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1146,"column":0},"generated":{"line":1148,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1147,"column":0},"generated":{"line":1149,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1148,"column":0},"generated":{"line":1150,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1149,"column":0},"generated":{"line":1151,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1150,"column":0},"generated":{"line":1152,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1151,"column":0},"generated":{"line":1153,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1152,"column":0},"generated":{"line":1154,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1153,"column":0},"generated":{"line":1155,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1154,"column":0},"generated":{"line":1156,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1155,"column":0},"generated":{"line":1157,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1156,"column":0},"generated":{"line":1158,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1157,"column":0},"generated":{"line":1159,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1158,"column":0},"generated":{"line":1160,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1159,"column":0},"generated":{"line":1161,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1160,"column":0},"generated":{"line":1162,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1161,"column":0},"generated":{"line":1163,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1162,"column":0},"generated":{"line":1164,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1163,"column":0},"generated":{"line":1165,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1164,"column":0},"generated":{"line":1166,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1165,"column":0},"generated":{"line":1167,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1166,"column":0},"generated":{"line":1168,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1167,"column":0},"generated":{"line":1169,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1168,"column":0},"generated":{"line":1170,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1169,"column":0},"generated":{"line":1171,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1170,"column":0},"generated":{"line":1172,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1171,"column":0},"generated":{"line":1173,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1172,"column":0},"generated":{"line":1174,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1173,"column":0},"generated":{"line":1175,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1174,"column":0},"generated":{"line":1176,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1175,"column":0},"generated":{"line":1177,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1176,"column":0},"generated":{"line":1178,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1177,"column":0},"generated":{"line":1179,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1178,"column":0},"generated":{"line":1180,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1179,"column":0},"generated":{"line":1181,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1180,"column":0},"generated":{"line":1182,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1181,"column":0},"generated":{"line":1183,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1182,"column":0},"generated":{"line":1184,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1183,"column":0},"generated":{"line":1185,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1184,"column":0},"generated":{"line":1186,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1185,"column":0},"generated":{"line":1187,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1186,"column":0},"generated":{"line":1188,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1187,"column":0},"generated":{"line":1189,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1188,"column":0},"generated":{"line":1190,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1189,"column":0},"generated":{"line":1191,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1190,"column":0},"generated":{"line":1192,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1191,"column":0},"generated":{"line":1193,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1192,"column":0},"generated":{"line":1194,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1193,"column":0},"generated":{"line":1195,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1194,"column":0},"generated":{"line":1196,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1195,"column":0},"generated":{"line":1197,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1196,"column":0},"generated":{"line":1198,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1197,"column":0},"generated":{"line":1199,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1198,"column":0},"generated":{"line":1200,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1199,"column":0},"generated":{"line":1201,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1200,"column":0},"generated":{"line":1202,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1201,"column":0},"generated":{"line":1203,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1202,"column":0},"generated":{"line":1204,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1203,"column":0},"generated":{"line":1205,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1204,"column":0},"generated":{"line":1206,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1205,"column":0},"generated":{"line":1207,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1206,"column":0},"generated":{"line":1208,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1207,"column":0},"generated":{"line":1209,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1208,"column":0},"generated":{"line":1210,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1209,"column":0},"generated":{"line":1211,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1210,"column":0},"generated":{"line":1212,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1211,"column":0},"generated":{"line":1213,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1212,"column":0},"generated":{"line":1214,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1213,"column":0},"generated":{"line":1215,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1214,"column":0},"generated":{"line":1216,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1215,"column":0},"generated":{"line":1217,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1216,"column":0},"generated":{"line":1218,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1217,"column":0},"generated":{"line":1219,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1218,"column":0},"generated":{"line":1220,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1219,"column":0},"generated":{"line":1221,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1220,"column":0},"generated":{"line":1222,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1221,"column":0},"generated":{"line":1223,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1222,"column":0},"generated":{"line":1224,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1223,"column":0},"generated":{"line":1225,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1224,"column":0},"generated":{"line":1226,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1225,"column":0},"generated":{"line":1227,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1226,"column":0},"generated":{"line":1228,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1227,"column":0},"generated":{"line":1229,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1228,"column":0},"generated":{"line":1230,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1229,"column":0},"generated":{"line":1231,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1230,"column":0},"generated":{"line":1232,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1231,"column":0},"generated":{"line":1233,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1232,"column":0},"generated":{"line":1234,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1233,"column":0},"generated":{"line":1235,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1234,"column":0},"generated":{"line":1236,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1235,"column":0},"generated":{"line":1237,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1236,"column":0},"generated":{"line":1238,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1237,"column":0},"generated":{"line":1239,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1238,"column":0},"generated":{"line":1240,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1239,"column":0},"generated":{"line":1241,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1240,"column":0},"generated":{"line":1242,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1241,"column":0},"generated":{"line":1243,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1242,"column":0},"generated":{"line":1244,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1243,"column":0},"generated":{"line":1245,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1244,"column":0},"generated":{"line":1246,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1245,"column":0},"generated":{"line":1247,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1246,"column":0},"generated":{"line":1248,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1247,"column":0},"generated":{"line":1249,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1248,"column":0},"generated":{"line":1250,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1249,"column":0},"generated":{"line":1251,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1250,"column":0},"generated":{"line":1252,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1251,"column":0},"generated":{"line":1253,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1252,"column":0},"generated":{"line":1254,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1253,"column":0},"generated":{"line":1255,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1254,"column":0},"generated":{"line":1256,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1255,"column":0},"generated":{"line":1257,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1256,"column":0},"generated":{"line":1258,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1257,"column":0},"generated":{"line":1259,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1258,"column":0},"generated":{"line":1260,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1259,"column":0},"generated":{"line":1261,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1260,"column":0},"generated":{"line":1262,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1261,"column":0},"generated":{"line":1263,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1262,"column":0},"generated":{"line":1264,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1263,"column":0},"generated":{"line":1265,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1264,"column":0},"generated":{"line":1266,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1265,"column":0},"generated":{"line":1267,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1266,"column":0},"generated":{"line":1268,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1267,"column":0},"generated":{"line":1269,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1268,"column":0},"generated":{"line":1270,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1269,"column":0},"generated":{"line":1271,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1270,"column":0},"generated":{"line":1272,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1271,"column":0},"generated":{"line":1273,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1272,"column":0},"generated":{"line":1274,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1273,"column":0},"generated":{"line":1275,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1274,"column":0},"generated":{"line":1276,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1275,"column":0},"generated":{"line":1277,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1276,"column":0},"generated":{"line":1278,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1277,"column":0},"generated":{"line":1279,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1278,"column":0},"generated":{"line":1280,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1279,"column":0},"generated":{"line":1281,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1280,"column":0},"generated":{"line":1282,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1281,"column":0},"generated":{"line":1283,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1282,"column":0},"generated":{"line":1284,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1283,"column":0},"generated":{"line":1285,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1284,"column":0},"generated":{"line":1286,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1285,"column":0},"generated":{"line":1287,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1286,"column":0},"generated":{"line":1288,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1287,"column":0},"generated":{"line":1289,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1288,"column":0},"generated":{"line":1290,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1289,"column":0},"generated":{"line":1291,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1290,"column":0},"generated":{"line":1292,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1291,"column":0},"generated":{"line":1293,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1292,"column":0},"generated":{"line":1294,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1293,"column":0},"generated":{"line":1295,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1294,"column":0},"generated":{"line":1296,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1295,"column":0},"generated":{"line":1297,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1296,"column":0},"generated":{"line":1298,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1297,"column":0},"generated":{"line":1299,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1298,"column":0},"generated":{"line":1300,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1299,"column":0},"generated":{"line":1301,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1300,"column":0},"generated":{"line":1302,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1301,"column":0},"generated":{"line":1303,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1302,"column":0},"generated":{"line":1304,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1303,"column":0},"generated":{"line":1305,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1304,"column":0},"generated":{"line":1306,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1305,"column":0},"generated":{"line":1307,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1306,"column":0},"generated":{"line":1308,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1307,"column":0},"generated":{"line":1309,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1308,"column":0},"generated":{"line":1310,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1309,"column":0},"generated":{"line":1311,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1310,"column":0},"generated":{"line":1312,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1311,"column":0},"generated":{"line":1313,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1312,"column":0},"generated":{"line":1314,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1313,"column":0},"generated":{"line":1315,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1314,"column":0},"generated":{"line":1316,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1315,"column":0},"generated":{"line":1317,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1316,"column":0},"generated":{"line":1318,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1317,"column":0},"generated":{"line":1319,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1318,"column":0},"generated":{"line":1320,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1319,"column":0},"generated":{"line":1321,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1320,"column":0},"generated":{"line":1322,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1321,"column":0},"generated":{"line":1323,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1322,"column":0},"generated":{"line":1324,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1323,"column":0},"generated":{"line":1325,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1324,"column":0},"generated":{"line":1326,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1325,"column":0},"generated":{"line":1327,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1326,"column":0},"generated":{"line":1328,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1327,"column":0},"generated":{"line":1329,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1328,"column":0},"generated":{"line":1330,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1329,"column":0},"generated":{"line":1331,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1330,"column":0},"generated":{"line":1332,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1331,"column":0},"generated":{"line":1333,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1332,"column":0},"generated":{"line":1334,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1333,"column":0},"generated":{"line":1335,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1334,"column":0},"generated":{"line":1336,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1335,"column":0},"generated":{"line":1337,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1336,"column":0},"generated":{"line":1338,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1337,"column":0},"generated":{"line":1339,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1338,"column":0},"generated":{"line":1340,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1339,"column":0},"generated":{"line":1341,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1340,"column":0},"generated":{"line":1342,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1341,"column":0},"generated":{"line":1343,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1342,"column":0},"generated":{"line":1344,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1343,"column":0},"generated":{"line":1345,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1344,"column":0},"generated":{"line":1346,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1345,"column":0},"generated":{"line":1347,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1346,"column":0},"generated":{"line":1348,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1347,"column":0},"generated":{"line":1349,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1348,"column":0},"generated":{"line":1350,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1349,"column":0},"generated":{"line":1351,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1350,"column":0},"generated":{"line":1352,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1351,"column":0},"generated":{"line":1353,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1352,"column":0},"generated":{"line":1354,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1353,"column":0},"generated":{"line":1355,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1354,"column":0},"generated":{"line":1356,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1355,"column":0},"generated":{"line":1357,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1356,"column":0},"generated":{"line":1358,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1357,"column":0},"generated":{"line":1359,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1358,"column":0},"generated":{"line":1360,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1359,"column":0},"generated":{"line":1361,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1360,"column":0},"generated":{"line":1362,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1361,"column":0},"generated":{"line":1363,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1362,"column":0},"generated":{"line":1364,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1363,"column":0},"generated":{"line":1365,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1364,"column":0},"generated":{"line":1366,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1365,"column":0},"generated":{"line":1367,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1366,"column":0},"generated":{"line":1368,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1367,"column":0},"generated":{"line":1369,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1368,"column":0},"generated":{"line":1370,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1369,"column":0},"generated":{"line":1371,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1370,"column":0},"generated":{"line":1372,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1371,"column":0},"generated":{"line":1373,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1372,"column":0},"generated":{"line":1374,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1373,"column":0},"generated":{"line":1375,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1374,"column":0},"generated":{"line":1376,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1375,"column":0},"generated":{"line":1377,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1376,"column":0},"generated":{"line":1378,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1377,"column":0},"generated":{"line":1379,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1378,"column":0},"generated":{"line":1380,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1379,"column":0},"generated":{"line":1381,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1380,"column":0},"generated":{"line":1382,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1381,"column":0},"generated":{"line":1383,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1382,"column":0},"generated":{"line":1384,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1383,"column":0},"generated":{"line":1385,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1384,"column":0},"generated":{"line":1386,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1385,"column":0},"generated":{"line":1387,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1386,"column":0},"generated":{"line":1388,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1387,"column":0},"generated":{"line":1389,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1388,"column":0},"generated":{"line":1390,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1389,"column":0},"generated":{"line":1391,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1390,"column":0},"generated":{"line":1392,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1391,"column":0},"generated":{"line":1393,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1392,"column":0},"generated":{"line":1394,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1393,"column":0},"generated":{"line":1395,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1394,"column":0},"generated":{"line":1396,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1395,"column":0},"generated":{"line":1397,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1396,"column":0},"generated":{"line":1398,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1397,"column":0},"generated":{"line":1399,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1398,"column":0},"generated":{"line":1400,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1399,"column":0},"generated":{"line":1401,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1400,"column":0},"generated":{"line":1402,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1401,"column":0},"generated":{"line":1403,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1402,"column":0},"generated":{"line":1404,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1403,"column":0},"generated":{"line":1405,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1404,"column":0},"generated":{"line":1406,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1405,"column":0},"generated":{"line":1407,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1406,"column":0},"generated":{"line":1408,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1407,"column":0},"generated":{"line":1409,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1408,"column":0},"generated":{"line":1410,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1409,"column":0},"generated":{"line":1411,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1410,"column":0},"generated":{"line":1412,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1411,"column":0},"generated":{"line":1413,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1412,"column":0},"generated":{"line":1414,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1413,"column":0},"generated":{"line":1415,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1414,"column":0},"generated":{"line":1416,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1415,"column":0},"generated":{"line":1417,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1416,"column":0},"generated":{"line":1418,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1417,"column":0},"generated":{"line":1419,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1418,"column":0},"generated":{"line":1420,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1419,"column":0},"generated":{"line":1421,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1420,"column":0},"generated":{"line":1422,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1421,"column":0},"generated":{"line":1423,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1422,"column":0},"generated":{"line":1424,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1423,"column":0},"generated":{"line":1425,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1424,"column":0},"generated":{"line":1426,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1425,"column":0},"generated":{"line":1427,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1426,"column":0},"generated":{"line":1428,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1427,"column":0},"generated":{"line":1429,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1428,"column":0},"generated":{"line":1430,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1429,"column":0},"generated":{"line":1431,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1430,"column":0},"generated":{"line":1432,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1431,"column":0},"generated":{"line":1433,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1432,"column":0},"generated":{"line":1434,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1433,"column":0},"generated":{"line":1435,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1434,"column":0},"generated":{"line":1436,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1435,"column":0},"generated":{"line":1437,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1436,"column":0},"generated":{"line":1438,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1437,"column":0},"generated":{"line":1439,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1438,"column":0},"generated":{"line":1440,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1439,"column":0},"generated":{"line":1441,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1440,"column":0},"generated":{"line":1442,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1441,"column":0},"generated":{"line":1443,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1442,"column":0},"generated":{"line":1444,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1443,"column":0},"generated":{"line":1445,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1444,"column":0},"generated":{"line":1446,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1445,"column":0},"generated":{"line":1447,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1446,"column":0},"generated":{"line":1448,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1447,"column":0},"generated":{"line":1449,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1448,"column":0},"generated":{"line":1450,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1449,"column":0},"generated":{"line":1451,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1450,"column":0},"generated":{"line":1452,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1451,"column":0},"generated":{"line":1453,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1452,"column":0},"generated":{"line":1454,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1453,"column":0},"generated":{"line":1455,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1454,"column":0},"generated":{"line":1456,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1455,"column":0},"generated":{"line":1457,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1456,"column":0},"generated":{"line":1458,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1457,"column":0},"generated":{"line":1459,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1458,"column":0},"generated":{"line":1460,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1459,"column":0},"generated":{"line":1461,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1460,"column":0},"generated":{"line":1462,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1461,"column":0},"generated":{"line":1463,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1462,"column":0},"generated":{"line":1464,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1463,"column":0},"generated":{"line":1465,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1464,"column":0},"generated":{"line":1466,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1465,"column":0},"generated":{"line":1467,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1466,"column":0},"generated":{"line":1468,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1467,"column":0},"generated":{"line":1469,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1468,"column":0},"generated":{"line":1470,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1469,"column":0},"generated":{"line":1471,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1470,"column":0},"generated":{"line":1472,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1471,"column":0},"generated":{"line":1473,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1472,"column":0},"generated":{"line":1474,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1473,"column":0},"generated":{"line":1475,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1474,"column":0},"generated":{"line":1476,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1475,"column":0},"generated":{"line":1477,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1476,"column":0},"generated":{"line":1478,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1477,"column":0},"generated":{"line":1479,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1478,"column":0},"generated":{"line":1480,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1479,"column":0},"generated":{"line":1481,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1480,"column":0},"generated":{"line":1482,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1481,"column":0},"generated":{"line":1483,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1482,"column":0},"generated":{"line":1484,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1483,"column":0},"generated":{"line":1485,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1484,"column":0},"generated":{"line":1486,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1485,"column":0},"generated":{"line":1487,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1486,"column":0},"generated":{"line":1488,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1487,"column":0},"generated":{"line":1489,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1488,"column":0},"generated":{"line":1490,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1489,"column":0},"generated":{"line":1491,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1490,"column":0},"generated":{"line":1492,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1491,"column":0},"generated":{"line":1493,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1492,"column":0},"generated":{"line":1494,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1493,"column":0},"generated":{"line":1495,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1494,"column":0},"generated":{"line":1496,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1495,"column":0},"generated":{"line":1497,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1496,"column":0},"generated":{"line":1498,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1497,"column":0},"generated":{"line":1499,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1498,"column":0},"generated":{"line":1500,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1499,"column":0},"generated":{"line":1501,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1500,"column":0},"generated":{"line":1502,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1501,"column":0},"generated":{"line":1503,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1502,"column":0},"generated":{"line":1504,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1503,"column":0},"generated":{"line":1505,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1504,"column":0},"generated":{"line":1506,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1505,"column":0},"generated":{"line":1507,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1506,"column":0},"generated":{"line":1508,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1507,"column":0},"generated":{"line":1509,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1508,"column":0},"generated":{"line":1510,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1509,"column":0},"generated":{"line":1511,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1510,"column":0},"generated":{"line":1512,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1511,"column":0},"generated":{"line":1513,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1512,"column":0},"generated":{"line":1514,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1513,"column":0},"generated":{"line":1515,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1514,"column":0},"generated":{"line":1516,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1515,"column":0},"generated":{"line":1517,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1516,"column":0},"generated":{"line":1518,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1517,"column":0},"generated":{"line":1519,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1518,"column":0},"generated":{"line":1520,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1519,"column":0},"generated":{"line":1521,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1520,"column":0},"generated":{"line":1522,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1521,"column":0},"generated":{"line":1523,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1522,"column":0},"generated":{"line":1524,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1523,"column":0},"generated":{"line":1525,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1524,"column":0},"generated":{"line":1526,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1525,"column":0},"generated":{"line":1527,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1526,"column":0},"generated":{"line":1528,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1527,"column":0},"generated":{"line":1529,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1528,"column":0},"generated":{"line":1530,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1529,"column":0},"generated":{"line":1531,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1530,"column":0},"generated":{"line":1532,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1531,"column":0},"generated":{"line":1533,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1532,"column":0},"generated":{"line":1534,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1533,"column":0},"generated":{"line":1535,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1534,"column":0},"generated":{"line":1536,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1535,"column":0},"generated":{"line":1537,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1536,"column":0},"generated":{"line":1538,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1537,"column":0},"generated":{"line":1539,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1538,"column":0},"generated":{"line":1540,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1539,"column":0},"generated":{"line":1541,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1540,"column":0},"generated":{"line":1542,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1541,"column":0},"generated":{"line":1543,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1542,"column":0},"generated":{"line":1544,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1543,"column":0},"generated":{"line":1545,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1544,"column":0},"generated":{"line":1546,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1545,"column":0},"generated":{"line":1547,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1546,"column":0},"generated":{"line":1548,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1547,"column":0},"generated":{"line":1549,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1548,"column":0},"generated":{"line":1550,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1549,"column":0},"generated":{"line":1551,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1550,"column":0},"generated":{"line":1552,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1551,"column":0},"generated":{"line":1553,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1552,"column":0},"generated":{"line":1554,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1553,"column":0},"generated":{"line":1555,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1554,"column":0},"generated":{"line":1556,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1555,"column":0},"generated":{"line":1557,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1556,"column":0},"generated":{"line":1558,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1557,"column":0},"generated":{"line":1559,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1558,"column":0},"generated":{"line":1560,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1559,"column":0},"generated":{"line":1561,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1560,"column":0},"generated":{"line":1562,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1561,"column":0},"generated":{"line":1563,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1562,"column":0},"generated":{"line":1564,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1563,"column":0},"generated":{"line":1565,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1564,"column":0},"generated":{"line":1566,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1565,"column":0},"generated":{"line":1567,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1566,"column":0},"generated":{"line":1568,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1567,"column":0},"generated":{"line":1569,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1568,"column":0},"generated":{"line":1570,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1569,"column":0},"generated":{"line":1571,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1570,"column":0},"generated":{"line":1572,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1571,"column":0},"generated":{"line":1573,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1572,"column":0},"generated":{"line":1574,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1573,"column":0},"generated":{"line":1575,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1574,"column":0},"generated":{"line":1576,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1575,"column":0},"generated":{"line":1577,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1576,"column":0},"generated":{"line":1578,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1577,"column":0},"generated":{"line":1579,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1578,"column":0},"generated":{"line":1580,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1579,"column":0},"generated":{"line":1581,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1580,"column":0},"generated":{"line":1582,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1581,"column":0},"generated":{"line":1583,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1582,"column":0},"generated":{"line":1584,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1583,"column":0},"generated":{"line":1585,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1584,"column":0},"generated":{"line":1586,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1585,"column":0},"generated":{"line":1587,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1586,"column":0},"generated":{"line":1588,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1587,"column":0},"generated":{"line":1589,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1588,"column":0},"generated":{"line":1590,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1589,"column":0},"generated":{"line":1591,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1590,"column":0},"generated":{"line":1592,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1591,"column":0},"generated":{"line":1593,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1592,"column":0},"generated":{"line":1594,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1593,"column":0},"generated":{"line":1595,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1594,"column":0},"generated":{"line":1596,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1595,"column":0},"generated":{"line":1597,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1596,"column":0},"generated":{"line":1598,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1597,"column":0},"generated":{"line":1599,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1598,"column":0},"generated":{"line":1600,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1599,"column":0},"generated":{"line":1601,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1600,"column":0},"generated":{"line":1602,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1601,"column":0},"generated":{"line":1603,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1602,"column":0},"generated":{"line":1604,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1603,"column":0},"generated":{"line":1605,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1604,"column":0},"generated":{"line":1606,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1605,"column":0},"generated":{"line":1607,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1606,"column":0},"generated":{"line":1608,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1607,"column":0},"generated":{"line":1609,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1608,"column":0},"generated":{"line":1610,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1609,"column":0},"generated":{"line":1611,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1610,"column":0},"generated":{"line":1612,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1611,"column":0},"generated":{"line":1613,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1612,"column":0},"generated":{"line":1614,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1613,"column":0},"generated":{"line":1615,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1614,"column":0},"generated":{"line":1616,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1615,"column":0},"generated":{"line":1617,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1616,"column":0},"generated":{"line":1618,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1617,"column":0},"generated":{"line":1619,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1618,"column":0},"generated":{"line":1620,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1619,"column":0},"generated":{"line":1621,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1620,"column":0},"generated":{"line":1622,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1621,"column":0},"generated":{"line":1623,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1622,"column":0},"generated":{"line":1624,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1623,"column":0},"generated":{"line":1625,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1624,"column":0},"generated":{"line":1626,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1625,"column":0},"generated":{"line":1627,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1626,"column":0},"generated":{"line":1628,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1627,"column":0},"generated":{"line":1629,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1628,"column":0},"generated":{"line":1630,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1629,"column":0},"generated":{"line":1631,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1630,"column":0},"generated":{"line":1632,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1631,"column":0},"generated":{"line":1633,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1632,"column":0},"generated":{"line":1634,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1633,"column":0},"generated":{"line":1635,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1634,"column":0},"generated":{"line":1636,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1635,"column":0},"generated":{"line":1637,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1636,"column":0},"generated":{"line":1638,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1637,"column":0},"generated":{"line":1639,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1638,"column":0},"generated":{"line":1640,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1639,"column":0},"generated":{"line":1641,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1640,"column":0},"generated":{"line":1642,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1641,"column":0},"generated":{"line":1643,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1642,"column":0},"generated":{"line":1644,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1643,"column":0},"generated":{"line":1645,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1644,"column":0},"generated":{"line":1646,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1645,"column":0},"generated":{"line":1647,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1646,"column":0},"generated":{"line":1648,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1647,"column":0},"generated":{"line":1649,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1648,"column":0},"generated":{"line":1650,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1649,"column":0},"generated":{"line":1651,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1650,"column":0},"generated":{"line":1652,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1651,"column":0},"generated":{"line":1653,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1652,"column":0},"generated":{"line":1654,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1653,"column":0},"generated":{"line":1655,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1654,"column":0},"generated":{"line":1656,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1655,"column":0},"generated":{"line":1657,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1656,"column":0},"generated":{"line":1658,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1657,"column":0},"generated":{"line":1659,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1658,"column":0},"generated":{"line":1660,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1659,"column":0},"generated":{"line":1661,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1660,"column":0},"generated":{"line":1662,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1661,"column":0},"generated":{"line":1663,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1662,"column":0},"generated":{"line":1664,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1663,"column":0},"generated":{"line":1665,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1664,"column":0},"generated":{"line":1666,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1665,"column":0},"generated":{"line":1667,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1666,"column":0},"generated":{"line":1668,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1667,"column":0},"generated":{"line":1669,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1668,"column":0},"generated":{"line":1670,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1669,"column":0},"generated":{"line":1671,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1670,"column":0},"generated":{"line":1672,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1671,"column":0},"generated":{"line":1673,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1672,"column":0},"generated":{"line":1674,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1673,"column":0},"generated":{"line":1675,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1674,"column":0},"generated":{"line":1676,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1675,"column":0},"generated":{"line":1677,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1676,"column":0},"generated":{"line":1678,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1677,"column":0},"generated":{"line":1679,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1678,"column":0},"generated":{"line":1680,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1679,"column":0},"generated":{"line":1681,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1680,"column":0},"generated":{"line":1682,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1681,"column":0},"generated":{"line":1683,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1682,"column":0},"generated":{"line":1684,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1683,"column":0},"generated":{"line":1685,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1684,"column":0},"generated":{"line":1686,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1685,"column":0},"generated":{"line":1687,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1686,"column":0},"generated":{"line":1688,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1687,"column":0},"generated":{"line":1689,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1688,"column":0},"generated":{"line":1690,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1689,"column":0},"generated":{"line":1691,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1690,"column":0},"generated":{"line":1692,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1691,"column":0},"generated":{"line":1693,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1692,"column":0},"generated":{"line":1694,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1693,"column":0},"generated":{"line":1695,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1694,"column":0},"generated":{"line":1696,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1695,"column":0},"generated":{"line":1697,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1696,"column":0},"generated":{"line":1698,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1697,"column":0},"generated":{"line":1699,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1698,"column":0},"generated":{"line":1700,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1699,"column":0},"generated":{"line":1701,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1700,"column":0},"generated":{"line":1702,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1701,"column":0},"generated":{"line":1703,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1702,"column":0},"generated":{"line":1704,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1703,"column":0},"generated":{"line":1705,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1704,"column":0},"generated":{"line":1706,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1705,"column":0},"generated":{"line":1707,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1706,"column":0},"generated":{"line":1708,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1707,"column":0},"generated":{"line":1709,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1708,"column":0},"generated":{"line":1710,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1709,"column":0},"generated":{"line":1711,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1710,"column":0},"generated":{"line":1712,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1711,"column":0},"generated":{"line":1713,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1712,"column":0},"generated":{"line":1714,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1713,"column":0},"generated":{"line":1715,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1714,"column":0},"generated":{"line":1716,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1715,"column":0},"generated":{"line":1717,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1716,"column":0},"generated":{"line":1718,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1717,"column":0},"generated":{"line":1719,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1718,"column":0},"generated":{"line":1720,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1719,"column":0},"generated":{"line":1721,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1720,"column":0},"generated":{"line":1722,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1721,"column":0},"generated":{"line":1723,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1722,"column":0},"generated":{"line":1724,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1723,"column":0},"generated":{"line":1725,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1724,"column":0},"generated":{"line":1726,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1725,"column":0},"generated":{"line":1727,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1726,"column":0},"generated":{"line":1728,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1727,"column":0},"generated":{"line":1729,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1728,"column":0},"generated":{"line":1730,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1729,"column":0},"generated":{"line":1731,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1730,"column":0},"generated":{"line":1732,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1731,"column":0},"generated":{"line":1733,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1732,"column":0},"generated":{"line":1734,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1733,"column":0},"generated":{"line":1735,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1734,"column":0},"generated":{"line":1736,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1735,"column":0},"generated":{"line":1737,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1736,"column":0},"generated":{"line":1738,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1737,"column":0},"generated":{"line":1739,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1738,"column":0},"generated":{"line":1740,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1739,"column":0},"generated":{"line":1741,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1740,"column":0},"generated":{"line":1742,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1741,"column":0},"generated":{"line":1743,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1742,"column":0},"generated":{"line":1744,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1743,"column":0},"generated":{"line":1745,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1744,"column":0},"generated":{"line":1746,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1745,"column":0},"generated":{"line":1747,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1746,"column":0},"generated":{"line":1748,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1747,"column":0},"generated":{"line":1749,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1748,"column":0},"generated":{"line":1750,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1749,"column":0},"generated":{"line":1751,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1750,"column":0},"generated":{"line":1752,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1751,"column":0},"generated":{"line":1753,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1752,"column":0},"generated":{"line":1754,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1753,"column":0},"generated":{"line":1755,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1754,"column":0},"generated":{"line":1756,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1755,"column":0},"generated":{"line":1757,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1756,"column":0},"generated":{"line":1758,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1757,"column":0},"generated":{"line":1759,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1758,"column":0},"generated":{"line":1760,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1759,"column":0},"generated":{"line":1761,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1760,"column":0},"generated":{"line":1762,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1761,"column":0},"generated":{"line":1763,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1762,"column":0},"generated":{"line":1764,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1763,"column":0},"generated":{"line":1765,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1764,"column":0},"generated":{"line":1766,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1765,"column":0},"generated":{"line":1767,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1766,"column":0},"generated":{"line":1768,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1767,"column":0},"generated":{"line":1769,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1768,"column":0},"generated":{"line":1770,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1769,"column":0},"generated":{"line":1771,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1770,"column":0},"generated":{"line":1772,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1771,"column":0},"generated":{"line":1773,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1772,"column":0},"generated":{"line":1774,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1773,"column":0},"generated":{"line":1775,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1774,"column":0},"generated":{"line":1776,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1775,"column":0},"generated":{"line":1777,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1776,"column":0},"generated":{"line":1778,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1777,"column":0},"generated":{"line":1779,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1778,"column":0},"generated":{"line":1780,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1779,"column":0},"generated":{"line":1781,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1780,"column":0},"generated":{"line":1782,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1781,"column":0},"generated":{"line":1783,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1782,"column":0},"generated":{"line":1784,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1783,"column":0},"generated":{"line":1785,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1784,"column":0},"generated":{"line":1786,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1785,"column":0},"generated":{"line":1787,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1786,"column":0},"generated":{"line":1788,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1787,"column":0},"generated":{"line":1789,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1788,"column":0},"generated":{"line":1790,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1789,"column":0},"generated":{"line":1791,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1790,"column":0},"generated":{"line":1792,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1791,"column":0},"generated":{"line":1793,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1792,"column":0},"generated":{"line":1794,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1793,"column":0},"generated":{"line":1795,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1794,"column":0},"generated":{"line":1796,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1795,"column":0},"generated":{"line":1797,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1796,"column":0},"generated":{"line":1798,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1797,"column":0},"generated":{"line":1799,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1798,"column":0},"generated":{"line":1800,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1799,"column":0},"generated":{"line":1801,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1800,"column":0},"generated":{"line":1802,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1801,"column":0},"generated":{"line":1803,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1802,"column":0},"generated":{"line":1804,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1803,"column":0},"generated":{"line":1805,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1804,"column":0},"generated":{"line":1806,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1805,"column":0},"generated":{"line":1807,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1806,"column":0},"generated":{"line":1808,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1807,"column":0},"generated":{"line":1809,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1808,"column":0},"generated":{"line":1810,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1809,"column":0},"generated":{"line":1811,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1810,"column":0},"generated":{"line":1812,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1811,"column":0},"generated":{"line":1813,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1812,"column":0},"generated":{"line":1814,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1813,"column":0},"generated":{"line":1815,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1814,"column":0},"generated":{"line":1816,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1815,"column":0},"generated":{"line":1817,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1816,"column":0},"generated":{"line":1818,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1817,"column":0},"generated":{"line":1819,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1818,"column":0},"generated":{"line":1820,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1819,"column":0},"generated":{"line":1821,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1820,"column":0},"generated":{"line":1822,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1821,"column":0},"generated":{"line":1823,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1822,"column":0},"generated":{"line":1824,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1823,"column":0},"generated":{"line":1825,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1824,"column":0},"generated":{"line":1826,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1825,"column":0},"generated":{"line":1827,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1826,"column":0},"generated":{"line":1828,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1827,"column":0},"generated":{"line":1829,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1828,"column":0},"generated":{"line":1830,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1829,"column":0},"generated":{"line":1831,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1830,"column":0},"generated":{"line":1832,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1831,"column":0},"generated":{"line":1833,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1832,"column":0},"generated":{"line":1834,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1833,"column":0},"generated":{"line":1835,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1834,"column":0},"generated":{"line":1836,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1835,"column":0},"generated":{"line":1837,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1836,"column":0},"generated":{"line":1838,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1837,"column":0},"generated":{"line":1839,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1838,"column":0},"generated":{"line":1840,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1839,"column":0},"generated":{"line":1841,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1840,"column":0},"generated":{"line":1842,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1841,"column":0},"generated":{"line":1843,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1842,"column":0},"generated":{"line":1844,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1843,"column":0},"generated":{"line":1845,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1844,"column":0},"generated":{"line":1846,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1845,"column":0},"generated":{"line":1847,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1846,"column":0},"generated":{"line":1848,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1847,"column":0},"generated":{"line":1849,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1848,"column":0},"generated":{"line":1850,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1849,"column":0},"generated":{"line":1851,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1850,"column":0},"generated":{"line":1852,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1851,"column":0},"generated":{"line":1853,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1852,"column":0},"generated":{"line":1854,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1853,"column":0},"generated":{"line":1855,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1854,"column":0},"generated":{"line":1856,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1855,"column":0},"generated":{"line":1857,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1856,"column":0},"generated":{"line":1858,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1857,"column":0},"generated":{"line":1859,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1858,"column":0},"generated":{"line":1860,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1859,"column":0},"generated":{"line":1861,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1860,"column":0},"generated":{"line":1862,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1861,"column":0},"generated":{"line":1863,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1862,"column":0},"generated":{"line":1864,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1863,"column":0},"generated":{"line":1865,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1864,"column":0},"generated":{"line":1866,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1865,"column":0},"generated":{"line":1867,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1866,"column":0},"generated":{"line":1868,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1867,"column":0},"generated":{"line":1869,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1868,"column":0},"generated":{"line":1870,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1869,"column":0},"generated":{"line":1871,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1870,"column":0},"generated":{"line":1872,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1871,"column":0},"generated":{"line":1873,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1872,"column":0},"generated":{"line":1874,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1873,"column":0},"generated":{"line":1875,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1874,"column":0},"generated":{"line":1876,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1875,"column":0},"generated":{"line":1877,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1876,"column":0},"generated":{"line":1878,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1877,"column":0},"generated":{"line":1879,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1878,"column":0},"generated":{"line":1880,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1879,"column":0},"generated":{"line":1881,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1880,"column":0},"generated":{"line":1882,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1881,"column":0},"generated":{"line":1883,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1882,"column":0},"generated":{"line":1884,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1883,"column":0},"generated":{"line":1885,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1884,"column":0},"generated":{"line":1886,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1885,"column":0},"generated":{"line":1887,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1886,"column":0},"generated":{"line":1888,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1887,"column":0},"generated":{"line":1889,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1888,"column":0},"generated":{"line":1890,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1889,"column":0},"generated":{"line":1891,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1890,"column":0},"generated":{"line":1892,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1891,"column":0},"generated":{"line":1893,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1892,"column":0},"generated":{"line":1894,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1893,"column":0},"generated":{"line":1895,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1894,"column":0},"generated":{"line":1896,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1895,"column":0},"generated":{"line":1897,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1896,"column":0},"generated":{"line":1898,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1897,"column":0},"generated":{"line":1899,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1898,"column":0},"generated":{"line":1900,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1899,"column":0},"generated":{"line":1901,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1900,"column":0},"generated":{"line":1902,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1901,"column":0},"generated":{"line":1903,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1902,"column":0},"generated":{"line":1904,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1903,"column":0},"generated":{"line":1905,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1904,"column":0},"generated":{"line":1906,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1905,"column":0},"generated":{"line":1907,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1906,"column":0},"generated":{"line":1908,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1907,"column":0},"generated":{"line":1909,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1908,"column":0},"generated":{"line":1910,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1909,"column":0},"generated":{"line":1911,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1910,"column":0},"generated":{"line":1912,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1911,"column":0},"generated":{"line":1913,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1912,"column":0},"generated":{"line":1914,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1913,"column":0},"generated":{"line":1915,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1914,"column":0},"generated":{"line":1916,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1915,"column":0},"generated":{"line":1917,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1916,"column":0},"generated":{"line":1918,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1917,"column":0},"generated":{"line":1919,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1918,"column":0},"generated":{"line":1920,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1919,"column":0},"generated":{"line":1921,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1920,"column":0},"generated":{"line":1922,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1921,"column":0},"generated":{"line":1923,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1922,"column":0},"generated":{"line":1924,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1923,"column":0},"generated":{"line":1925,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1924,"column":0},"generated":{"line":1926,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1925,"column":0},"generated":{"line":1927,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1926,"column":0},"generated":{"line":1928,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1927,"column":0},"generated":{"line":1929,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1928,"column":0},"generated":{"line":1930,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1929,"column":0},"generated":{"line":1931,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1930,"column":0},"generated":{"line":1932,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1931,"column":0},"generated":{"line":1933,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1932,"column":0},"generated":{"line":1934,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1933,"column":0},"generated":{"line":1935,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1934,"column":0},"generated":{"line":1936,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1935,"column":0},"generated":{"line":1937,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1936,"column":0},"generated":{"line":1938,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1937,"column":0},"generated":{"line":1939,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1938,"column":0},"generated":{"line":1940,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1939,"column":0},"generated":{"line":1941,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1940,"column":0},"generated":{"line":1942,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1941,"column":0},"generated":{"line":1943,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1942,"column":0},"generated":{"line":1944,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1943,"column":0},"generated":{"line":1945,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1944,"column":0},"generated":{"line":1946,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1945,"column":0},"generated":{"line":1947,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1946,"column":0},"generated":{"line":1948,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1947,"column":0},"generated":{"line":1949,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1948,"column":0},"generated":{"line":1950,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1949,"column":0},"generated":{"line":1951,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1950,"column":0},"generated":{"line":1952,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1951,"column":0},"generated":{"line":1953,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1952,"column":0},"generated":{"line":1954,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1953,"column":0},"generated":{"line":1955,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1954,"column":0},"generated":{"line":1956,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1955,"column":0},"generated":{"line":1957,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1956,"column":0},"generated":{"line":1958,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1957,"column":0},"generated":{"line":1959,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1958,"column":0},"generated":{"line":1960,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1959,"column":0},"generated":{"line":1961,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1960,"column":0},"generated":{"line":1962,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1961,"column":0},"generated":{"line":1963,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1962,"column":0},"generated":{"line":1964,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1963,"column":0},"generated":{"line":1965,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1964,"column":0},"generated":{"line":1966,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1965,"column":0},"generated":{"line":1967,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1966,"column":0},"generated":{"line":1968,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1967,"column":0},"generated":{"line":1969,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1968,"column":0},"generated":{"line":1970,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1969,"column":0},"generated":{"line":1971,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1970,"column":0},"generated":{"line":1972,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1971,"column":0},"generated":{"line":1973,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1972,"column":0},"generated":{"line":1974,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1973,"column":0},"generated":{"line":1975,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1974,"column":0},"generated":{"line":1976,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1975,"column":0},"generated":{"line":1977,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1976,"column":0},"generated":{"line":1978,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1977,"column":0},"generated":{"line":1979,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1978,"column":0},"generated":{"line":1980,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1979,"column":0},"generated":{"line":1981,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1980,"column":0},"generated":{"line":1982,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1981,"column":0},"generated":{"line":1983,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1982,"column":0},"generated":{"line":1984,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1983,"column":0},"generated":{"line":1985,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1984,"column":0},"generated":{"line":1986,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1985,"column":0},"generated":{"line":1987,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1986,"column":0},"generated":{"line":1988,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1987,"column":0},"generated":{"line":1989,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1988,"column":0},"generated":{"line":1990,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1989,"column":0},"generated":{"line":1991,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1990,"column":0},"generated":{"line":1992,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1991,"column":0},"generated":{"line":1993,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1992,"column":0},"generated":{"line":1994,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1993,"column":0},"generated":{"line":1995,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1994,"column":0},"generated":{"line":1996,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1995,"column":0},"generated":{"line":1997,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1996,"column":0},"generated":{"line":1998,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1997,"column":0},"generated":{"line":1999,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1998,"column":0},"generated":{"line":2000,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":1999,"column":0},"generated":{"line":2001,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2000,"column":0},"generated":{"line":2002,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2001,"column":0},"generated":{"line":2003,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2002,"column":0},"generated":{"line":2004,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2003,"column":0},"generated":{"line":2005,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2004,"column":0},"generated":{"line":2006,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2005,"column":0},"generated":{"line":2007,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2006,"column":0},"generated":{"line":2008,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2007,"column":0},"generated":{"line":2009,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2008,"column":0},"generated":{"line":2010,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2009,"column":0},"generated":{"line":2011,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2010,"column":0},"generated":{"line":2012,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2011,"column":0},"generated":{"line":2013,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2012,"column":0},"generated":{"line":2014,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2013,"column":0},"generated":{"line":2015,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2014,"column":0},"generated":{"line":2016,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2015,"column":0},"generated":{"line":2017,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2016,"column":0},"generated":{"line":2018,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2017,"column":0},"generated":{"line":2019,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2018,"column":0},"generated":{"line":2020,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2019,"column":0},"generated":{"line":2021,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2020,"column":0},"generated":{"line":2022,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2021,"column":0},"generated":{"line":2023,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2022,"column":0},"generated":{"line":2024,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2023,"column":0},"generated":{"line":2025,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2024,"column":0},"generated":{"line":2026,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2025,"column":0},"generated":{"line":2027,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2026,"column":0},"generated":{"line":2028,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2027,"column":0},"generated":{"line":2029,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2028,"column":0},"generated":{"line":2030,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2029,"column":0},"generated":{"line":2031,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2030,"column":0},"generated":{"line":2032,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2031,"column":0},"generated":{"line":2033,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2032,"column":0},"generated":{"line":2034,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2033,"column":0},"generated":{"line":2035,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2034,"column":0},"generated":{"line":2036,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2035,"column":0},"generated":{"line":2037,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2036,"column":0},"generated":{"line":2038,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2037,"column":0},"generated":{"line":2039,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2038,"column":0},"generated":{"line":2040,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2039,"column":0},"generated":{"line":2041,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2040,"column":0},"generated":{"line":2042,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2041,"column":0},"generated":{"line":2043,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2042,"column":0},"generated":{"line":2044,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2043,"column":0},"generated":{"line":2045,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2044,"column":0},"generated":{"line":2046,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2045,"column":0},"generated":{"line":2047,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2046,"column":0},"generated":{"line":2048,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2047,"column":0},"generated":{"line":2049,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2048,"column":0},"generated":{"line":2050,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2049,"column":0},"generated":{"line":2051,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2050,"column":0},"generated":{"line":2052,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2051,"column":0},"generated":{"line":2053,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2052,"column":0},"generated":{"line":2054,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2053,"column":0},"generated":{"line":2055,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2054,"column":0},"generated":{"line":2056,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2055,"column":0},"generated":{"line":2057,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2056,"column":0},"generated":{"line":2058,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2057,"column":0},"generated":{"line":2059,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2058,"column":0},"generated":{"line":2060,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2059,"column":0},"generated":{"line":2061,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2060,"column":0},"generated":{"line":2062,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2061,"column":0},"generated":{"line":2063,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2062,"column":0},"generated":{"line":2064,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2063,"column":0},"generated":{"line":2065,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2064,"column":0},"generated":{"line":2066,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2065,"column":0},"generated":{"line":2067,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2066,"column":0},"generated":{"line":2068,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2067,"column":0},"generated":{"line":2069,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2068,"column":0},"generated":{"line":2070,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2069,"column":0},"generated":{"line":2071,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2070,"column":0},"generated":{"line":2072,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2071,"column":0},"generated":{"line":2073,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2072,"column":0},"generated":{"line":2074,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2073,"column":0},"generated":{"line":2075,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2074,"column":0},"generated":{"line":2076,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2075,"column":0},"generated":{"line":2077,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2076,"column":0},"generated":{"line":2078,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2077,"column":0},"generated":{"line":2079,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2078,"column":0},"generated":{"line":2080,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2079,"column":0},"generated":{"line":2081,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2080,"column":0},"generated":{"line":2082,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2081,"column":0},"generated":{"line":2083,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2082,"column":0},"generated":{"line":2084,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2083,"column":0},"generated":{"line":2085,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2084,"column":0},"generated":{"line":2086,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2085,"column":0},"generated":{"line":2087,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2086,"column":0},"generated":{"line":2088,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2087,"column":0},"generated":{"line":2089,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2088,"column":0},"generated":{"line":2090,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2089,"column":0},"generated":{"line":2091,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2090,"column":0},"generated":{"line":2092,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2091,"column":0},"generated":{"line":2093,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2092,"column":0},"generated":{"line":2094,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2093,"column":0},"generated":{"line":2095,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2094,"column":0},"generated":{"line":2096,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2095,"column":0},"generated":{"line":2097,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2096,"column":0},"generated":{"line":2098,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2097,"column":0},"generated":{"line":2099,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2098,"column":0},"generated":{"line":2100,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2099,"column":0},"generated":{"line":2101,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2100,"column":0},"generated":{"line":2102,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2101,"column":0},"generated":{"line":2103,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2102,"column":0},"generated":{"line":2104,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2103,"column":0},"generated":{"line":2105,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2104,"column":0},"generated":{"line":2106,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2105,"column":0},"generated":{"line":2107,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2106,"column":0},"generated":{"line":2108,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2107,"column":0},"generated":{"line":2109,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2108,"column":0},"generated":{"line":2110,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2109,"column":0},"generated":{"line":2111,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2110,"column":0},"generated":{"line":2112,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2111,"column":0},"generated":{"line":2113,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2112,"column":0},"generated":{"line":2114,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2113,"column":0},"generated":{"line":2115,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2114,"column":0},"generated":{"line":2116,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2115,"column":0},"generated":{"line":2117,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2116,"column":0},"generated":{"line":2118,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2117,"column":0},"generated":{"line":2119,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2118,"column":0},"generated":{"line":2120,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2119,"column":0},"generated":{"line":2121,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2120,"column":0},"generated":{"line":2122,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2121,"column":0},"generated":{"line":2123,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2122,"column":0},"generated":{"line":2124,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2123,"column":0},"generated":{"line":2125,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2124,"column":0},"generated":{"line":2126,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2125,"column":0},"generated":{"line":2127,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2126,"column":0},"generated":{"line":2128,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2127,"column":0},"generated":{"line":2129,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2128,"column":0},"generated":{"line":2130,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2129,"column":0},"generated":{"line":2131,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2130,"column":0},"generated":{"line":2132,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2131,"column":0},"generated":{"line":2133,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2132,"column":0},"generated":{"line":2134,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2133,"column":0},"generated":{"line":2135,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2134,"column":0},"generated":{"line":2136,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2135,"column":0},"generated":{"line":2137,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2136,"column":0},"generated":{"line":2138,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2137,"column":0},"generated":{"line":2139,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2138,"column":0},"generated":{"line":2140,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2139,"column":0},"generated":{"line":2141,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2140,"column":0},"generated":{"line":2142,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2141,"column":0},"generated":{"line":2143,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2142,"column":0},"generated":{"line":2144,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2143,"column":0},"generated":{"line":2145,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2144,"column":0},"generated":{"line":2146,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2145,"column":0},"generated":{"line":2147,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2146,"column":0},"generated":{"line":2148,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2147,"column":0},"generated":{"line":2149,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2148,"column":0},"generated":{"line":2150,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2149,"column":0},"generated":{"line":2151,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2150,"column":0},"generated":{"line":2152,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2151,"column":0},"generated":{"line":2153,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2152,"column":0},"generated":{"line":2154,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2153,"column":0},"generated":{"line":2155,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2154,"column":0},"generated":{"line":2156,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2155,"column":0},"generated":{"line":2157,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2156,"column":0},"generated":{"line":2158,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2157,"column":0},"generated":{"line":2159,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2158,"column":0},"generated":{"line":2160,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2159,"column":0},"generated":{"line":2161,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2160,"column":0},"generated":{"line":2162,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2161,"column":0},"generated":{"line":2163,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2162,"column":0},"generated":{"line":2164,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2163,"column":0},"generated":{"line":2165,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2164,"column":0},"generated":{"line":2166,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2165,"column":0},"generated":{"line":2167,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2166,"column":0},"generated":{"line":2168,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2167,"column":0},"generated":{"line":2169,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2168,"column":0},"generated":{"line":2170,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2169,"column":0},"generated":{"line":2171,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2170,"column":0},"generated":{"line":2172,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2171,"column":0},"generated":{"line":2173,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2172,"column":0},"generated":{"line":2174,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2173,"column":0},"generated":{"line":2175,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2174,"column":0},"generated":{"line":2176,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2175,"column":0},"generated":{"line":2177,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2176,"column":0},"generated":{"line":2178,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2177,"column":0},"generated":{"line":2179,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2178,"column":0},"generated":{"line":2180,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2179,"column":0},"generated":{"line":2181,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2180,"column":0},"generated":{"line":2182,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2181,"column":0},"generated":{"line":2183,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2182,"column":0},"generated":{"line":2184,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2183,"column":0},"generated":{"line":2185,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2184,"column":0},"generated":{"line":2186,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2185,"column":0},"generated":{"line":2187,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2186,"column":0},"generated":{"line":2188,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2187,"column":0},"generated":{"line":2189,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2188,"column":0},"generated":{"line":2190,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2189,"column":0},"generated":{"line":2191,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2190,"column":0},"generated":{"line":2192,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2191,"column":0},"generated":{"line":2193,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2192,"column":0},"generated":{"line":2194,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2193,"column":0},"generated":{"line":2195,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2194,"column":0},"generated":{"line":2196,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2195,"column":0},"generated":{"line":2197,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2196,"column":0},"generated":{"line":2198,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2197,"column":0},"generated":{"line":2199,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2198,"column":0},"generated":{"line":2200,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2199,"column":0},"generated":{"line":2201,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2200,"column":0},"generated":{"line":2202,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2201,"column":0},"generated":{"line":2203,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2202,"column":0},"generated":{"line":2204,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2203,"column":0},"generated":{"line":2205,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2204,"column":0},"generated":{"line":2206,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2205,"column":0},"generated":{"line":2207,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2206,"column":0},"generated":{"line":2208,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2207,"column":0},"generated":{"line":2209,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2208,"column":0},"generated":{"line":2210,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2209,"column":0},"generated":{"line":2211,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2210,"column":0},"generated":{"line":2212,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2211,"column":0},"generated":{"line":2213,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2212,"column":0},"generated":{"line":2214,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2213,"column":0},"generated":{"line":2215,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2214,"column":0},"generated":{"line":2216,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2215,"column":0},"generated":{"line":2217,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2216,"column":0},"generated":{"line":2218,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2217,"column":0},"generated":{"line":2219,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2218,"column":0},"generated":{"line":2220,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2219,"column":0},"generated":{"line":2221,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2220,"column":0},"generated":{"line":2222,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2221,"column":0},"generated":{"line":2223,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2222,"column":0},"generated":{"line":2224,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2223,"column":0},"generated":{"line":2225,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2224,"column":0},"generated":{"line":2226,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2225,"column":0},"generated":{"line":2227,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2226,"column":0},"generated":{"line":2228,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2227,"column":0},"generated":{"line":2229,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2228,"column":0},"generated":{"line":2230,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2229,"column":0},"generated":{"line":2231,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2230,"column":0},"generated":{"line":2232,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2231,"column":0},"generated":{"line":2233,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2232,"column":0},"generated":{"line":2234,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2233,"column":0},"generated":{"line":2235,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2234,"column":0},"generated":{"line":2236,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2235,"column":0},"generated":{"line":2237,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2236,"column":0},"generated":{"line":2238,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2237,"column":0},"generated":{"line":2239,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2238,"column":0},"generated":{"line":2240,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2239,"column":0},"generated":{"line":2241,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2240,"column":0},"generated":{"line":2242,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2241,"column":0},"generated":{"line":2243,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2242,"column":0},"generated":{"line":2244,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2243,"column":0},"generated":{"line":2245,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2244,"column":0},"generated":{"line":2246,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2245,"column":0},"generated":{"line":2247,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2246,"column":0},"generated":{"line":2248,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2247,"column":0},"generated":{"line":2249,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2248,"column":0},"generated":{"line":2250,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2249,"column":0},"generated":{"line":2251,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2250,"column":0},"generated":{"line":2252,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2251,"column":0},"generated":{"line":2253,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2252,"column":0},"generated":{"line":2254,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2253,"column":0},"generated":{"line":2255,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2254,"column":0},"generated":{"line":2256,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2255,"column":0},"generated":{"line":2257,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2256,"column":0},"generated":{"line":2258,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2257,"column":0},"generated":{"line":2259,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2258,"column":0},"generated":{"line":2260,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2259,"column":0},"generated":{"line":2261,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2260,"column":0},"generated":{"line":2262,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2261,"column":0},"generated":{"line":2263,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2262,"column":0},"generated":{"line":2264,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2263,"column":0},"generated":{"line":2265,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2264,"column":0},"generated":{"line":2266,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2265,"column":0},"generated":{"line":2267,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2266,"column":0},"generated":{"line":2268,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2267,"column":0},"generated":{"line":2269,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2268,"column":0},"generated":{"line":2270,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2269,"column":0},"generated":{"line":2271,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2270,"column":0},"generated":{"line":2272,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2271,"column":0},"generated":{"line":2273,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2272,"column":0},"generated":{"line":2274,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2273,"column":0},"generated":{"line":2275,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2274,"column":0},"generated":{"line":2276,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2275,"column":0},"generated":{"line":2277,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2276,"column":0},"generated":{"line":2278,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2277,"column":0},"generated":{"line":2279,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2278,"column":0},"generated":{"line":2280,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2279,"column":0},"generated":{"line":2281,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2280,"column":0},"generated":{"line":2282,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2281,"column":0},"generated":{"line":2283,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2282,"column":0},"generated":{"line":2284,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2283,"column":0},"generated":{"line":2285,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2284,"column":0},"generated":{"line":2286,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2285,"column":0},"generated":{"line":2287,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2286,"column":0},"generated":{"line":2288,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2287,"column":0},"generated":{"line":2289,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2288,"column":0},"generated":{"line":2290,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2289,"column":0},"generated":{"line":2291,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2290,"column":0},"generated":{"line":2292,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2291,"column":0},"generated":{"line":2293,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2292,"column":0},"generated":{"line":2294,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2293,"column":0},"generated":{"line":2295,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2294,"column":0},"generated":{"line":2296,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2295,"column":0},"generated":{"line":2297,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2296,"column":0},"generated":{"line":2298,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2297,"column":0},"generated":{"line":2299,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2298,"column":0},"generated":{"line":2300,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2299,"column":0},"generated":{"line":2301,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2300,"column":0},"generated":{"line":2302,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2301,"column":0},"generated":{"line":2303,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2302,"column":0},"generated":{"line":2304,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2303,"column":0},"generated":{"line":2305,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2304,"column":0},"generated":{"line":2306,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2305,"column":0},"generated":{"line":2307,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2306,"column":0},"generated":{"line":2308,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2307,"column":0},"generated":{"line":2309,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2308,"column":0},"generated":{"line":2310,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2309,"column":0},"generated":{"line":2311,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2310,"column":0},"generated":{"line":2312,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2311,"column":0},"generated":{"line":2313,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2312,"column":0},"generated":{"line":2314,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2313,"column":0},"generated":{"line":2315,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2314,"column":0},"generated":{"line":2316,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2315,"column":0},"generated":{"line":2317,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2316,"column":0},"generated":{"line":2318,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2317,"column":0},"generated":{"line":2319,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2318,"column":0},"generated":{"line":2320,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2319,"column":0},"generated":{"line":2321,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2320,"column":0},"generated":{"line":2322,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2321,"column":0},"generated":{"line":2323,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2322,"column":0},"generated":{"line":2324,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2323,"column":0},"generated":{"line":2325,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2324,"column":0},"generated":{"line":2326,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2325,"column":0},"generated":{"line":2327,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2326,"column":0},"generated":{"line":2328,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2327,"column":0},"generated":{"line":2329,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2328,"column":0},"generated":{"line":2330,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2329,"column":0},"generated":{"line":2331,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2330,"column":0},"generated":{"line":2332,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2331,"column":0},"generated":{"line":2333,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2332,"column":0},"generated":{"line":2334,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2333,"column":0},"generated":{"line":2335,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2334,"column":0},"generated":{"line":2336,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2335,"column":0},"generated":{"line":2337,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2336,"column":0},"generated":{"line":2338,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2337,"column":0},"generated":{"line":2339,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2338,"column":0},"generated":{"line":2340,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2339,"column":0},"generated":{"line":2341,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2340,"column":0},"generated":{"line":2342,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2341,"column":0},"generated":{"line":2343,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2342,"column":0},"generated":{"line":2344,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2343,"column":0},"generated":{"line":2345,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2344,"column":0},"generated":{"line":2346,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2345,"column":0},"generated":{"line":2347,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2346,"column":0},"generated":{"line":2348,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2347,"column":0},"generated":{"line":2349,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2348,"column":0},"generated":{"line":2350,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2349,"column":0},"generated":{"line":2351,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2350,"column":0},"generated":{"line":2352,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2351,"column":0},"generated":{"line":2353,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2352,"column":0},"generated":{"line":2354,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2353,"column":0},"generated":{"line":2355,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2354,"column":0},"generated":{"line":2356,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2355,"column":0},"generated":{"line":2357,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2356,"column":0},"generated":{"line":2358,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2357,"column":0},"generated":{"line":2359,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2358,"column":0},"generated":{"line":2360,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2359,"column":0},"generated":{"line":2361,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2360,"column":0},"generated":{"line":2362,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2361,"column":0},"generated":{"line":2363,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2362,"column":0},"generated":{"line":2364,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2363,"column":0},"generated":{"line":2365,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2364,"column":0},"generated":{"line":2366,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2365,"column":0},"generated":{"line":2367,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2366,"column":0},"generated":{"line":2368,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2367,"column":0},"generated":{"line":2369,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2368,"column":0},"generated":{"line":2370,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2369,"column":0},"generated":{"line":2371,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2370,"column":0},"generated":{"line":2372,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2371,"column":0},"generated":{"line":2373,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2372,"column":0},"generated":{"line":2374,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2373,"column":0},"generated":{"line":2375,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2374,"column":0},"generated":{"line":2376,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2375,"column":0},"generated":{"line":2377,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2376,"column":0},"generated":{"line":2378,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2377,"column":0},"generated":{"line":2379,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2378,"column":0},"generated":{"line":2380,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2379,"column":0},"generated":{"line":2381,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2380,"column":0},"generated":{"line":2382,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2381,"column":0},"generated":{"line":2383,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2382,"column":0},"generated":{"line":2384,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2383,"column":0},"generated":{"line":2385,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2384,"column":0},"generated":{"line":2386,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2385,"column":0},"generated":{"line":2387,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2386,"column":0},"generated":{"line":2388,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2387,"column":0},"generated":{"line":2389,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2388,"column":0},"generated":{"line":2390,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2389,"column":0},"generated":{"line":2391,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2390,"column":0},"generated":{"line":2392,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2391,"column":0},"generated":{"line":2393,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2392,"column":0},"generated":{"line":2394,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2393,"column":0},"generated":{"line":2395,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2394,"column":0},"generated":{"line":2396,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2395,"column":0},"generated":{"line":2397,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2396,"column":0},"generated":{"line":2398,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2397,"column":0},"generated":{"line":2399,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2398,"column":0},"generated":{"line":2400,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2399,"column":0},"generated":{"line":2401,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2400,"column":0},"generated":{"line":2402,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2401,"column":0},"generated":{"line":2403,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2402,"column":0},"generated":{"line":2404,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2403,"column":0},"generated":{"line":2405,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2404,"column":0},"generated":{"line":2406,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2405,"column":0},"generated":{"line":2407,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2406,"column":0},"generated":{"line":2408,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2407,"column":0},"generated":{"line":2409,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2408,"column":0},"generated":{"line":2410,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2409,"column":0},"generated":{"line":2411,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2410,"column":0},"generated":{"line":2412,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2411,"column":0},"generated":{"line":2413,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2412,"column":0},"generated":{"line":2414,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2413,"column":0},"generated":{"line":2415,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2414,"column":0},"generated":{"line":2416,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2415,"column":0},"generated":{"line":2417,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2416,"column":0},"generated":{"line":2418,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2417,"column":0},"generated":{"line":2419,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2418,"column":0},"generated":{"line":2420,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2419,"column":0},"generated":{"line":2421,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2420,"column":0},"generated":{"line":2422,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2421,"column":0},"generated":{"line":2423,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2422,"column":0},"generated":{"line":2424,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2423,"column":0},"generated":{"line":2425,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2424,"column":0},"generated":{"line":2426,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2425,"column":0},"generated":{"line":2427,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2426,"column":0},"generated":{"line":2428,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2427,"column":0},"generated":{"line":2429,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2428,"column":0},"generated":{"line":2430,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2429,"column":0},"generated":{"line":2431,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2430,"column":0},"generated":{"line":2432,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2431,"column":0},"generated":{"line":2433,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2432,"column":0},"generated":{"line":2434,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2433,"column":0},"generated":{"line":2435,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2434,"column":0},"generated":{"line":2436,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2435,"column":0},"generated":{"line":2437,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2436,"column":0},"generated":{"line":2438,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2437,"column":0},"generated":{"line":2439,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2438,"column":0},"generated":{"line":2440,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2439,"column":0},"generated":{"line":2441,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2440,"column":0},"generated":{"line":2442,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2441,"column":0},"generated":{"line":2443,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2442,"column":0},"generated":{"line":2444,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2443,"column":0},"generated":{"line":2445,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2444,"column":0},"generated":{"line":2446,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2445,"column":0},"generated":{"line":2447,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2446,"column":0},"generated":{"line":2448,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2447,"column":0},"generated":{"line":2449,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2448,"column":0},"generated":{"line":2450,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2449,"column":0},"generated":{"line":2451,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2450,"column":0},"generated":{"line":2452,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2451,"column":0},"generated":{"line":2453,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2452,"column":0},"generated":{"line":2454,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2453,"column":0},"generated":{"line":2455,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2454,"column":0},"generated":{"line":2456,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2455,"column":0},"generated":{"line":2457,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2456,"column":0},"generated":{"line":2458,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2457,"column":0},"generated":{"line":2459,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2458,"column":0},"generated":{"line":2460,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2459,"column":0},"generated":{"line":2461,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2460,"column":0},"generated":{"line":2462,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2461,"column":0},"generated":{"line":2463,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2462,"column":0},"generated":{"line":2464,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2463,"column":0},"generated":{"line":2465,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2464,"column":0},"generated":{"line":2466,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2465,"column":0},"generated":{"line":2467,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2466,"column":0},"generated":{"line":2468,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2467,"column":0},"generated":{"line":2469,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2468,"column":0},"generated":{"line":2470,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2469,"column":0},"generated":{"line":2471,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2470,"column":0},"generated":{"line":2472,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2471,"column":0},"generated":{"line":2473,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2472,"column":0},"generated":{"line":2474,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2473,"column":0},"generated":{"line":2475,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2474,"column":0},"generated":{"line":2476,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2475,"column":0},"generated":{"line":2477,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2476,"column":0},"generated":{"line":2478,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2477,"column":0},"generated":{"line":2479,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2478,"column":0},"generated":{"line":2480,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2479,"column":0},"generated":{"line":2481,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2480,"column":0},"generated":{"line":2482,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2481,"column":0},"generated":{"line":2483,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2482,"column":0},"generated":{"line":2484,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2483,"column":0},"generated":{"line":2485,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2484,"column":0},"generated":{"line":2486,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2485,"column":0},"generated":{"line":2487,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2486,"column":0},"generated":{"line":2488,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2487,"column":0},"generated":{"line":2489,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2488,"column":0},"generated":{"line":2490,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2489,"column":0},"generated":{"line":2491,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2490,"column":0},"generated":{"line":2492,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2491,"column":0},"generated":{"line":2493,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2492,"column":0},"generated":{"line":2494,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2493,"column":0},"generated":{"line":2495,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2494,"column":0},"generated":{"line":2496,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2495,"column":0},"generated":{"line":2497,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2496,"column":0},"generated":{"line":2498,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2497,"column":0},"generated":{"line":2499,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2498,"column":0},"generated":{"line":2500,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2499,"column":0},"generated":{"line":2501,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2500,"column":0},"generated":{"line":2502,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2501,"column":0},"generated":{"line":2503,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2502,"column":0},"generated":{"line":2504,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2503,"column":0},"generated":{"line":2505,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2504,"column":0},"generated":{"line":2506,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2505,"column":0},"generated":{"line":2507,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2506,"column":0},"generated":{"line":2508,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2507,"column":0},"generated":{"line":2509,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2508,"column":0},"generated":{"line":2510,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2509,"column":0},"generated":{"line":2511,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2510,"column":0},"generated":{"line":2512,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2511,"column":0},"generated":{"line":2513,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2512,"column":0},"generated":{"line":2514,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2513,"column":0},"generated":{"line":2515,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2514,"column":0},"generated":{"line":2516,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2515,"column":0},"generated":{"line":2517,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2516,"column":0},"generated":{"line":2518,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2517,"column":0},"generated":{"line":2519,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2518,"column":0},"generated":{"line":2520,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2519,"column":0},"generated":{"line":2521,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2520,"column":0},"generated":{"line":2522,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2521,"column":0},"generated":{"line":2523,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2522,"column":0},"generated":{"line":2524,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2523,"column":0},"generated":{"line":2525,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2524,"column":0},"generated":{"line":2526,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2525,"column":0},"generated":{"line":2527,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2526,"column":0},"generated":{"line":2528,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2527,"column":0},"generated":{"line":2529,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2528,"column":0},"generated":{"line":2530,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2529,"column":0},"generated":{"line":2531,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2530,"column":0},"generated":{"line":2532,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2531,"column":0},"generated":{"line":2533,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2532,"column":0},"generated":{"line":2534,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2533,"column":0},"generated":{"line":2535,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2534,"column":0},"generated":{"line":2536,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2535,"column":0},"generated":{"line":2537,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2536,"column":0},"generated":{"line":2538,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2537,"column":0},"generated":{"line":2539,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2538,"column":0},"generated":{"line":2540,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2539,"column":0},"generated":{"line":2541,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2540,"column":0},"generated":{"line":2542,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2541,"column":0},"generated":{"line":2543,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2542,"column":0},"generated":{"line":2544,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2543,"column":0},"generated":{"line":2545,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2544,"column":0},"generated":{"line":2546,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2545,"column":0},"generated":{"line":2547,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2546,"column":0},"generated":{"line":2548,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2547,"column":0},"generated":{"line":2549,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2548,"column":0},"generated":{"line":2550,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2549,"column":0},"generated":{"line":2551,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2550,"column":0},"generated":{"line":2552,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2551,"column":0},"generated":{"line":2553,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2552,"column":0},"generated":{"line":2554,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2553,"column":0},"generated":{"line":2555,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2554,"column":0},"generated":{"line":2556,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2555,"column":0},"generated":{"line":2557,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2556,"column":0},"generated":{"line":2558,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2557,"column":0},"generated":{"line":2559,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2558,"column":0},"generated":{"line":2560,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2559,"column":0},"generated":{"line":2561,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2560,"column":0},"generated":{"line":2562,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2561,"column":0},"generated":{"line":2563,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2562,"column":0},"generated":{"line":2564,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2563,"column":0},"generated":{"line":2565,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2564,"column":0},"generated":{"line":2566,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2565,"column":0},"generated":{"line":2567,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2566,"column":0},"generated":{"line":2568,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2567,"column":0},"generated":{"line":2569,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2568,"column":0},"generated":{"line":2570,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2569,"column":0},"generated":{"line":2571,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2570,"column":0},"generated":{"line":2572,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2571,"column":0},"generated":{"line":2573,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2572,"column":0},"generated":{"line":2574,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2573,"column":0},"generated":{"line":2575,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2574,"column":0},"generated":{"line":2576,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2575,"column":0},"generated":{"line":2577,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2576,"column":0},"generated":{"line":2578,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2577,"column":0},"generated":{"line":2579,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2578,"column":0},"generated":{"line":2580,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2579,"column":0},"generated":{"line":2581,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2580,"column":0},"generated":{"line":2582,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2581,"column":0},"generated":{"line":2583,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2582,"column":0},"generated":{"line":2584,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2583,"column":0},"generated":{"line":2585,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2584,"column":0},"generated":{"line":2586,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2585,"column":0},"generated":{"line":2587,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2586,"column":0},"generated":{"line":2588,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2587,"column":0},"generated":{"line":2589,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2588,"column":0},"generated":{"line":2590,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2589,"column":0},"generated":{"line":2591,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2590,"column":0},"generated":{"line":2592,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2591,"column":0},"generated":{"line":2593,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2592,"column":0},"generated":{"line":2594,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2593,"column":0},"generated":{"line":2595,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2594,"column":0},"generated":{"line":2596,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2595,"column":0},"generated":{"line":2597,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2596,"column":0},"generated":{"line":2598,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2597,"column":0},"generated":{"line":2599,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2598,"column":0},"generated":{"line":2600,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2599,"column":0},"generated":{"line":2601,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2600,"column":0},"generated":{"line":2602,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2601,"column":0},"generated":{"line":2603,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2602,"column":0},"generated":{"line":2604,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2603,"column":0},"generated":{"line":2605,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2604,"column":0},"generated":{"line":2606,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2605,"column":0},"generated":{"line":2607,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2606,"column":0},"generated":{"line":2608,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2607,"column":0},"generated":{"line":2609,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2608,"column":0},"generated":{"line":2610,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2609,"column":0},"generated":{"line":2611,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2610,"column":0},"generated":{"line":2612,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2611,"column":0},"generated":{"line":2613,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2612,"column":0},"generated":{"line":2614,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2613,"column":0},"generated":{"line":2615,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2614,"column":0},"generated":{"line":2616,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2615,"column":0},"generated":{"line":2617,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2616,"column":0},"generated":{"line":2618,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2617,"column":0},"generated":{"line":2619,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2618,"column":0},"generated":{"line":2620,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2619,"column":0},"generated":{"line":2621,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2620,"column":0},"generated":{"line":2622,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2621,"column":0},"generated":{"line":2623,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2622,"column":0},"generated":{"line":2624,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2623,"column":0},"generated":{"line":2625,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2624,"column":0},"generated":{"line":2626,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2625,"column":0},"generated":{"line":2627,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2626,"column":0},"generated":{"line":2628,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2627,"column":0},"generated":{"line":2629,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2628,"column":0},"generated":{"line":2630,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2629,"column":0},"generated":{"line":2631,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2630,"column":0},"generated":{"line":2632,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2631,"column":0},"generated":{"line":2633,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2632,"column":0},"generated":{"line":2634,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2633,"column":0},"generated":{"line":2635,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2634,"column":0},"generated":{"line":2636,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2635,"column":0},"generated":{"line":2637,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2636,"column":0},"generated":{"line":2638,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2637,"column":0},"generated":{"line":2639,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2638,"column":0},"generated":{"line":2640,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2639,"column":0},"generated":{"line":2641,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2640,"column":0},"generated":{"line":2642,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2641,"column":0},"generated":{"line":2643,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2642,"column":0},"generated":{"line":2644,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2643,"column":0},"generated":{"line":2645,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2644,"column":0},"generated":{"line":2646,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2645,"column":0},"generated":{"line":2647,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2646,"column":0},"generated":{"line":2648,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2647,"column":0},"generated":{"line":2649,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2648,"column":0},"generated":{"line":2650,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2649,"column":0},"generated":{"line":2651,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2650,"column":0},"generated":{"line":2652,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2651,"column":0},"generated":{"line":2653,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2652,"column":0},"generated":{"line":2654,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2653,"column":0},"generated":{"line":2655,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2654,"column":0},"generated":{"line":2656,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2655,"column":0},"generated":{"line":2657,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2656,"column":0},"generated":{"line":2658,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2657,"column":0},"generated":{"line":2659,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2658,"column":0},"generated":{"line":2660,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2659,"column":0},"generated":{"line":2661,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2660,"column":0},"generated":{"line":2662,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2661,"column":0},"generated":{"line":2663,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2662,"column":0},"generated":{"line":2664,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2663,"column":0},"generated":{"line":2665,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2664,"column":0},"generated":{"line":2666,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2665,"column":0},"generated":{"line":2667,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2666,"column":0},"generated":{"line":2668,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2667,"column":0},"generated":{"line":2669,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2668,"column":0},"generated":{"line":2670,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2669,"column":0},"generated":{"line":2671,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2670,"column":0},"generated":{"line":2672,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2671,"column":0},"generated":{"line":2673,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2672,"column":0},"generated":{"line":2674,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2673,"column":0},"generated":{"line":2675,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2674,"column":0},"generated":{"line":2676,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2675,"column":0},"generated":{"line":2677,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2676,"column":0},"generated":{"line":2678,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2677,"column":0},"generated":{"line":2679,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2678,"column":0},"generated":{"line":2680,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2679,"column":0},"generated":{"line":2681,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2680,"column":0},"generated":{"line":2682,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2681,"column":0},"generated":{"line":2683,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2682,"column":0},"generated":{"line":2684,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2683,"column":0},"generated":{"line":2685,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2684,"column":0},"generated":{"line":2686,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2685,"column":0},"generated":{"line":2687,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2686,"column":0},"generated":{"line":2688,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2687,"column":0},"generated":{"line":2689,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2688,"column":0},"generated":{"line":2690,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2689,"column":0},"generated":{"line":2691,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2690,"column":0},"generated":{"line":2692,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2691,"column":0},"generated":{"line":2693,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2692,"column":0},"generated":{"line":2694,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2693,"column":0},"generated":{"line":2695,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2694,"column":0},"generated":{"line":2696,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2695,"column":0},"generated":{"line":2697,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2696,"column":0},"generated":{"line":2698,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2697,"column":0},"generated":{"line":2699,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2698,"column":0},"generated":{"line":2700,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2699,"column":0},"generated":{"line":2701,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2700,"column":0},"generated":{"line":2702,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2701,"column":0},"generated":{"line":2703,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2702,"column":0},"generated":{"line":2704,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2703,"column":0},"generated":{"line":2705,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2704,"column":0},"generated":{"line":2706,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2705,"column":0},"generated":{"line":2707,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2706,"column":0},"generated":{"line":2708,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2707,"column":0},"generated":{"line":2709,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2708,"column":0},"generated":{"line":2710,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2709,"column":0},"generated":{"line":2711,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2710,"column":0},"generated":{"line":2712,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2711,"column":0},"generated":{"line":2713,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2712,"column":0},"generated":{"line":2714,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2713,"column":0},"generated":{"line":2715,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2714,"column":0},"generated":{"line":2716,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2715,"column":0},"generated":{"line":2717,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2716,"column":0},"generated":{"line":2718,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2717,"column":0},"generated":{"line":2719,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2718,"column":0},"generated":{"line":2720,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2719,"column":0},"generated":{"line":2721,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2720,"column":0},"generated":{"line":2722,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2721,"column":0},"generated":{"line":2723,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2722,"column":0},"generated":{"line":2724,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2723,"column":0},"generated":{"line":2725,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2724,"column":0},"generated":{"line":2726,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2725,"column":0},"generated":{"line":2727,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2726,"column":0},"generated":{"line":2728,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2727,"column":0},"generated":{"line":2729,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2728,"column":0},"generated":{"line":2730,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2729,"column":0},"generated":{"line":2731,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2730,"column":0},"generated":{"line":2732,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2731,"column":0},"generated":{"line":2733,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2732,"column":0},"generated":{"line":2734,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2733,"column":0},"generated":{"line":2735,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2734,"column":0},"generated":{"line":2736,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2735,"column":0},"generated":{"line":2737,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2736,"column":0},"generated":{"line":2738,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2737,"column":0},"generated":{"line":2739,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2738,"column":0},"generated":{"line":2740,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2739,"column":0},"generated":{"line":2741,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2740,"column":0},"generated":{"line":2742,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2741,"column":0},"generated":{"line":2743,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2742,"column":0},"generated":{"line":2744,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2743,"column":0},"generated":{"line":2745,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2744,"column":0},"generated":{"line":2746,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2745,"column":0},"generated":{"line":2747,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2746,"column":0},"generated":{"line":2748,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2747,"column":0},"generated":{"line":2749,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2748,"column":0},"generated":{"line":2750,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2749,"column":0},"generated":{"line":2751,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2750,"column":0},"generated":{"line":2752,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2751,"column":0},"generated":{"line":2753,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2752,"column":0},"generated":{"line":2754,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2753,"column":0},"generated":{"line":2755,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2754,"column":0},"generated":{"line":2756,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2755,"column":0},"generated":{"line":2757,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2756,"column":0},"generated":{"line":2758,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2757,"column":0},"generated":{"line":2759,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2758,"column":0},"generated":{"line":2760,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2759,"column":0},"generated":{"line":2761,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2760,"column":0},"generated":{"line":2762,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2761,"column":0},"generated":{"line":2763,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2762,"column":0},"generated":{"line":2764,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2763,"column":0},"generated":{"line":2765,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2764,"column":0},"generated":{"line":2766,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2765,"column":0},"generated":{"line":2767,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2766,"column":0},"generated":{"line":2768,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2767,"column":0},"generated":{"line":2769,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2768,"column":0},"generated":{"line":2770,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2769,"column":0},"generated":{"line":2771,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2770,"column":0},"generated":{"line":2772,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2771,"column":0},"generated":{"line":2773,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2772,"column":0},"generated":{"line":2774,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2773,"column":0},"generated":{"line":2775,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2774,"column":0},"generated":{"line":2776,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2775,"column":0},"generated":{"line":2777,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2776,"column":0},"generated":{"line":2778,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2777,"column":0},"generated":{"line":2779,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2778,"column":0},"generated":{"line":2780,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2779,"column":0},"generated":{"line":2781,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2780,"column":0},"generated":{"line":2782,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2781,"column":0},"generated":{"line":2783,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2782,"column":0},"generated":{"line":2784,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2783,"column":0},"generated":{"line":2785,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2784,"column":0},"generated":{"line":2786,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2785,"column":0},"generated":{"line":2787,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2786,"column":0},"generated":{"line":2788,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2787,"column":0},"generated":{"line":2789,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2788,"column":0},"generated":{"line":2790,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2789,"column":0},"generated":{"line":2791,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2790,"column":0},"generated":{"line":2792,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2791,"column":0},"generated":{"line":2793,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2792,"column":0},"generated":{"line":2794,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2793,"column":0},"generated":{"line":2795,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2794,"column":0},"generated":{"line":2796,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2795,"column":0},"generated":{"line":2797,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2796,"column":0},"generated":{"line":2798,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2797,"column":0},"generated":{"line":2799,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2798,"column":0},"generated":{"line":2800,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2799,"column":0},"generated":{"line":2801,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2800,"column":0},"generated":{"line":2802,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2801,"column":0},"generated":{"line":2803,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2802,"column":0},"generated":{"line":2804,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2803,"column":0},"generated":{"line":2805,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2804,"column":0},"generated":{"line":2806,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2805,"column":0},"generated":{"line":2807,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2806,"column":0},"generated":{"line":2808,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2807,"column":0},"generated":{"line":2809,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2808,"column":0},"generated":{"line":2810,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2809,"column":0},"generated":{"line":2811,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2810,"column":0},"generated":{"line":2812,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2811,"column":0},"generated":{"line":2813,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2812,"column":0},"generated":{"line":2814,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2813,"column":0},"generated":{"line":2815,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2814,"column":0},"generated":{"line":2816,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2815,"column":0},"generated":{"line":2817,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2816,"column":0},"generated":{"line":2818,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2817,"column":0},"generated":{"line":2819,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2818,"column":0},"generated":{"line":2820,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2819,"column":0},"generated":{"line":2821,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2820,"column":0},"generated":{"line":2822,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2821,"column":0},"generated":{"line":2823,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2822,"column":0},"generated":{"line":2824,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2823,"column":0},"generated":{"line":2825,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2824,"column":0},"generated":{"line":2826,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2825,"column":0},"generated":{"line":2827,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2826,"column":0},"generated":{"line":2828,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2827,"column":0},"generated":{"line":2829,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2828,"column":0},"generated":{"line":2830,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2829,"column":0},"generated":{"line":2831,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2830,"column":0},"generated":{"line":2832,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2831,"column":0},"generated":{"line":2833,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2832,"column":0},"generated":{"line":2834,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2833,"column":0},"generated":{"line":2835,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2834,"column":0},"generated":{"line":2836,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2835,"column":0},"generated":{"line":2837,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2836,"column":0},"generated":{"line":2838,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2837,"column":0},"generated":{"line":2839,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2838,"column":0},"generated":{"line":2840,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2839,"column":0},"generated":{"line":2841,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2840,"column":0},"generated":{"line":2842,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2841,"column":0},"generated":{"line":2843,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2842,"column":0},"generated":{"line":2844,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2843,"column":0},"generated":{"line":2845,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2844,"column":0},"generated":{"line":2846,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2845,"column":0},"generated":{"line":2847,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2846,"column":0},"generated":{"line":2848,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2847,"column":0},"generated":{"line":2849,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2848,"column":0},"generated":{"line":2850,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2849,"column":0},"generated":{"line":2851,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2850,"column":0},"generated":{"line":2852,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2851,"column":0},"generated":{"line":2853,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2852,"column":0},"generated":{"line":2854,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2853,"column":0},"generated":{"line":2855,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2854,"column":0},"generated":{"line":2856,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2855,"column":0},"generated":{"line":2857,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2856,"column":0},"generated":{"line":2858,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2857,"column":0},"generated":{"line":2859,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2858,"column":0},"generated":{"line":2860,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2859,"column":0},"generated":{"line":2861,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2860,"column":0},"generated":{"line":2862,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2861,"column":0},"generated":{"line":2863,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2862,"column":0},"generated":{"line":2864,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2863,"column":0},"generated":{"line":2865,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2864,"column":0},"generated":{"line":2866,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2865,"column":0},"generated":{"line":2867,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2866,"column":0},"generated":{"line":2868,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2867,"column":0},"generated":{"line":2869,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2868,"column":0},"generated":{"line":2870,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2869,"column":0},"generated":{"line":2871,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2870,"column":0},"generated":{"line":2872,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2871,"column":0},"generated":{"line":2873,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2872,"column":0},"generated":{"line":2874,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2873,"column":0},"generated":{"line":2875,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2874,"column":0},"generated":{"line":2876,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2875,"column":0},"generated":{"line":2877,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2876,"column":0},"generated":{"line":2878,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2877,"column":0},"generated":{"line":2879,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2878,"column":0},"generated":{"line":2880,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2879,"column":0},"generated":{"line":2881,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2880,"column":0},"generated":{"line":2882,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2881,"column":0},"generated":{"line":2883,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2882,"column":0},"generated":{"line":2884,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2883,"column":0},"generated":{"line":2885,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2884,"column":0},"generated":{"line":2886,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2885,"column":0},"generated":{"line":2887,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2886,"column":0},"generated":{"line":2888,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2887,"column":0},"generated":{"line":2889,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2888,"column":0},"generated":{"line":2890,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2889,"column":0},"generated":{"line":2891,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2890,"column":0},"generated":{"line":2892,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2891,"column":0},"generated":{"line":2893,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2892,"column":0},"generated":{"line":2894,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2893,"column":0},"generated":{"line":2895,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2894,"column":0},"generated":{"line":2896,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2895,"column":0},"generated":{"line":2897,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2896,"column":0},"generated":{"line":2898,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2897,"column":0},"generated":{"line":2899,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2898,"column":0},"generated":{"line":2900,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2899,"column":0},"generated":{"line":2901,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2900,"column":0},"generated":{"line":2902,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2901,"column":0},"generated":{"line":2903,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2902,"column":0},"generated":{"line":2904,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2903,"column":0},"generated":{"line":2905,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2904,"column":0},"generated":{"line":2906,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2905,"column":0},"generated":{"line":2907,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2906,"column":0},"generated":{"line":2908,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2907,"column":0},"generated":{"line":2909,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2908,"column":0},"generated":{"line":2910,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2909,"column":0},"generated":{"line":2911,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2910,"column":0},"generated":{"line":2912,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2911,"column":0},"generated":{"line":2913,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2912,"column":0},"generated":{"line":2914,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2913,"column":0},"generated":{"line":2915,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2914,"column":0},"generated":{"line":2916,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2915,"column":0},"generated":{"line":2917,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2916,"column":0},"generated":{"line":2918,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2917,"column":0},"generated":{"line":2919,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2918,"column":0},"generated":{"line":2920,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2919,"column":0},"generated":{"line":2921,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2920,"column":0},"generated":{"line":2922,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2921,"column":0},"generated":{"line":2923,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2922,"column":0},"generated":{"line":2924,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2923,"column":0},"generated":{"line":2925,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2924,"column":0},"generated":{"line":2926,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2925,"column":0},"generated":{"line":2927,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2926,"column":0},"generated":{"line":2928,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2927,"column":0},"generated":{"line":2929,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2928,"column":0},"generated":{"line":2930,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2929,"column":0},"generated":{"line":2931,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2930,"column":0},"generated":{"line":2932,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2931,"column":0},"generated":{"line":2933,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2932,"column":0},"generated":{"line":2934,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2933,"column":0},"generated":{"line":2935,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2934,"column":0},"generated":{"line":2936,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2935,"column":0},"generated":{"line":2937,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2936,"column":0},"generated":{"line":2938,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2937,"column":0},"generated":{"line":2939,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2938,"column":0},"generated":{"line":2940,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2939,"column":0},"generated":{"line":2941,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2940,"column":0},"generated":{"line":2942,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2941,"column":0},"generated":{"line":2943,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2942,"column":0},"generated":{"line":2944,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2943,"column":0},"generated":{"line":2945,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2944,"column":0},"generated":{"line":2946,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2945,"column":0},"generated":{"line":2947,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2946,"column":0},"generated":{"line":2948,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2947,"column":0},"generated":{"line":2949,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2948,"column":0},"generated":{"line":2950,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2949,"column":0},"generated":{"line":2951,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2950,"column":0},"generated":{"line":2952,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2951,"column":0},"generated":{"line":2953,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2952,"column":0},"generated":{"line":2954,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2953,"column":0},"generated":{"line":2955,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2954,"column":0},"generated":{"line":2956,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2955,"column":0},"generated":{"line":2957,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2956,"column":0},"generated":{"line":2958,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2957,"column":0},"generated":{"line":2959,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2958,"column":0},"generated":{"line":2960,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2959,"column":0},"generated":{"line":2961,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2960,"column":0},"generated":{"line":2962,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2961,"column":0},"generated":{"line":2963,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2962,"column":0},"generated":{"line":2964,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2963,"column":0},"generated":{"line":2965,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2964,"column":0},"generated":{"line":2966,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2965,"column":0},"generated":{"line":2967,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2966,"column":0},"generated":{"line":2968,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2967,"column":0},"generated":{"line":2969,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2968,"column":0},"generated":{"line":2970,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2969,"column":0},"generated":{"line":2971,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2970,"column":0},"generated":{"line":2972,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2971,"column":0},"generated":{"line":2973,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2972,"column":0},"generated":{"line":2974,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2973,"column":0},"generated":{"line":2975,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2974,"column":0},"generated":{"line":2976,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2975,"column":0},"generated":{"line":2977,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2976,"column":0},"generated":{"line":2978,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2977,"column":0},"generated":{"line":2979,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2978,"column":0},"generated":{"line":2980,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2979,"column":0},"generated":{"line":2981,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2980,"column":0},"generated":{"line":2982,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2981,"column":0},"generated":{"line":2983,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2982,"column":0},"generated":{"line":2984,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2983,"column":0},"generated":{"line":2985,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2984,"column":0},"generated":{"line":2986,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2985,"column":0},"generated":{"line":2987,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2986,"column":0},"generated":{"line":2988,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2987,"column":0},"generated":{"line":2989,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2988,"column":0},"generated":{"line":2990,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2989,"column":0},"generated":{"line":2991,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2990,"column":0},"generated":{"line":2992,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2991,"column":0},"generated":{"line":2993,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2992,"column":0},"generated":{"line":2994,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2993,"column":0},"generated":{"line":2995,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2994,"column":0},"generated":{"line":2996,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2995,"column":0},"generated":{"line":2997,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2996,"column":0},"generated":{"line":2998,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2997,"column":0},"generated":{"line":2999,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2998,"column":0},"generated":{"line":3000,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":2999,"column":0},"generated":{"line":3001,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3000,"column":0},"generated":{"line":3002,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3001,"column":0},"generated":{"line":3003,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3002,"column":0},"generated":{"line":3004,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3003,"column":0},"generated":{"line":3005,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3004,"column":0},"generated":{"line":3006,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3005,"column":0},"generated":{"line":3007,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3006,"column":0},"generated":{"line":3008,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3007,"column":0},"generated":{"line":3009,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3008,"column":0},"generated":{"line":3010,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3009,"column":0},"generated":{"line":3011,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3010,"column":0},"generated":{"line":3012,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3011,"column":0},"generated":{"line":3013,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3012,"column":0},"generated":{"line":3014,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3013,"column":0},"generated":{"line":3015,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3014,"column":0},"generated":{"line":3016,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3015,"column":0},"generated":{"line":3017,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3016,"column":0},"generated":{"line":3018,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3017,"column":0},"generated":{"line":3019,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3018,"column":0},"generated":{"line":3020,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3019,"column":0},"generated":{"line":3021,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3020,"column":0},"generated":{"line":3022,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3021,"column":0},"generated":{"line":3023,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3022,"column":0},"generated":{"line":3024,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3023,"column":0},"generated":{"line":3025,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3024,"column":0},"generated":{"line":3026,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3025,"column":0},"generated":{"line":3027,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3026,"column":0},"generated":{"line":3028,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3027,"column":0},"generated":{"line":3029,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3028,"column":0},"generated":{"line":3030,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3029,"column":0},"generated":{"line":3031,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3030,"column":0},"generated":{"line":3032,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3031,"column":0},"generated":{"line":3033,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3032,"column":0},"generated":{"line":3034,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3033,"column":0},"generated":{"line":3035,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3034,"column":0},"generated":{"line":3036,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3035,"column":0},"generated":{"line":3037,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3036,"column":0},"generated":{"line":3038,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3037,"column":0},"generated":{"line":3039,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3038,"column":0},"generated":{"line":3040,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3039,"column":0},"generated":{"line":3041,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3040,"column":0},"generated":{"line":3042,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3041,"column":0},"generated":{"line":3043,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3042,"column":0},"generated":{"line":3044,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3043,"column":0},"generated":{"line":3045,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3044,"column":0},"generated":{"line":3046,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3045,"column":0},"generated":{"line":3047,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3046,"column":0},"generated":{"line":3048,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3047,"column":0},"generated":{"line":3049,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3048,"column":0},"generated":{"line":3050,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3049,"column":0},"generated":{"line":3051,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3050,"column":0},"generated":{"line":3052,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3051,"column":0},"generated":{"line":3053,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3052,"column":0},"generated":{"line":3054,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3053,"column":0},"generated":{"line":3055,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3054,"column":0},"generated":{"line":3056,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3055,"column":0},"generated":{"line":3057,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3056,"column":0},"generated":{"line":3058,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3057,"column":0},"generated":{"line":3059,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3058,"column":0},"generated":{"line":3060,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3059,"column":0},"generated":{"line":3061,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3060,"column":0},"generated":{"line":3062,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3061,"column":0},"generated":{"line":3063,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3062,"column":0},"generated":{"line":3064,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3063,"column":0},"generated":{"line":3065,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3064,"column":0},"generated":{"line":3066,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3065,"column":0},"generated":{"line":3067,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3066,"column":0},"generated":{"line":3068,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3067,"column":0},"generated":{"line":3069,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3068,"column":0},"generated":{"line":3070,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3069,"column":0},"generated":{"line":3071,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3070,"column":0},"generated":{"line":3072,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3071,"column":0},"generated":{"line":3073,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3072,"column":0},"generated":{"line":3074,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3073,"column":0},"generated":{"line":3075,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3074,"column":0},"generated":{"line":3076,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3075,"column":0},"generated":{"line":3077,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3076,"column":0},"generated":{"line":3078,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3077,"column":0},"generated":{"line":3079,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3078,"column":0},"generated":{"line":3080,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3079,"column":0},"generated":{"line":3081,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3080,"column":0},"generated":{"line":3082,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3081,"column":0},"generated":{"line":3083,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3082,"column":0},"generated":{"line":3084,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3083,"column":0},"generated":{"line":3085,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3084,"column":0},"generated":{"line":3086,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3085,"column":0},"generated":{"line":3087,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3086,"column":0},"generated":{"line":3088,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3087,"column":0},"generated":{"line":3089,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3088,"column":0},"generated":{"line":3090,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3089,"column":0},"generated":{"line":3091,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3090,"column":0},"generated":{"line":3092,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3091,"column":0},"generated":{"line":3093,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3092,"column":0},"generated":{"line":3094,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3093,"column":0},"generated":{"line":3095,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3094,"column":0},"generated":{"line":3096,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3095,"column":0},"generated":{"line":3097,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3096,"column":0},"generated":{"line":3098,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3097,"column":0},"generated":{"line":3099,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3098,"column":0},"generated":{"line":3100,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3099,"column":0},"generated":{"line":3101,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3100,"column":0},"generated":{"line":3102,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3101,"column":0},"generated":{"line":3103,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3102,"column":0},"generated":{"line":3104,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3103,"column":0},"generated":{"line":3105,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3104,"column":0},"generated":{"line":3106,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3105,"column":0},"generated":{"line":3107,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3106,"column":0},"generated":{"line":3108,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3107,"column":0},"generated":{"line":3109,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3108,"column":0},"generated":{"line":3110,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3109,"column":0},"generated":{"line":3111,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3110,"column":0},"generated":{"line":3112,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3111,"column":0},"generated":{"line":3113,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3112,"column":0},"generated":{"line":3114,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3113,"column":0},"generated":{"line":3115,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3114,"column":0},"generated":{"line":3116,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3115,"column":0},"generated":{"line":3117,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3116,"column":0},"generated":{"line":3118,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3117,"column":0},"generated":{"line":3119,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3118,"column":0},"generated":{"line":3120,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3119,"column":0},"generated":{"line":3121,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3120,"column":0},"generated":{"line":3122,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3121,"column":0},"generated":{"line":3123,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3122,"column":0},"generated":{"line":3124,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3123,"column":0},"generated":{"line":3125,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3124,"column":0},"generated":{"line":3126,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3125,"column":0},"generated":{"line":3127,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3126,"column":0},"generated":{"line":3128,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3127,"column":0},"generated":{"line":3129,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3128,"column":0},"generated":{"line":3130,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3129,"column":0},"generated":{"line":3131,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3130,"column":0},"generated":{"line":3132,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3131,"column":0},"generated":{"line":3133,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3132,"column":0},"generated":{"line":3134,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3133,"column":0},"generated":{"line":3135,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3134,"column":0},"generated":{"line":3136,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3135,"column":0},"generated":{"line":3137,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3136,"column":0},"generated":{"line":3138,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3137,"column":0},"generated":{"line":3139,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3138,"column":0},"generated":{"line":3140,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3139,"column":0},"generated":{"line":3141,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3140,"column":0},"generated":{"line":3142,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3141,"column":0},"generated":{"line":3143,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3142,"column":0},"generated":{"line":3144,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3143,"column":0},"generated":{"line":3145,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3144,"column":0},"generated":{"line":3146,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3145,"column":0},"generated":{"line":3147,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3146,"column":0},"generated":{"line":3148,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3147,"column":0},"generated":{"line":3149,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3148,"column":0},"generated":{"line":3150,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3149,"column":0},"generated":{"line":3151,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3150,"column":0},"generated":{"line":3152,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3151,"column":0},"generated":{"line":3153,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3152,"column":0},"generated":{"line":3154,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3153,"column":0},"generated":{"line":3155,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3154,"column":0},"generated":{"line":3156,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3155,"column":0},"generated":{"line":3157,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3156,"column":0},"generated":{"line":3158,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3157,"column":0},"generated":{"line":3159,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3158,"column":0},"generated":{"line":3160,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3159,"column":0},"generated":{"line":3161,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3160,"column":0},"generated":{"line":3162,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3161,"column":0},"generated":{"line":3163,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3162,"column":0},"generated":{"line":3164,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3163,"column":0},"generated":{"line":3165,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3164,"column":0},"generated":{"line":3166,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3165,"column":0},"generated":{"line":3167,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3166,"column":0},"generated":{"line":3168,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3167,"column":0},"generated":{"line":3169,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3168,"column":0},"generated":{"line":3170,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3169,"column":0},"generated":{"line":3171,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3170,"column":0},"generated":{"line":3172,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3171,"column":0},"generated":{"line":3173,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3172,"column":0},"generated":{"line":3174,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3173,"column":0},"generated":{"line":3175,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3174,"column":0},"generated":{"line":3176,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3175,"column":0},"generated":{"line":3177,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3176,"column":0},"generated":{"line":3178,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3177,"column":0},"generated":{"line":3179,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3178,"column":0},"generated":{"line":3180,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3179,"column":0},"generated":{"line":3181,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3180,"column":0},"generated":{"line":3182,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3181,"column":0},"generated":{"line":3183,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3182,"column":0},"generated":{"line":3184,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3183,"column":0},"generated":{"line":3185,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3184,"column":0},"generated":{"line":3186,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3185,"column":0},"generated":{"line":3187,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3186,"column":0},"generated":{"line":3188,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3187,"column":0},"generated":{"line":3189,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3188,"column":0},"generated":{"line":3190,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3189,"column":0},"generated":{"line":3191,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3190,"column":0},"generated":{"line":3192,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3191,"column":0},"generated":{"line":3193,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3192,"column":0},"generated":{"line":3194,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3193,"column":0},"generated":{"line":3195,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3194,"column":0},"generated":{"line":3196,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3195,"column":0},"generated":{"line":3197,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3196,"column":0},"generated":{"line":3198,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3197,"column":0},"generated":{"line":3199,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3198,"column":0},"generated":{"line":3200,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3199,"column":0},"generated":{"line":3201,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3200,"column":0},"generated":{"line":3202,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3201,"column":0},"generated":{"line":3203,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3202,"column":0},"generated":{"line":3204,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3203,"column":0},"generated":{"line":3205,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3204,"column":0},"generated":{"line":3206,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3205,"column":0},"generated":{"line":3207,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3206,"column":0},"generated":{"line":3208,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3207,"column":0},"generated":{"line":3209,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3208,"column":0},"generated":{"line":3210,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3209,"column":0},"generated":{"line":3211,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3210,"column":0},"generated":{"line":3212,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3211,"column":0},"generated":{"line":3213,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3212,"column":0},"generated":{"line":3214,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3213,"column":0},"generated":{"line":3215,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3214,"column":0},"generated":{"line":3216,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3215,"column":0},"generated":{"line":3217,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3216,"column":0},"generated":{"line":3218,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3217,"column":0},"generated":{"line":3219,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3218,"column":0},"generated":{"line":3220,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3219,"column":0},"generated":{"line":3221,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3220,"column":0},"generated":{"line":3222,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3221,"column":0},"generated":{"line":3223,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3222,"column":0},"generated":{"line":3224,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3223,"column":0},"generated":{"line":3225,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3224,"column":0},"generated":{"line":3226,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3225,"column":0},"generated":{"line":3227,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3226,"column":0},"generated":{"line":3228,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3227,"column":0},"generated":{"line":3229,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3228,"column":0},"generated":{"line":3230,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3229,"column":0},"generated":{"line":3231,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3230,"column":0},"generated":{"line":3232,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3231,"column":0},"generated":{"line":3233,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3232,"column":0},"generated":{"line":3234,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3233,"column":0},"generated":{"line":3235,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3234,"column":0},"generated":{"line":3236,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3235,"column":0},"generated":{"line":3237,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3236,"column":0},"generated":{"line":3238,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3237,"column":0},"generated":{"line":3239,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3238,"column":0},"generated":{"line":3240,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3239,"column":0},"generated":{"line":3241,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3240,"column":0},"generated":{"line":3242,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3241,"column":0},"generated":{"line":3243,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3242,"column":0},"generated":{"line":3244,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3243,"column":0},"generated":{"line":3245,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3244,"column":0},"generated":{"line":3246,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3245,"column":0},"generated":{"line":3247,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3246,"column":0},"generated":{"line":3248,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3247,"column":0},"generated":{"line":3249,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3248,"column":0},"generated":{"line":3250,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3249,"column":0},"generated":{"line":3251,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3250,"column":0},"generated":{"line":3252,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3251,"column":0},"generated":{"line":3253,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3252,"column":0},"generated":{"line":3254,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3253,"column":0},"generated":{"line":3255,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3254,"column":0},"generated":{"line":3256,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3255,"column":0},"generated":{"line":3257,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3256,"column":0},"generated":{"line":3258,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3257,"column":0},"generated":{"line":3259,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3258,"column":0},"generated":{"line":3260,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3259,"column":0},"generated":{"line":3261,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3260,"column":0},"generated":{"line":3262,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3261,"column":0},"generated":{"line":3263,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3262,"column":0},"generated":{"line":3264,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3263,"column":0},"generated":{"line":3265,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3264,"column":0},"generated":{"line":3266,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3265,"column":0},"generated":{"line":3267,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3266,"column":0},"generated":{"line":3268,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3267,"column":0},"generated":{"line":3269,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3268,"column":0},"generated":{"line":3270,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3269,"column":0},"generated":{"line":3271,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3270,"column":0},"generated":{"line":3272,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3271,"column":0},"generated":{"line":3273,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3272,"column":0},"generated":{"line":3274,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3273,"column":0},"generated":{"line":3275,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3274,"column":0},"generated":{"line":3276,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3275,"column":0},"generated":{"line":3277,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3276,"column":0},"generated":{"line":3278,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3277,"column":0},"generated":{"line":3279,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3278,"column":0},"generated":{"line":3280,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3279,"column":0},"generated":{"line":3281,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3280,"column":0},"generated":{"line":3282,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3281,"column":0},"generated":{"line":3283,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3282,"column":0},"generated":{"line":3284,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3283,"column":0},"generated":{"line":3285,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3284,"column":0},"generated":{"line":3286,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3285,"column":0},"generated":{"line":3287,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3286,"column":0},"generated":{"line":3288,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3287,"column":0},"generated":{"line":3289,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3288,"column":0},"generated":{"line":3290,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3289,"column":0},"generated":{"line":3291,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3290,"column":0},"generated":{"line":3292,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3291,"column":0},"generated":{"line":3293,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3292,"column":0},"generated":{"line":3294,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3293,"column":0},"generated":{"line":3295,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3294,"column":0},"generated":{"line":3296,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3295,"column":0},"generated":{"line":3297,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3296,"column":0},"generated":{"line":3298,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3297,"column":0},"generated":{"line":3299,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3298,"column":0},"generated":{"line":3300,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3299,"column":0},"generated":{"line":3301,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3300,"column":0},"generated":{"line":3302,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3301,"column":0},"generated":{"line":3303,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3302,"column":0},"generated":{"line":3304,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3303,"column":0},"generated":{"line":3305,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3304,"column":0},"generated":{"line":3306,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3305,"column":0},"generated":{"line":3307,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3306,"column":0},"generated":{"line":3308,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3307,"column":0},"generated":{"line":3309,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3308,"column":0},"generated":{"line":3310,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3309,"column":0},"generated":{"line":3311,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3310,"column":0},"generated":{"line":3312,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3311,"column":0},"generated":{"line":3313,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3312,"column":0},"generated":{"line":3314,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3313,"column":0},"generated":{"line":3315,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3314,"column":0},"generated":{"line":3316,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3315,"column":0},"generated":{"line":3317,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3316,"column":0},"generated":{"line":3318,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3317,"column":0},"generated":{"line":3319,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3318,"column":0},"generated":{"line":3320,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3319,"column":0},"generated":{"line":3321,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3320,"column":0},"generated":{"line":3322,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3321,"column":0},"generated":{"line":3323,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3322,"column":0},"generated":{"line":3324,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3323,"column":0},"generated":{"line":3325,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3324,"column":0},"generated":{"line":3326,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3325,"column":0},"generated":{"line":3327,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3326,"column":0},"generated":{"line":3328,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3327,"column":0},"generated":{"line":3329,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3328,"column":0},"generated":{"line":3330,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3329,"column":0},"generated":{"line":3331,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3330,"column":0},"generated":{"line":3332,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3331,"column":0},"generated":{"line":3333,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3332,"column":0},"generated":{"line":3334,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3333,"column":0},"generated":{"line":3335,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3334,"column":0},"generated":{"line":3336,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3335,"column":0},"generated":{"line":3337,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3336,"column":0},"generated":{"line":3338,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3337,"column":0},"generated":{"line":3339,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3338,"column":0},"generated":{"line":3340,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3339,"column":0},"generated":{"line":3341,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3340,"column":0},"generated":{"line":3342,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3341,"column":0},"generated":{"line":3343,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3342,"column":0},"generated":{"line":3344,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3343,"column":0},"generated":{"line":3345,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3344,"column":0},"generated":{"line":3346,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3345,"column":0},"generated":{"line":3347,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3346,"column":0},"generated":{"line":3348,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3347,"column":0},"generated":{"line":3349,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3348,"column":0},"generated":{"line":3350,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3349,"column":0},"generated":{"line":3351,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3350,"column":0},"generated":{"line":3352,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3351,"column":0},"generated":{"line":3353,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3352,"column":0},"generated":{"line":3354,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3353,"column":0},"generated":{"line":3355,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3354,"column":0},"generated":{"line":3356,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3355,"column":0},"generated":{"line":3357,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3356,"column":0},"generated":{"line":3358,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3357,"column":0},"generated":{"line":3359,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3358,"column":0},"generated":{"line":3360,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3359,"column":0},"generated":{"line":3361,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3360,"column":0},"generated":{"line":3362,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3361,"column":0},"generated":{"line":3363,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3362,"column":0},"generated":{"line":3364,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3363,"column":0},"generated":{"line":3365,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3364,"column":0},"generated":{"line":3366,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3365,"column":0},"generated":{"line":3367,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3366,"column":0},"generated":{"line":3368,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3367,"column":0},"generated":{"line":3369,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3368,"column":0},"generated":{"line":3370,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3369,"column":0},"generated":{"line":3371,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3370,"column":0},"generated":{"line":3372,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3371,"column":0},"generated":{"line":3373,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3372,"column":0},"generated":{"line":3374,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3373,"column":0},"generated":{"line":3375,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3374,"column":0},"generated":{"line":3376,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3375,"column":0},"generated":{"line":3377,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3376,"column":0},"generated":{"line":3378,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3377,"column":0},"generated":{"line":3379,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3378,"column":0},"generated":{"line":3380,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3379,"column":0},"generated":{"line":3381,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3380,"column":0},"generated":{"line":3382,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3381,"column":0},"generated":{"line":3383,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3382,"column":0},"generated":{"line":3384,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3383,"column":0},"generated":{"line":3385,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3384,"column":0},"generated":{"line":3386,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3385,"column":0},"generated":{"line":3387,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3386,"column":0},"generated":{"line":3388,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3387,"column":0},"generated":{"line":3389,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3388,"column":0},"generated":{"line":3390,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3389,"column":0},"generated":{"line":3391,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3390,"column":0},"generated":{"line":3392,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3391,"column":0},"generated":{"line":3393,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3392,"column":0},"generated":{"line":3394,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3393,"column":0},"generated":{"line":3395,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3394,"column":0},"generated":{"line":3396,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3395,"column":0},"generated":{"line":3397,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3396,"column":0},"generated":{"line":3398,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3397,"column":0},"generated":{"line":3399,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3398,"column":0},"generated":{"line":3400,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3399,"column":0},"generated":{"line":3401,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3400,"column":0},"generated":{"line":3402,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3401,"column":0},"generated":{"line":3403,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3402,"column":0},"generated":{"line":3404,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3403,"column":0},"generated":{"line":3405,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3404,"column":0},"generated":{"line":3406,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3405,"column":0},"generated":{"line":3407,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3406,"column":0},"generated":{"line":3408,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3407,"column":0},"generated":{"line":3409,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3408,"column":0},"generated":{"line":3410,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3409,"column":0},"generated":{"line":3411,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3410,"column":0},"generated":{"line":3412,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3411,"column":0},"generated":{"line":3413,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3412,"column":0},"generated":{"line":3414,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3413,"column":0},"generated":{"line":3415,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3414,"column":0},"generated":{"line":3416,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3415,"column":0},"generated":{"line":3417,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3416,"column":0},"generated":{"line":3418,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3417,"column":0},"generated":{"line":3419,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3418,"column":0},"generated":{"line":3420,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3419,"column":0},"generated":{"line":3421,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3420,"column":0},"generated":{"line":3422,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3421,"column":0},"generated":{"line":3423,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3422,"column":0},"generated":{"line":3424,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3423,"column":0},"generated":{"line":3425,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3424,"column":0},"generated":{"line":3426,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3425,"column":0},"generated":{"line":3427,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3426,"column":0},"generated":{"line":3428,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3427,"column":0},"generated":{"line":3429,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3428,"column":0},"generated":{"line":3430,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3429,"column":0},"generated":{"line":3431,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3430,"column":0},"generated":{"line":3432,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3431,"column":0},"generated":{"line":3433,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3432,"column":0},"generated":{"line":3434,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3433,"column":0},"generated":{"line":3435,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3434,"column":0},"generated":{"line":3436,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3435,"column":0},"generated":{"line":3437,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3436,"column":0},"generated":{"line":3438,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3437,"column":0},"generated":{"line":3439,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3438,"column":0},"generated":{"line":3440,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3439,"column":0},"generated":{"line":3441,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3440,"column":0},"generated":{"line":3442,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3441,"column":0},"generated":{"line":3443,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3442,"column":0},"generated":{"line":3444,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3443,"column":0},"generated":{"line":3445,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3444,"column":0},"generated":{"line":3446,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3445,"column":0},"generated":{"line":3447,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3446,"column":0},"generated":{"line":3448,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3447,"column":0},"generated":{"line":3449,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3448,"column":0},"generated":{"line":3450,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3449,"column":0},"generated":{"line":3451,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3450,"column":0},"generated":{"line":3452,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3451,"column":0},"generated":{"line":3453,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3452,"column":0},"generated":{"line":3454,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3453,"column":0},"generated":{"line":3455,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3454,"column":0},"generated":{"line":3456,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3455,"column":0},"generated":{"line":3457,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3456,"column":0},"generated":{"line":3458,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3457,"column":0},"generated":{"line":3459,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3458,"column":0},"generated":{"line":3460,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3459,"column":0},"generated":{"line":3461,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3460,"column":0},"generated":{"line":3462,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3461,"column":0},"generated":{"line":3463,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3462,"column":0},"generated":{"line":3464,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3463,"column":0},"generated":{"line":3465,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3464,"column":0},"generated":{"line":3466,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3465,"column":0},"generated":{"line":3467,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3466,"column":0},"generated":{"line":3468,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3467,"column":0},"generated":{"line":3469,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3468,"column":0},"generated":{"line":3470,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3469,"column":0},"generated":{"line":3471,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3470,"column":0},"generated":{"line":3472,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3471,"column":0},"generated":{"line":3473,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3472,"column":0},"generated":{"line":3474,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3473,"column":0},"generated":{"line":3475,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3474,"column":0},"generated":{"line":3476,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3475,"column":0},"generated":{"line":3477,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3476,"column":0},"generated":{"line":3478,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3477,"column":0},"generated":{"line":3479,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3478,"column":0},"generated":{"line":3480,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3479,"column":0},"generated":{"line":3481,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3480,"column":0},"generated":{"line":3482,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3481,"column":0},"generated":{"line":3483,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3482,"column":0},"generated":{"line":3484,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3483,"column":0},"generated":{"line":3485,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3484,"column":0},"generated":{"line":3486,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3485,"column":0},"generated":{"line":3487,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3486,"column":0},"generated":{"line":3488,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3487,"column":0},"generated":{"line":3489,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3488,"column":0},"generated":{"line":3490,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3489,"column":0},"generated":{"line":3491,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3490,"column":0},"generated":{"line":3492,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3491,"column":0},"generated":{"line":3493,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3492,"column":0},"generated":{"line":3494,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3493,"column":0},"generated":{"line":3495,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3494,"column":0},"generated":{"line":3496,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3495,"column":0},"generated":{"line":3497,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3496,"column":0},"generated":{"line":3498,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3497,"column":0},"generated":{"line":3499,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3498,"column":0},"generated":{"line":3500,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3499,"column":0},"generated":{"line":3501,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3500,"column":0},"generated":{"line":3502,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3501,"column":0},"generated":{"line":3503,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3502,"column":0},"generated":{"line":3504,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3503,"column":0},"generated":{"line":3505,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3504,"column":0},"generated":{"line":3506,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3505,"column":0},"generated":{"line":3507,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3506,"column":0},"generated":{"line":3508,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3507,"column":0},"generated":{"line":3509,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3508,"column":0},"generated":{"line":3510,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3509,"column":0},"generated":{"line":3511,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3510,"column":0},"generated":{"line":3512,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3511,"column":0},"generated":{"line":3513,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3512,"column":0},"generated":{"line":3514,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3513,"column":0},"generated":{"line":3515,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3514,"column":0},"generated":{"line":3516,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3515,"column":0},"generated":{"line":3517,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3516,"column":0},"generated":{"line":3518,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3517,"column":0},"generated":{"line":3519,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3518,"column":0},"generated":{"line":3520,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3519,"column":0},"generated":{"line":3521,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3520,"column":0},"generated":{"line":3522,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3521,"column":0},"generated":{"line":3523,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3522,"column":0},"generated":{"line":3524,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3523,"column":0},"generated":{"line":3525,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3524,"column":0},"generated":{"line":3526,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3525,"column":0},"generated":{"line":3527,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3526,"column":0},"generated":{"line":3528,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3527,"column":0},"generated":{"line":3529,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3528,"column":0},"generated":{"line":3530,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3529,"column":0},"generated":{"line":3531,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3530,"column":0},"generated":{"line":3532,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3531,"column":0},"generated":{"line":3533,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3532,"column":0},"generated":{"line":3534,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3533,"column":0},"generated":{"line":3535,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3534,"column":0},"generated":{"line":3536,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3535,"column":0},"generated":{"line":3537,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3536,"column":0},"generated":{"line":3538,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3537,"column":0},"generated":{"line":3539,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3538,"column":0},"generated":{"line":3540,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3539,"column":0},"generated":{"line":3541,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3540,"column":0},"generated":{"line":3542,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3541,"column":0},"generated":{"line":3543,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3542,"column":0},"generated":{"line":3544,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3543,"column":0},"generated":{"line":3545,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3544,"column":0},"generated":{"line":3546,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3545,"column":0},"generated":{"line":3547,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3546,"column":0},"generated":{"line":3548,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3547,"column":0},"generated":{"line":3549,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3548,"column":0},"generated":{"line":3550,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3549,"column":0},"generated":{"line":3551,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3550,"column":0},"generated":{"line":3552,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3551,"column":0},"generated":{"line":3553,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3552,"column":0},"generated":{"line":3554,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3553,"column":0},"generated":{"line":3555,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3554,"column":0},"generated":{"line":3556,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3555,"column":0},"generated":{"line":3557,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3556,"column":0},"generated":{"line":3558,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3557,"column":0},"generated":{"line":3559,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3558,"column":0},"generated":{"line":3560,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3559,"column":0},"generated":{"line":3561,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3560,"column":0},"generated":{"line":3562,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3561,"column":0},"generated":{"line":3563,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3562,"column":0},"generated":{"line":3564,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3563,"column":0},"generated":{"line":3565,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3564,"column":0},"generated":{"line":3566,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3565,"column":0},"generated":{"line":3567,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3566,"column":0},"generated":{"line":3568,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3567,"column":0},"generated":{"line":3569,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3568,"column":0},"generated":{"line":3570,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3569,"column":0},"generated":{"line":3571,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3570,"column":0},"generated":{"line":3572,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3571,"column":0},"generated":{"line":3573,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3572,"column":0},"generated":{"line":3574,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3573,"column":0},"generated":{"line":3575,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3574,"column":0},"generated":{"line":3576,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3575,"column":0},"generated":{"line":3577,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3576,"column":0},"generated":{"line":3578,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3577,"column":0},"generated":{"line":3579,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3578,"column":0},"generated":{"line":3580,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3579,"column":0},"generated":{"line":3581,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3580,"column":0},"generated":{"line":3582,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3581,"column":0},"generated":{"line":3583,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3582,"column":0},"generated":{"line":3584,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3583,"column":0},"generated":{"line":3585,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3584,"column":0},"generated":{"line":3586,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3585,"column":0},"generated":{"line":3587,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3586,"column":0},"generated":{"line":3588,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3587,"column":0},"generated":{"line":3589,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3588,"column":0},"generated":{"line":3590,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3589,"column":0},"generated":{"line":3591,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3590,"column":0},"generated":{"line":3592,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3591,"column":0},"generated":{"line":3593,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3592,"column":0},"generated":{"line":3594,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3593,"column":0},"generated":{"line":3595,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3594,"column":0},"generated":{"line":3596,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3595,"column":0},"generated":{"line":3597,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3596,"column":0},"generated":{"line":3598,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3597,"column":0},"generated":{"line":3599,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3598,"column":0},"generated":{"line":3600,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3599,"column":0},"generated":{"line":3601,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3600,"column":0},"generated":{"line":3602,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3601,"column":0},"generated":{"line":3603,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3602,"column":0},"generated":{"line":3604,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3603,"column":0},"generated":{"line":3605,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3604,"column":0},"generated":{"line":3606,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3605,"column":0},"generated":{"line":3607,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3606,"column":0},"generated":{"line":3608,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3607,"column":0},"generated":{"line":3609,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3608,"column":0},"generated":{"line":3610,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3609,"column":0},"generated":{"line":3611,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3610,"column":0},"generated":{"line":3612,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3611,"column":0},"generated":{"line":3613,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3612,"column":0},"generated":{"line":3614,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3613,"column":0},"generated":{"line":3615,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3614,"column":0},"generated":{"line":3616,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3615,"column":0},"generated":{"line":3617,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3616,"column":0},"generated":{"line":3618,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3617,"column":0},"generated":{"line":3619,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3618,"column":0},"generated":{"line":3620,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3619,"column":0},"generated":{"line":3621,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3620,"column":0},"generated":{"line":3622,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3621,"column":0},"generated":{"line":3623,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3622,"column":0},"generated":{"line":3624,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3623,"column":0},"generated":{"line":3625,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3624,"column":0},"generated":{"line":3626,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3625,"column":0},"generated":{"line":3627,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3626,"column":0},"generated":{"line":3628,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3627,"column":0},"generated":{"line":3629,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3628,"column":0},"generated":{"line":3630,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3629,"column":0},"generated":{"line":3631,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3630,"column":0},"generated":{"line":3632,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3631,"column":0},"generated":{"line":3633,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3632,"column":0},"generated":{"line":3634,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3633,"column":0},"generated":{"line":3635,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3634,"column":0},"generated":{"line":3636,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3635,"column":0},"generated":{"line":3637,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3636,"column":0},"generated":{"line":3638,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3637,"column":0},"generated":{"line":3639,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3638,"column":0},"generated":{"line":3640,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3639,"column":0},"generated":{"line":3641,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3640,"column":0},"generated":{"line":3642,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3641,"column":0},"generated":{"line":3643,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3642,"column":0},"generated":{"line":3644,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3643,"column":0},"generated":{"line":3645,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3644,"column":0},"generated":{"line":3646,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3645,"column":0},"generated":{"line":3647,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3646,"column":0},"generated":{"line":3648,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3647,"column":0},"generated":{"line":3649,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3648,"column":0},"generated":{"line":3650,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3649,"column":0},"generated":{"line":3651,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3650,"column":0},"generated":{"line":3652,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3651,"column":0},"generated":{"line":3653,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3652,"column":0},"generated":{"line":3654,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3653,"column":0},"generated":{"line":3655,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3654,"column":0},"generated":{"line":3656,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3655,"column":0},"generated":{"line":3657,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3656,"column":0},"generated":{"line":3658,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3657,"column":0},"generated":{"line":3659,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3658,"column":0},"generated":{"line":3660,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3659,"column":0},"generated":{"line":3661,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3660,"column":0},"generated":{"line":3662,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3661,"column":0},"generated":{"line":3663,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3662,"column":0},"generated":{"line":3664,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3663,"column":0},"generated":{"line":3665,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3664,"column":0},"generated":{"line":3666,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3665,"column":0},"generated":{"line":3667,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3666,"column":0},"generated":{"line":3668,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3667,"column":0},"generated":{"line":3669,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3668,"column":0},"generated":{"line":3670,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3669,"column":0},"generated":{"line":3671,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3670,"column":0},"generated":{"line":3672,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3671,"column":0},"generated":{"line":3673,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3672,"column":0},"generated":{"line":3674,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3673,"column":0},"generated":{"line":3675,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3674,"column":0},"generated":{"line":3676,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3675,"column":0},"generated":{"line":3677,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3676,"column":0},"generated":{"line":3678,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3677,"column":0},"generated":{"line":3679,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3678,"column":0},"generated":{"line":3680,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3679,"column":0},"generated":{"line":3681,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3680,"column":0},"generated":{"line":3682,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3681,"column":0},"generated":{"line":3683,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3682,"column":0},"generated":{"line":3684,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3683,"column":0},"generated":{"line":3685,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3684,"column":0},"generated":{"line":3686,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3685,"column":0},"generated":{"line":3687,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3686,"column":0},"generated":{"line":3688,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3687,"column":0},"generated":{"line":3689,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3688,"column":0},"generated":{"line":3690,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3689,"column":0},"generated":{"line":3691,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3690,"column":0},"generated":{"line":3692,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3691,"column":0},"generated":{"line":3693,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3692,"column":0},"generated":{"line":3694,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3693,"column":0},"generated":{"line":3695,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3694,"column":0},"generated":{"line":3696,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3695,"column":0},"generated":{"line":3697,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3696,"column":0},"generated":{"line":3698,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3697,"column":0},"generated":{"line":3699,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3698,"column":0},"generated":{"line":3700,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3699,"column":0},"generated":{"line":3701,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3700,"column":0},"generated":{"line":3702,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3701,"column":0},"generated":{"line":3703,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3702,"column":0},"generated":{"line":3704,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3703,"column":0},"generated":{"line":3705,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3704,"column":0},"generated":{"line":3706,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3705,"column":0},"generated":{"line":3707,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3706,"column":0},"generated":{"line":3708,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3707,"column":0},"generated":{"line":3709,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3708,"column":0},"generated":{"line":3710,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3709,"column":0},"generated":{"line":3711,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3710,"column":0},"generated":{"line":3712,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3711,"column":0},"generated":{"line":3713,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3712,"column":0},"generated":{"line":3714,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3713,"column":0},"generated":{"line":3715,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3714,"column":0},"generated":{"line":3716,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3715,"column":0},"generated":{"line":3717,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3716,"column":0},"generated":{"line":3718,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3717,"column":0},"generated":{"line":3719,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3718,"column":0},"generated":{"line":3720,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3719,"column":0},"generated":{"line":3721,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3720,"column":0},"generated":{"line":3722,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3721,"column":0},"generated":{"line":3723,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3722,"column":0},"generated":{"line":3724,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3723,"column":0},"generated":{"line":3725,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3724,"column":0},"generated":{"line":3726,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3725,"column":0},"generated":{"line":3727,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3726,"column":0},"generated":{"line":3728,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3727,"column":0},"generated":{"line":3729,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3728,"column":0},"generated":{"line":3730,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3729,"column":0},"generated":{"line":3731,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3730,"column":0},"generated":{"line":3732,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3731,"column":0},"generated":{"line":3733,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3732,"column":0},"generated":{"line":3734,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3733,"column":0},"generated":{"line":3735,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3734,"column":0},"generated":{"line":3736,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3735,"column":0},"generated":{"line":3737,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3736,"column":0},"generated":{"line":3738,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3737,"column":0},"generated":{"line":3739,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3738,"column":0},"generated":{"line":3740,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3739,"column":0},"generated":{"line":3741,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3740,"column":0},"generated":{"line":3742,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3741,"column":0},"generated":{"line":3743,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3742,"column":0},"generated":{"line":3744,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3743,"column":0},"generated":{"line":3745,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3744,"column":0},"generated":{"line":3746,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3745,"column":0},"generated":{"line":3747,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3746,"column":0},"generated":{"line":3748,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3747,"column":0},"generated":{"line":3749,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3748,"column":0},"generated":{"line":3750,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3749,"column":0},"generated":{"line":3751,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3750,"column":0},"generated":{"line":3752,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3751,"column":0},"generated":{"line":3753,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3752,"column":0},"generated":{"line":3754,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3753,"column":0},"generated":{"line":3755,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3754,"column":0},"generated":{"line":3756,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3755,"column":0},"generated":{"line":3757,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3756,"column":0},"generated":{"line":3758,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3757,"column":0},"generated":{"line":3759,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3758,"column":0},"generated":{"line":3760,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3759,"column":0},"generated":{"line":3761,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3760,"column":0},"generated":{"line":3762,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3761,"column":0},"generated":{"line":3763,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3762,"column":0},"generated":{"line":3764,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3763,"column":0},"generated":{"line":3765,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3764,"column":0},"generated":{"line":3766,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3765,"column":0},"generated":{"line":3767,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3766,"column":0},"generated":{"line":3768,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3767,"column":0},"generated":{"line":3769,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3768,"column":0},"generated":{"line":3770,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3769,"column":0},"generated":{"line":3771,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3770,"column":0},"generated":{"line":3772,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3771,"column":0},"generated":{"line":3773,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3772,"column":0},"generated":{"line":3774,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3773,"column":0},"generated":{"line":3775,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3774,"column":0},"generated":{"line":3776,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3775,"column":0},"generated":{"line":3777,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3776,"column":0},"generated":{"line":3778,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3777,"column":0},"generated":{"line":3779,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3778,"column":0},"generated":{"line":3780,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3779,"column":0},"generated":{"line":3781,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3780,"column":0},"generated":{"line":3782,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3781,"column":0},"generated":{"line":3783,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3782,"column":0},"generated":{"line":3784,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3783,"column":0},"generated":{"line":3785,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3784,"column":0},"generated":{"line":3786,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3785,"column":0},"generated":{"line":3787,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3786,"column":0},"generated":{"line":3788,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3787,"column":0},"generated":{"line":3789,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3788,"column":0},"generated":{"line":3790,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3789,"column":0},"generated":{"line":3791,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3790,"column":0},"generated":{"line":3792,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3791,"column":0},"generated":{"line":3793,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3792,"column":0},"generated":{"line":3794,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3793,"column":0},"generated":{"line":3795,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3794,"column":0},"generated":{"line":3796,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3795,"column":0},"generated":{"line":3797,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3796,"column":0},"generated":{"line":3798,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3797,"column":0},"generated":{"line":3799,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3798,"column":0},"generated":{"line":3800,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3799,"column":0},"generated":{"line":3801,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3800,"column":0},"generated":{"line":3802,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3801,"column":0},"generated":{"line":3803,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3802,"column":0},"generated":{"line":3804,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3803,"column":0},"generated":{"line":3805,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3804,"column":0},"generated":{"line":3806,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3805,"column":0},"generated":{"line":3807,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3806,"column":0},"generated":{"line":3808,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3807,"column":0},"generated":{"line":3809,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3808,"column":0},"generated":{"line":3810,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3809,"column":0},"generated":{"line":3811,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3810,"column":0},"generated":{"line":3812,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3811,"column":0},"generated":{"line":3813,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3812,"column":0},"generated":{"line":3814,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3813,"column":0},"generated":{"line":3815,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3814,"column":0},"generated":{"line":3816,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3815,"column":0},"generated":{"line":3817,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3816,"column":0},"generated":{"line":3818,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3817,"column":0},"generated":{"line":3819,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3818,"column":0},"generated":{"line":3820,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3819,"column":0},"generated":{"line":3821,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3820,"column":0},"generated":{"line":3822,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3821,"column":0},"generated":{"line":3823,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3822,"column":0},"generated":{"line":3824,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3823,"column":0},"generated":{"line":3825,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3824,"column":0},"generated":{"line":3826,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3825,"column":0},"generated":{"line":3827,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3826,"column":0},"generated":{"line":3828,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3827,"column":0},"generated":{"line":3829,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3828,"column":0},"generated":{"line":3830,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3829,"column":0},"generated":{"line":3831,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3830,"column":0},"generated":{"line":3832,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3831,"column":0},"generated":{"line":3833,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3832,"column":0},"generated":{"line":3834,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3833,"column":0},"generated":{"line":3835,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3834,"column":0},"generated":{"line":3836,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3835,"column":0},"generated":{"line":3837,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3836,"column":0},"generated":{"line":3838,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3837,"column":0},"generated":{"line":3839,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3838,"column":0},"generated":{"line":3840,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3839,"column":0},"generated":{"line":3841,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3840,"column":0},"generated":{"line":3842,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3841,"column":0},"generated":{"line":3843,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3842,"column":0},"generated":{"line":3844,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3843,"column":0},"generated":{"line":3845,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3844,"column":0},"generated":{"line":3846,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3845,"column":0},"generated":{"line":3847,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3846,"column":0},"generated":{"line":3848,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3847,"column":0},"generated":{"line":3849,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3848,"column":0},"generated":{"line":3850,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3849,"column":0},"generated":{"line":3851,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3850,"column":0},"generated":{"line":3852,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3851,"column":0},"generated":{"line":3853,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3852,"column":0},"generated":{"line":3854,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3853,"column":0},"generated":{"line":3855,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3854,"column":0},"generated":{"line":3856,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3855,"column":0},"generated":{"line":3857,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3856,"column":0},"generated":{"line":3858,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3857,"column":0},"generated":{"line":3859,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3858,"column":0},"generated":{"line":3860,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3859,"column":0},"generated":{"line":3861,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3860,"column":0},"generated":{"line":3862,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3861,"column":0},"generated":{"line":3863,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3862,"column":0},"generated":{"line":3864,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3863,"column":0},"generated":{"line":3865,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3864,"column":0},"generated":{"line":3866,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3865,"column":0},"generated":{"line":3867,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3866,"column":0},"generated":{"line":3868,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3867,"column":0},"generated":{"line":3869,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3868,"column":0},"generated":{"line":3870,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3869,"column":0},"generated":{"line":3871,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3870,"column":0},"generated":{"line":3872,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3871,"column":0},"generated":{"line":3873,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3872,"column":0},"generated":{"line":3874,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3873,"column":0},"generated":{"line":3875,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3874,"column":0},"generated":{"line":3876,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3875,"column":0},"generated":{"line":3877,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3876,"column":0},"generated":{"line":3878,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3877,"column":0},"generated":{"line":3879,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3878,"column":0},"generated":{"line":3880,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3879,"column":0},"generated":{"line":3881,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3880,"column":0},"generated":{"line":3882,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3881,"column":0},"generated":{"line":3883,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3882,"column":0},"generated":{"line":3884,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3883,"column":0},"generated":{"line":3885,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3884,"column":0},"generated":{"line":3886,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3885,"column":0},"generated":{"line":3887,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3886,"column":0},"generated":{"line":3888,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3887,"column":0},"generated":{"line":3889,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3888,"column":0},"generated":{"line":3890,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3889,"column":0},"generated":{"line":3891,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3890,"column":0},"generated":{"line":3892,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3891,"column":0},"generated":{"line":3893,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3892,"column":0},"generated":{"line":3894,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3893,"column":0},"generated":{"line":3895,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3894,"column":0},"generated":{"line":3896,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3895,"column":0},"generated":{"line":3897,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3896,"column":0},"generated":{"line":3898,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3897,"column":0},"generated":{"line":3899,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3898,"column":0},"generated":{"line":3900,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3899,"column":0},"generated":{"line":3901,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3900,"column":0},"generated":{"line":3902,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3901,"column":0},"generated":{"line":3903,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3902,"column":0},"generated":{"line":3904,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3903,"column":0},"generated":{"line":3905,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3904,"column":0},"generated":{"line":3906,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3905,"column":0},"generated":{"line":3907,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3906,"column":0},"generated":{"line":3908,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3907,"column":0},"generated":{"line":3909,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3908,"column":0},"generated":{"line":3910,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3909,"column":0},"generated":{"line":3911,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3910,"column":0},"generated":{"line":3912,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3911,"column":0},"generated":{"line":3913,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3912,"column":0},"generated":{"line":3914,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3913,"column":0},"generated":{"line":3915,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3914,"column":0},"generated":{"line":3916,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3915,"column":0},"generated":{"line":3917,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3916,"column":0},"generated":{"line":3918,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3917,"column":0},"generated":{"line":3919,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3918,"column":0},"generated":{"line":3920,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3919,"column":0},"generated":{"line":3921,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3920,"column":0},"generated":{"line":3922,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3921,"column":0},"generated":{"line":3923,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3922,"column":0},"generated":{"line":3924,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3923,"column":0},"generated":{"line":3925,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3924,"column":0},"generated":{"line":3926,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3925,"column":0},"generated":{"line":3927,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3926,"column":0},"generated":{"line":3928,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3927,"column":0},"generated":{"line":3929,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3928,"column":0},"generated":{"line":3930,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3929,"column":0},"generated":{"line":3931,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3930,"column":0},"generated":{"line":3932,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3931,"column":0},"generated":{"line":3933,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3932,"column":0},"generated":{"line":3934,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3933,"column":0},"generated":{"line":3935,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3934,"column":0},"generated":{"line":3936,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3935,"column":0},"generated":{"line":3937,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3936,"column":0},"generated":{"line":3938,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3937,"column":0},"generated":{"line":3939,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3938,"column":0},"generated":{"line":3940,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3939,"column":0},"generated":{"line":3941,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3940,"column":0},"generated":{"line":3942,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3941,"column":0},"generated":{"line":3943,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3942,"column":0},"generated":{"line":3944,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3943,"column":0},"generated":{"line":3945,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3944,"column":0},"generated":{"line":3946,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3945,"column":0},"generated":{"line":3947,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3946,"column":0},"generated":{"line":3948,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3947,"column":0},"generated":{"line":3949,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3948,"column":0},"generated":{"line":3950,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3949,"column":0},"generated":{"line":3951,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3950,"column":0},"generated":{"line":3952,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3951,"column":0},"generated":{"line":3953,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3952,"column":0},"generated":{"line":3954,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3953,"column":0},"generated":{"line":3955,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3954,"column":0},"generated":{"line":3956,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3955,"column":0},"generated":{"line":3957,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3956,"column":0},"generated":{"line":3958,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3957,"column":0},"generated":{"line":3959,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3958,"column":0},"generated":{"line":3960,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3959,"column":0},"generated":{"line":3961,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3960,"column":0},"generated":{"line":3962,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3961,"column":0},"generated":{"line":3963,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3962,"column":0},"generated":{"line":3964,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3963,"column":0},"generated":{"line":3965,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3964,"column":0},"generated":{"line":3966,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3965,"column":0},"generated":{"line":3967,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3966,"column":0},"generated":{"line":3968,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3967,"column":0},"generated":{"line":3969,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3968,"column":0},"generated":{"line":3970,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3969,"column":0},"generated":{"line":3971,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3970,"column":0},"generated":{"line":3972,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3971,"column":0},"generated":{"line":3973,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3972,"column":0},"generated":{"line":3974,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3973,"column":0},"generated":{"line":3975,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3974,"column":0},"generated":{"line":3976,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3975,"column":0},"generated":{"line":3977,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3976,"column":0},"generated":{"line":3978,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3977,"column":0},"generated":{"line":3979,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3978,"column":0},"generated":{"line":3980,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3979,"column":0},"generated":{"line":3981,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3980,"column":0},"generated":{"line":3982,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3981,"column":0},"generated":{"line":3983,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3982,"column":0},"generated":{"line":3984,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3983,"column":0},"generated":{"line":3985,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3984,"column":0},"generated":{"line":3986,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3985,"column":0},"generated":{"line":3987,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3986,"column":0},"generated":{"line":3988,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3987,"column":0},"generated":{"line":3989,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3988,"column":0},"generated":{"line":3990,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3989,"column":0},"generated":{"line":3991,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3990,"column":0},"generated":{"line":3992,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3991,"column":0},"generated":{"line":3993,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3992,"column":0},"generated":{"line":3994,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3993,"column":0},"generated":{"line":3995,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3994,"column":0},"generated":{"line":3996,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3995,"column":0},"generated":{"line":3997,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3996,"column":0},"generated":{"line":3998,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3997,"column":0},"generated":{"line":3999,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3998,"column":0},"generated":{"line":4000,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":3999,"column":0},"generated":{"line":4001,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4000,"column":0},"generated":{"line":4002,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4001,"column":0},"generated":{"line":4003,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4002,"column":0},"generated":{"line":4004,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4003,"column":0},"generated":{"line":4005,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4004,"column":0},"generated":{"line":4006,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4005,"column":0},"generated":{"line":4007,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4006,"column":0},"generated":{"line":4008,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4007,"column":0},"generated":{"line":4009,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4008,"column":0},"generated":{"line":4010,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4009,"column":0},"generated":{"line":4011,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4010,"column":0},"generated":{"line":4012,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4011,"column":0},"generated":{"line":4013,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4012,"column":0},"generated":{"line":4014,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4013,"column":0},"generated":{"line":4015,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4014,"column":0},"generated":{"line":4016,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4015,"column":0},"generated":{"line":4017,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4016,"column":0},"generated":{"line":4018,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4017,"column":0},"generated":{"line":4019,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4018,"column":0},"generated":{"line":4020,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4019,"column":0},"generated":{"line":4021,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4020,"column":0},"generated":{"line":4022,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4021,"column":0},"generated":{"line":4023,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4022,"column":0},"generated":{"line":4024,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4023,"column":0},"generated":{"line":4025,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4024,"column":0},"generated":{"line":4026,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4025,"column":0},"generated":{"line":4027,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4026,"column":0},"generated":{"line":4028,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4027,"column":0},"generated":{"line":4029,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4028,"column":0},"generated":{"line":4030,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4029,"column":0},"generated":{"line":4031,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4030,"column":0},"generated":{"line":4032,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4031,"column":0},"generated":{"line":4033,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4032,"column":0},"generated":{"line":4034,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4033,"column":0},"generated":{"line":4035,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4034,"column":0},"generated":{"line":4036,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4035,"column":0},"generated":{"line":4037,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4036,"column":0},"generated":{"line":4038,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4037,"column":0},"generated":{"line":4039,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4038,"column":0},"generated":{"line":4040,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4039,"column":0},"generated":{"line":4041,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4040,"column":0},"generated":{"line":4042,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4041,"column":0},"generated":{"line":4043,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4042,"column":0},"generated":{"line":4044,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4043,"column":0},"generated":{"line":4045,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4044,"column":0},"generated":{"line":4046,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4045,"column":0},"generated":{"line":4047,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4046,"column":0},"generated":{"line":4048,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4047,"column":0},"generated":{"line":4049,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4048,"column":0},"generated":{"line":4050,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4049,"column":0},"generated":{"line":4051,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4050,"column":0},"generated":{"line":4052,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4051,"column":0},"generated":{"line":4053,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4052,"column":0},"generated":{"line":4054,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4053,"column":0},"generated":{"line":4055,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4054,"column":0},"generated":{"line":4056,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4055,"column":0},"generated":{"line":4057,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4056,"column":0},"generated":{"line":4058,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4057,"column":0},"generated":{"line":4059,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4058,"column":0},"generated":{"line":4060,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4059,"column":0},"generated":{"line":4061,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4060,"column":0},"generated":{"line":4062,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4061,"column":0},"generated":{"line":4063,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4062,"column":0},"generated":{"line":4064,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4063,"column":0},"generated":{"line":4065,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4064,"column":0},"generated":{"line":4066,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4065,"column":0},"generated":{"line":4067,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4066,"column":0},"generated":{"line":4068,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4067,"column":0},"generated":{"line":4069,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4068,"column":0},"generated":{"line":4070,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4069,"column":0},"generated":{"line":4071,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4070,"column":0},"generated":{"line":4072,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4071,"column":0},"generated":{"line":4073,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4072,"column":0},"generated":{"line":4074,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4073,"column":0},"generated":{"line":4075,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4074,"column":0},"generated":{"line":4076,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4075,"column":0},"generated":{"line":4077,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4076,"column":0},"generated":{"line":4078,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4077,"column":0},"generated":{"line":4079,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4078,"column":0},"generated":{"line":4080,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4079,"column":0},"generated":{"line":4081,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4080,"column":0},"generated":{"line":4082,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4081,"column":0},"generated":{"line":4083,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4082,"column":0},"generated":{"line":4084,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4083,"column":0},"generated":{"line":4085,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4084,"column":0},"generated":{"line":4086,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4085,"column":0},"generated":{"line":4087,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4086,"column":0},"generated":{"line":4088,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4087,"column":0},"generated":{"line":4089,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4088,"column":0},"generated":{"line":4090,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4089,"column":0},"generated":{"line":4091,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4090,"column":0},"generated":{"line":4092,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4091,"column":0},"generated":{"line":4093,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4092,"column":0},"generated":{"line":4094,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4093,"column":0},"generated":{"line":4095,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4094,"column":0},"generated":{"line":4096,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4095,"column":0},"generated":{"line":4097,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4096,"column":0},"generated":{"line":4098,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4097,"column":0},"generated":{"line":4099,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4098,"column":0},"generated":{"line":4100,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4099,"column":0},"generated":{"line":4101,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4100,"column":0},"generated":{"line":4102,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4101,"column":0},"generated":{"line":4103,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4102,"column":0},"generated":{"line":4104,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4103,"column":0},"generated":{"line":4105,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4104,"column":0},"generated":{"line":4106,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4105,"column":0},"generated":{"line":4107,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4106,"column":0},"generated":{"line":4108,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4107,"column":0},"generated":{"line":4109,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4108,"column":0},"generated":{"line":4110,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4109,"column":0},"generated":{"line":4111,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4110,"column":0},"generated":{"line":4112,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4111,"column":0},"generated":{"line":4113,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4112,"column":0},"generated":{"line":4114,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4113,"column":0},"generated":{"line":4115,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4114,"column":0},"generated":{"line":4116,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4115,"column":0},"generated":{"line":4117,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4116,"column":0},"generated":{"line":4118,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4117,"column":0},"generated":{"line":4119,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4118,"column":0},"generated":{"line":4120,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4119,"column":0},"generated":{"line":4121,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4120,"column":0},"generated":{"line":4122,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4121,"column":0},"generated":{"line":4123,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4122,"column":0},"generated":{"line":4124,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4123,"column":0},"generated":{"line":4125,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4124,"column":0},"generated":{"line":4126,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4125,"column":0},"generated":{"line":4127,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4126,"column":0},"generated":{"line":4128,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4127,"column":0},"generated":{"line":4129,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4128,"column":0},"generated":{"line":4130,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4129,"column":0},"generated":{"line":4131,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4130,"column":0},"generated":{"line":4132,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4131,"column":0},"generated":{"line":4133,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4132,"column":0},"generated":{"line":4134,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4133,"column":0},"generated":{"line":4135,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4134,"column":0},"generated":{"line":4136,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4135,"column":0},"generated":{"line":4137,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4136,"column":0},"generated":{"line":4138,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4137,"column":0},"generated":{"line":4139,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4138,"column":0},"generated":{"line":4140,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4139,"column":0},"generated":{"line":4141,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4140,"column":0},"generated":{"line":4142,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4141,"column":0},"generated":{"line":4143,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4142,"column":0},"generated":{"line":4144,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4143,"column":0},"generated":{"line":4145,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4144,"column":0},"generated":{"line":4146,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4145,"column":0},"generated":{"line":4147,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4146,"column":0},"generated":{"line":4148,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4147,"column":0},"generated":{"line":4149,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4148,"column":0},"generated":{"line":4150,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4149,"column":0},"generated":{"line":4151,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4150,"column":0},"generated":{"line":4152,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4151,"column":0},"generated":{"line":4153,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4152,"column":0},"generated":{"line":4154,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4153,"column":0},"generated":{"line":4155,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4154,"column":0},"generated":{"line":4156,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4155,"column":0},"generated":{"line":4157,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4156,"column":0},"generated":{"line":4158,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4157,"column":0},"generated":{"line":4159,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4158,"column":0},"generated":{"line":4160,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4159,"column":0},"generated":{"line":4161,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4160,"column":0},"generated":{"line":4162,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4161,"column":0},"generated":{"line":4163,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4162,"column":0},"generated":{"line":4164,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4163,"column":0},"generated":{"line":4165,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4164,"column":0},"generated":{"line":4166,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4165,"column":0},"generated":{"line":4167,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4166,"column":0},"generated":{"line":4168,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4167,"column":0},"generated":{"line":4169,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4168,"column":0},"generated":{"line":4170,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4169,"column":0},"generated":{"line":4171,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4170,"column":0},"generated":{"line":4172,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4171,"column":0},"generated":{"line":4173,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4172,"column":0},"generated":{"line":4174,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4173,"column":0},"generated":{"line":4175,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4174,"column":0},"generated":{"line":4176,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4175,"column":0},"generated":{"line":4177,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4176,"column":0},"generated":{"line":4178,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4177,"column":0},"generated":{"line":4179,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4178,"column":0},"generated":{"line":4180,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4179,"column":0},"generated":{"line":4181,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4180,"column":0},"generated":{"line":4182,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4181,"column":0},"generated":{"line":4183,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4182,"column":0},"generated":{"line":4184,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4183,"column":0},"generated":{"line":4185,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4184,"column":0},"generated":{"line":4186,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4185,"column":0},"generated":{"line":4187,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4186,"column":0},"generated":{"line":4188,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4187,"column":0},"generated":{"line":4189,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4188,"column":0},"generated":{"line":4190,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4189,"column":0},"generated":{"line":4191,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4190,"column":0},"generated":{"line":4192,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4191,"column":0},"generated":{"line":4193,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4192,"column":0},"generated":{"line":4194,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4193,"column":0},"generated":{"line":4195,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4194,"column":0},"generated":{"line":4196,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4195,"column":0},"generated":{"line":4197,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4196,"column":0},"generated":{"line":4198,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4197,"column":0},"generated":{"line":4199,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4198,"column":0},"generated":{"line":4200,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4199,"column":0},"generated":{"line":4201,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4200,"column":0},"generated":{"line":4202,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4201,"column":0},"generated":{"line":4203,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4202,"column":0},"generated":{"line":4204,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4203,"column":0},"generated":{"line":4205,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4204,"column":0},"generated":{"line":4206,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4205,"column":0},"generated":{"line":4207,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4206,"column":0},"generated":{"line":4208,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4207,"column":0},"generated":{"line":4209,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4208,"column":0},"generated":{"line":4210,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4209,"column":0},"generated":{"line":4211,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4210,"column":0},"generated":{"line":4212,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4211,"column":0},"generated":{"line":4213,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4212,"column":0},"generated":{"line":4214,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4213,"column":0},"generated":{"line":4215,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4214,"column":0},"generated":{"line":4216,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4215,"column":0},"generated":{"line":4217,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4216,"column":0},"generated":{"line":4218,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4217,"column":0},"generated":{"line":4219,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4218,"column":0},"generated":{"line":4220,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4219,"column":0},"generated":{"line":4221,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4220,"column":0},"generated":{"line":4222,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4221,"column":0},"generated":{"line":4223,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4222,"column":0},"generated":{"line":4224,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4223,"column":0},"generated":{"line":4225,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4224,"column":0},"generated":{"line":4226,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4225,"column":0},"generated":{"line":4227,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4226,"column":0},"generated":{"line":4228,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4227,"column":0},"generated":{"line":4229,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4228,"column":0},"generated":{"line":4230,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4229,"column":0},"generated":{"line":4231,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4230,"column":0},"generated":{"line":4232,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4231,"column":0},"generated":{"line":4233,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4232,"column":0},"generated":{"line":4234,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4233,"column":0},"generated":{"line":4235,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4234,"column":0},"generated":{"line":4236,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4235,"column":0},"generated":{"line":4237,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4236,"column":0},"generated":{"line":4238,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4237,"column":0},"generated":{"line":4239,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4238,"column":0},"generated":{"line":4240,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4239,"column":0},"generated":{"line":4241,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4240,"column":0},"generated":{"line":4242,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4241,"column":0},"generated":{"line":4243,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4242,"column":0},"generated":{"line":4244,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4243,"column":0},"generated":{"line":4245,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4244,"column":0},"generated":{"line":4246,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4245,"column":0},"generated":{"line":4247,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4246,"column":0},"generated":{"line":4248,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4247,"column":0},"generated":{"line":4249,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4248,"column":0},"generated":{"line":4250,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4249,"column":0},"generated":{"line":4251,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4250,"column":0},"generated":{"line":4252,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4251,"column":0},"generated":{"line":4253,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4252,"column":0},"generated":{"line":4254,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4253,"column":0},"generated":{"line":4255,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4254,"column":0},"generated":{"line":4256,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4255,"column":0},"generated":{"line":4257,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4256,"column":0},"generated":{"line":4258,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4257,"column":0},"generated":{"line":4259,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4258,"column":0},"generated":{"line":4260,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4259,"column":0},"generated":{"line":4261,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4260,"column":0},"generated":{"line":4262,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4261,"column":0},"generated":{"line":4263,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4262,"column":0},"generated":{"line":4264,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4263,"column":0},"generated":{"line":4265,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4264,"column":0},"generated":{"line":4266,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4265,"column":0},"generated":{"line":4267,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4266,"column":0},"generated":{"line":4268,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4267,"column":0},"generated":{"line":4269,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4268,"column":0},"generated":{"line":4270,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4269,"column":0},"generated":{"line":4271,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4270,"column":0},"generated":{"line":4272,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4271,"column":0},"generated":{"line":4273,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4272,"column":0},"generated":{"line":4274,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4273,"column":0},"generated":{"line":4275,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4274,"column":0},"generated":{"line":4276,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4275,"column":0},"generated":{"line":4277,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4276,"column":0},"generated":{"line":4278,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4277,"column":0},"generated":{"line":4279,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4278,"column":0},"generated":{"line":4280,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4279,"column":0},"generated":{"line":4281,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4280,"column":0},"generated":{"line":4282,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4281,"column":0},"generated":{"line":4283,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4282,"column":0},"generated":{"line":4284,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4283,"column":0},"generated":{"line":4285,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4284,"column":0},"generated":{"line":4286,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4285,"column":0},"generated":{"line":4287,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4286,"column":0},"generated":{"line":4288,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4287,"column":0},"generated":{"line":4289,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4288,"column":0},"generated":{"line":4290,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4289,"column":0},"generated":{"line":4291,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4290,"column":0},"generated":{"line":4292,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4291,"column":0},"generated":{"line":4293,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4292,"column":0},"generated":{"line":4294,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4293,"column":0},"generated":{"line":4295,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4294,"column":0},"generated":{"line":4296,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4295,"column":0},"generated":{"line":4297,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4296,"column":0},"generated":{"line":4298,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4297,"column":0},"generated":{"line":4299,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4298,"column":0},"generated":{"line":4300,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4299,"column":0},"generated":{"line":4301,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4300,"column":0},"generated":{"line":4302,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4301,"column":0},"generated":{"line":4303,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4302,"column":0},"generated":{"line":4304,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4303,"column":0},"generated":{"line":4305,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4304,"column":0},"generated":{"line":4306,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4305,"column":0},"generated":{"line":4307,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4306,"column":0},"generated":{"line":4308,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4307,"column":0},"generated":{"line":4309,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4308,"column":0},"generated":{"line":4310,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4309,"column":0},"generated":{"line":4311,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4310,"column":0},"generated":{"line":4312,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4311,"column":0},"generated":{"line":4313,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4312,"column":0},"generated":{"line":4314,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4313,"column":0},"generated":{"line":4315,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4314,"column":0},"generated":{"line":4316,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4315,"column":0},"generated":{"line":4317,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4316,"column":0},"generated":{"line":4318,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4317,"column":0},"generated":{"line":4319,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4318,"column":0},"generated":{"line":4320,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4319,"column":0},"generated":{"line":4321,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4320,"column":0},"generated":{"line":4322,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4321,"column":0},"generated":{"line":4323,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4322,"column":0},"generated":{"line":4324,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4323,"column":0},"generated":{"line":4325,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4324,"column":0},"generated":{"line":4326,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4325,"column":0},"generated":{"line":4327,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4326,"column":0},"generated":{"line":4328,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4327,"column":0},"generated":{"line":4329,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4328,"column":0},"generated":{"line":4330,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4329,"column":0},"generated":{"line":4331,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4330,"column":0},"generated":{"line":4332,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4331,"column":0},"generated":{"line":4333,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4332,"column":0},"generated":{"line":4334,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4333,"column":0},"generated":{"line":4335,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4334,"column":0},"generated":{"line":4336,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4335,"column":0},"generated":{"line":4337,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4336,"column":0},"generated":{"line":4338,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4337,"column":0},"generated":{"line":4339,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4338,"column":0},"generated":{"line":4340,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4339,"column":0},"generated":{"line":4341,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4340,"column":0},"generated":{"line":4342,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4341,"column":0},"generated":{"line":4343,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4342,"column":0},"generated":{"line":4344,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4343,"column":0},"generated":{"line":4345,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4344,"column":0},"generated":{"line":4346,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4345,"column":0},"generated":{"line":4347,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4346,"column":0},"generated":{"line":4348,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4347,"column":0},"generated":{"line":4349,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4348,"column":0},"generated":{"line":4350,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4349,"column":0},"generated":{"line":4351,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4350,"column":0},"generated":{"line":4352,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4351,"column":0},"generated":{"line":4353,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4352,"column":0},"generated":{"line":4354,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4353,"column":0},"generated":{"line":4355,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4354,"column":0},"generated":{"line":4356,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4355,"column":0},"generated":{"line":4357,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4356,"column":0},"generated":{"line":4358,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4357,"column":0},"generated":{"line":4359,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4358,"column":0},"generated":{"line":4360,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4359,"column":0},"generated":{"line":4361,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4360,"column":0},"generated":{"line":4362,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4361,"column":0},"generated":{"line":4363,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4362,"column":0},"generated":{"line":4364,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4363,"column":0},"generated":{"line":4365,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4364,"column":0},"generated":{"line":4366,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4365,"column":0},"generated":{"line":4367,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4366,"column":0},"generated":{"line":4368,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4367,"column":0},"generated":{"line":4369,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4368,"column":0},"generated":{"line":4370,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4369,"column":0},"generated":{"line":4371,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4370,"column":0},"generated":{"line":4372,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4371,"column":0},"generated":{"line":4373,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4372,"column":0},"generated":{"line":4374,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4373,"column":0},"generated":{"line":4375,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4374,"column":0},"generated":{"line":4376,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4375,"column":0},"generated":{"line":4377,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4376,"column":0},"generated":{"line":4378,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4377,"column":0},"generated":{"line":4379,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4378,"column":0},"generated":{"line":4380,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4379,"column":0},"generated":{"line":4381,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4380,"column":0},"generated":{"line":4382,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4381,"column":0},"generated":{"line":4383,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4382,"column":0},"generated":{"line":4384,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4383,"column":0},"generated":{"line":4385,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4384,"column":0},"generated":{"line":4386,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4385,"column":0},"generated":{"line":4387,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4386,"column":0},"generated":{"line":4388,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4387,"column":0},"generated":{"line":4389,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4388,"column":0},"generated":{"line":4390,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4389,"column":0},"generated":{"line":4391,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4390,"column":0},"generated":{"line":4392,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4391,"column":0},"generated":{"line":4393,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4392,"column":0},"generated":{"line":4394,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4393,"column":0},"generated":{"line":4395,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4394,"column":0},"generated":{"line":4396,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4395,"column":0},"generated":{"line":4397,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4396,"column":0},"generated":{"line":4398,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4397,"column":0},"generated":{"line":4399,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4398,"column":0},"generated":{"line":4400,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4399,"column":0},"generated":{"line":4401,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4400,"column":0},"generated":{"line":4402,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4401,"column":0},"generated":{"line":4403,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4402,"column":0},"generated":{"line":4404,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4403,"column":0},"generated":{"line":4405,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4404,"column":0},"generated":{"line":4406,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4405,"column":0},"generated":{"line":4407,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4406,"column":0},"generated":{"line":4408,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4407,"column":0},"generated":{"line":4409,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4408,"column":0},"generated":{"line":4410,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4409,"column":0},"generated":{"line":4411,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4410,"column":0},"generated":{"line":4412,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4411,"column":0},"generated":{"line":4413,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4412,"column":0},"generated":{"line":4414,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4413,"column":0},"generated":{"line":4415,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4414,"column":0},"generated":{"line":4416,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4415,"column":0},"generated":{"line":4417,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4416,"column":0},"generated":{"line":4418,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4417,"column":0},"generated":{"line":4419,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4418,"column":0},"generated":{"line":4420,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4419,"column":0},"generated":{"line":4421,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4420,"column":0},"generated":{"line":4422,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4421,"column":0},"generated":{"line":4423,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4422,"column":0},"generated":{"line":4424,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4423,"column":0},"generated":{"line":4425,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4424,"column":0},"generated":{"line":4426,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4425,"column":0},"generated":{"line":4427,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4426,"column":0},"generated":{"line":4428,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4427,"column":0},"generated":{"line":4429,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4428,"column":0},"generated":{"line":4430,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4429,"column":0},"generated":{"line":4431,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4430,"column":0},"generated":{"line":4432,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4431,"column":0},"generated":{"line":4433,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4432,"column":0},"generated":{"line":4434,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4433,"column":0},"generated":{"line":4435,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4434,"column":0},"generated":{"line":4436,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4435,"column":0},"generated":{"line":4437,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4436,"column":0},"generated":{"line":4438,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4437,"column":0},"generated":{"line":4439,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4438,"column":0},"generated":{"line":4440,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4439,"column":0},"generated":{"line":4441,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4440,"column":0},"generated":{"line":4442,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4441,"column":0},"generated":{"line":4443,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4442,"column":0},"generated":{"line":4444,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4443,"column":0},"generated":{"line":4445,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4444,"column":0},"generated":{"line":4446,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4445,"column":0},"generated":{"line":4447,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4446,"column":0},"generated":{"line":4448,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4447,"column":0},"generated":{"line":4449,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4448,"column":0},"generated":{"line":4450,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4449,"column":0},"generated":{"line":4451,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4450,"column":0},"generated":{"line":4452,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4451,"column":0},"generated":{"line":4453,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4452,"column":0},"generated":{"line":4454,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4453,"column":0},"generated":{"line":4455,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4454,"column":0},"generated":{"line":4456,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4455,"column":0},"generated":{"line":4457,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4456,"column":0},"generated":{"line":4458,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4457,"column":0},"generated":{"line":4459,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4458,"column":0},"generated":{"line":4460,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4459,"column":0},"generated":{"line":4461,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4460,"column":0},"generated":{"line":4462,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4461,"column":0},"generated":{"line":4463,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4462,"column":0},"generated":{"line":4464,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4463,"column":0},"generated":{"line":4465,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4464,"column":0},"generated":{"line":4466,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4465,"column":0},"generated":{"line":4467,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4466,"column":0},"generated":{"line":4468,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4467,"column":0},"generated":{"line":4469,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4468,"column":0},"generated":{"line":4470,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4469,"column":0},"generated":{"line":4471,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4470,"column":0},"generated":{"line":4472,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4471,"column":0},"generated":{"line":4473,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4472,"column":0},"generated":{"line":4474,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4473,"column":0},"generated":{"line":4475,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4474,"column":0},"generated":{"line":4476,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4475,"column":0},"generated":{"line":4477,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4476,"column":0},"generated":{"line":4478,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4477,"column":0},"generated":{"line":4479,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4478,"column":0},"generated":{"line":4480,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4479,"column":0},"generated":{"line":4481,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4480,"column":0},"generated":{"line":4482,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4481,"column":0},"generated":{"line":4483,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4482,"column":0},"generated":{"line":4484,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4483,"column":0},"generated":{"line":4485,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4484,"column":0},"generated":{"line":4486,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4485,"column":0},"generated":{"line":4487,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4486,"column":0},"generated":{"line":4488,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4487,"column":0},"generated":{"line":4489,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4488,"column":0},"generated":{"line":4490,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4489,"column":0},"generated":{"line":4491,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4490,"column":0},"generated":{"line":4492,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4491,"column":0},"generated":{"line":4493,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4492,"column":0},"generated":{"line":4494,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4493,"column":0},"generated":{"line":4495,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4494,"column":0},"generated":{"line":4496,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4495,"column":0},"generated":{"line":4497,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4496,"column":0},"generated":{"line":4498,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4497,"column":0},"generated":{"line":4499,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4498,"column":0},"generated":{"line":4500,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4499,"column":0},"generated":{"line":4501,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4500,"column":0},"generated":{"line":4502,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4501,"column":0},"generated":{"line":4503,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4502,"column":0},"generated":{"line":4504,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4503,"column":0},"generated":{"line":4505,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4504,"column":0},"generated":{"line":4506,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4505,"column":0},"generated":{"line":4507,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4506,"column":0},"generated":{"line":4508,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4507,"column":0},"generated":{"line":4509,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4508,"column":0},"generated":{"line":4510,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4509,"column":0},"generated":{"line":4511,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4510,"column":0},"generated":{"line":4512,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4511,"column":0},"generated":{"line":4513,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4512,"column":0},"generated":{"line":4514,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4513,"column":0},"generated":{"line":4515,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4514,"column":0},"generated":{"line":4516,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4515,"column":0},"generated":{"line":4517,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4516,"column":0},"generated":{"line":4518,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4517,"column":0},"generated":{"line":4519,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4518,"column":0},"generated":{"line":4520,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4519,"column":0},"generated":{"line":4521,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4520,"column":0},"generated":{"line":4522,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4521,"column":0},"generated":{"line":4523,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4522,"column":0},"generated":{"line":4524,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4523,"column":0},"generated":{"line":4525,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4524,"column":0},"generated":{"line":4526,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4525,"column":0},"generated":{"line":4527,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4526,"column":0},"generated":{"line":4528,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4527,"column":0},"generated":{"line":4529,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4528,"column":0},"generated":{"line":4530,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4529,"column":0},"generated":{"line":4531,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4530,"column":0},"generated":{"line":4532,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4531,"column":0},"generated":{"line":4533,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4532,"column":0},"generated":{"line":4534,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4533,"column":0},"generated":{"line":4535,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4534,"column":0},"generated":{"line":4536,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4535,"column":0},"generated":{"line":4537,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4536,"column":0},"generated":{"line":4538,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4537,"column":0},"generated":{"line":4539,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4538,"column":0},"generated":{"line":4540,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4539,"column":0},"generated":{"line":4541,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4540,"column":0},"generated":{"line":4542,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4541,"column":0},"generated":{"line":4543,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4542,"column":0},"generated":{"line":4544,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4543,"column":0},"generated":{"line":4545,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4544,"column":0},"generated":{"line":4546,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4545,"column":0},"generated":{"line":4547,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4546,"column":0},"generated":{"line":4548,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4547,"column":0},"generated":{"line":4549,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4548,"column":0},"generated":{"line":4550,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4549,"column":0},"generated":{"line":4551,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4550,"column":0},"generated":{"line":4552,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4551,"column":0},"generated":{"line":4553,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4552,"column":0},"generated":{"line":4554,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4553,"column":0},"generated":{"line":4555,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4554,"column":0},"generated":{"line":4556,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4555,"column":0},"generated":{"line":4557,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4556,"column":0},"generated":{"line":4558,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4557,"column":0},"generated":{"line":4559,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4558,"column":0},"generated":{"line":4560,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4559,"column":0},"generated":{"line":4561,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4560,"column":0},"generated":{"line":4562,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4561,"column":0},"generated":{"line":4563,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4562,"column":0},"generated":{"line":4564,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4563,"column":0},"generated":{"line":4565,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4564,"column":0},"generated":{"line":4566,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4565,"column":0},"generated":{"line":4567,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4566,"column":0},"generated":{"line":4568,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4567,"column":0},"generated":{"line":4569,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4568,"column":0},"generated":{"line":4570,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4569,"column":0},"generated":{"line":4571,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4570,"column":0},"generated":{"line":4572,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4571,"column":0},"generated":{"line":4573,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4572,"column":0},"generated":{"line":4574,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4573,"column":0},"generated":{"line":4575,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4574,"column":0},"generated":{"line":4576,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4575,"column":0},"generated":{"line":4577,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4576,"column":0},"generated":{"line":4578,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4577,"column":0},"generated":{"line":4579,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4578,"column":0},"generated":{"line":4580,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4579,"column":0},"generated":{"line":4581,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4580,"column":0},"generated":{"line":4582,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4581,"column":0},"generated":{"line":4583,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4582,"column":0},"generated":{"line":4584,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4583,"column":0},"generated":{"line":4585,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4584,"column":0},"generated":{"line":4586,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4585,"column":0},"generated":{"line":4587,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4586,"column":0},"generated":{"line":4588,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4587,"column":0},"generated":{"line":4589,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4588,"column":0},"generated":{"line":4590,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4589,"column":0},"generated":{"line":4591,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4590,"column":0},"generated":{"line":4592,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4591,"column":0},"generated":{"line":4593,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4592,"column":0},"generated":{"line":4594,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4593,"column":0},"generated":{"line":4595,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4594,"column":0},"generated":{"line":4596,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4595,"column":0},"generated":{"line":4597,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4596,"column":0},"generated":{"line":4598,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4597,"column":0},"generated":{"line":4599,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4598,"column":0},"generated":{"line":4600,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4599,"column":0},"generated":{"line":4601,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4600,"column":0},"generated":{"line":4602,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4601,"column":0},"generated":{"line":4603,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4602,"column":0},"generated":{"line":4604,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4603,"column":0},"generated":{"line":4605,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4604,"column":0},"generated":{"line":4606,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4605,"column":0},"generated":{"line":4607,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4606,"column":0},"generated":{"line":4608,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4607,"column":0},"generated":{"line":4609,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4608,"column":0},"generated":{"line":4610,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4609,"column":0},"generated":{"line":4611,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4610,"column":0},"generated":{"line":4612,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4611,"column":0},"generated":{"line":4613,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4612,"column":0},"generated":{"line":4614,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4613,"column":0},"generated":{"line":4615,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4614,"column":0},"generated":{"line":4616,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4615,"column":0},"generated":{"line":4617,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4616,"column":0},"generated":{"line":4618,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4617,"column":0},"generated":{"line":4619,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4618,"column":0},"generated":{"line":4620,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4619,"column":0},"generated":{"line":4621,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4620,"column":0},"generated":{"line":4622,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4621,"column":0},"generated":{"line":4623,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4622,"column":0},"generated":{"line":4624,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4623,"column":0},"generated":{"line":4625,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4624,"column":0},"generated":{"line":4626,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4625,"column":0},"generated":{"line":4627,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4626,"column":0},"generated":{"line":4628,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4627,"column":0},"generated":{"line":4629,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4628,"column":0},"generated":{"line":4630,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4629,"column":0},"generated":{"line":4631,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4630,"column":0},"generated":{"line":4632,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4631,"column":0},"generated":{"line":4633,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4632,"column":0},"generated":{"line":4634,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4633,"column":0},"generated":{"line":4635,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4634,"column":0},"generated":{"line":4636,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4635,"column":0},"generated":{"line":4637,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4636,"column":0},"generated":{"line":4638,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4637,"column":0},"generated":{"line":4639,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4638,"column":0},"generated":{"line":4640,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4639,"column":0},"generated":{"line":4641,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4640,"column":0},"generated":{"line":4642,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4641,"column":0},"generated":{"line":4643,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4642,"column":0},"generated":{"line":4644,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4643,"column":0},"generated":{"line":4645,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4644,"column":0},"generated":{"line":4646,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4645,"column":0},"generated":{"line":4647,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4646,"column":0},"generated":{"line":4648,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4647,"column":0},"generated":{"line":4649,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4648,"column":0},"generated":{"line":4650,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4649,"column":0},"generated":{"line":4651,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4650,"column":0},"generated":{"line":4652,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4651,"column":0},"generated":{"line":4653,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4652,"column":0},"generated":{"line":4654,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4653,"column":0},"generated":{"line":4655,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4654,"column":0},"generated":{"line":4656,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4655,"column":0},"generated":{"line":4657,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4656,"column":0},"generated":{"line":4658,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4657,"column":0},"generated":{"line":4659,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4658,"column":0},"generated":{"line":4660,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4659,"column":0},"generated":{"line":4661,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4660,"column":0},"generated":{"line":4662,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4661,"column":0},"generated":{"line":4663,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4662,"column":0},"generated":{"line":4664,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4663,"column":0},"generated":{"line":4665,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4664,"column":0},"generated":{"line":4666,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4665,"column":0},"generated":{"line":4667,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4666,"column":0},"generated":{"line":4668,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4667,"column":0},"generated":{"line":4669,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4668,"column":0},"generated":{"line":4670,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4669,"column":0},"generated":{"line":4671,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4670,"column":0},"generated":{"line":4672,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4671,"column":0},"generated":{"line":4673,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4672,"column":0},"generated":{"line":4674,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4673,"column":0},"generated":{"line":4675,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4674,"column":0},"generated":{"line":4676,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4675,"column":0},"generated":{"line":4677,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4676,"column":0},"generated":{"line":4678,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4677,"column":0},"generated":{"line":4679,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4678,"column":0},"generated":{"line":4680,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4679,"column":0},"generated":{"line":4681,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4680,"column":0},"generated":{"line":4682,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4681,"column":0},"generated":{"line":4683,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4682,"column":0},"generated":{"line":4684,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4683,"column":0},"generated":{"line":4685,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4684,"column":0},"generated":{"line":4686,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4685,"column":0},"generated":{"line":4687,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4686,"column":0},"generated":{"line":4688,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4687,"column":0},"generated":{"line":4689,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4688,"column":0},"generated":{"line":4690,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4689,"column":0},"generated":{"line":4691,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4690,"column":0},"generated":{"line":4692,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4691,"column":0},"generated":{"line":4693,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4692,"column":0},"generated":{"line":4694,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4693,"column":0},"generated":{"line":4695,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4694,"column":0},"generated":{"line":4696,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4695,"column":0},"generated":{"line":4697,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4696,"column":0},"generated":{"line":4698,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4697,"column":0},"generated":{"line":4699,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4698,"column":0},"generated":{"line":4700,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4699,"column":0},"generated":{"line":4701,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4700,"column":0},"generated":{"line":4702,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4701,"column":0},"generated":{"line":4703,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4702,"column":0},"generated":{"line":4704,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4703,"column":0},"generated":{"line":4705,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4704,"column":0},"generated":{"line":4706,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4705,"column":0},"generated":{"line":4707,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4706,"column":0},"generated":{"line":4708,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4707,"column":0},"generated":{"line":4709,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4708,"column":0},"generated":{"line":4710,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4709,"column":0},"generated":{"line":4711,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4710,"column":0},"generated":{"line":4712,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4711,"column":0},"generated":{"line":4713,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4712,"column":0},"generated":{"line":4714,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4713,"column":0},"generated":{"line":4715,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4714,"column":0},"generated":{"line":4716,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4715,"column":0},"generated":{"line":4717,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4716,"column":0},"generated":{"line":4718,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4717,"column":0},"generated":{"line":4719,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4718,"column":0},"generated":{"line":4720,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4719,"column":0},"generated":{"line":4721,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4720,"column":0},"generated":{"line":4722,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4721,"column":0},"generated":{"line":4723,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4722,"column":0},"generated":{"line":4724,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4723,"column":0},"generated":{"line":4725,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4724,"column":0},"generated":{"line":4726,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4725,"column":0},"generated":{"line":4727,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4726,"column":0},"generated":{"line":4728,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4727,"column":0},"generated":{"line":4729,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4728,"column":0},"generated":{"line":4730,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4729,"column":0},"generated":{"line":4731,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4730,"column":0},"generated":{"line":4732,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4731,"column":0},"generated":{"line":4733,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4732,"column":0},"generated":{"line":4734,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4733,"column":0},"generated":{"line":4735,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4734,"column":0},"generated":{"line":4736,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4735,"column":0},"generated":{"line":4737,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4736,"column":0},"generated":{"line":4738,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4737,"column":0},"generated":{"line":4739,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4738,"column":0},"generated":{"line":4740,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4739,"column":0},"generated":{"line":4741,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4740,"column":0},"generated":{"line":4742,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4741,"column":0},"generated":{"line":4743,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4742,"column":0},"generated":{"line":4744,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4743,"column":0},"generated":{"line":4745,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4744,"column":0},"generated":{"line":4746,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4745,"column":0},"generated":{"line":4747,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4746,"column":0},"generated":{"line":4748,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4747,"column":0},"generated":{"line":4749,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4748,"column":0},"generated":{"line":4750,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4749,"column":0},"generated":{"line":4751,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4750,"column":0},"generated":{"line":4752,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4751,"column":0},"generated":{"line":4753,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4752,"column":0},"generated":{"line":4754,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4753,"column":0},"generated":{"line":4755,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4754,"column":0},"generated":{"line":4756,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4755,"column":0},"generated":{"line":4757,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4756,"column":0},"generated":{"line":4758,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4757,"column":0},"generated":{"line":4759,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4758,"column":0},"generated":{"line":4760,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4759,"column":0},"generated":{"line":4761,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4760,"column":0},"generated":{"line":4762,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4761,"column":0},"generated":{"line":4763,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4762,"column":0},"generated":{"line":4764,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4763,"column":0},"generated":{"line":4765,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4764,"column":0},"generated":{"line":4766,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4765,"column":0},"generated":{"line":4767,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4766,"column":0},"generated":{"line":4768,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4767,"column":0},"generated":{"line":4769,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4768,"column":0},"generated":{"line":4770,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4769,"column":0},"generated":{"line":4771,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4770,"column":0},"generated":{"line":4772,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4771,"column":0},"generated":{"line":4773,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4772,"column":0},"generated":{"line":4774,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4773,"column":0},"generated":{"line":4775,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4774,"column":0},"generated":{"line":4776,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4775,"column":0},"generated":{"line":4777,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4776,"column":0},"generated":{"line":4778,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4777,"column":0},"generated":{"line":4779,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4778,"column":0},"generated":{"line":4780,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4779,"column":0},"generated":{"line":4781,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4780,"column":0},"generated":{"line":4782,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4781,"column":0},"generated":{"line":4783,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4782,"column":0},"generated":{"line":4784,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4783,"column":0},"generated":{"line":4785,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4784,"column":0},"generated":{"line":4786,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4785,"column":0},"generated":{"line":4787,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4786,"column":0},"generated":{"line":4788,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4787,"column":0},"generated":{"line":4789,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4788,"column":0},"generated":{"line":4790,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4789,"column":0},"generated":{"line":4791,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4790,"column":0},"generated":{"line":4792,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4791,"column":0},"generated":{"line":4793,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4792,"column":0},"generated":{"line":4794,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4793,"column":0},"generated":{"line":4795,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4794,"column":0},"generated":{"line":4796,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4795,"column":0},"generated":{"line":4797,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4796,"column":0},"generated":{"line":4798,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4797,"column":0},"generated":{"line":4799,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4798,"column":0},"generated":{"line":4800,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4799,"column":0},"generated":{"line":4801,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4800,"column":0},"generated":{"line":4802,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4801,"column":0},"generated":{"line":4803,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4802,"column":0},"generated":{"line":4804,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4803,"column":0},"generated":{"line":4805,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4804,"column":0},"generated":{"line":4806,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4805,"column":0},"generated":{"line":4807,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4806,"column":0},"generated":{"line":4808,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4807,"column":0},"generated":{"line":4809,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4808,"column":0},"generated":{"line":4810,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4809,"column":0},"generated":{"line":4811,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4810,"column":0},"generated":{"line":4812,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4811,"column":0},"generated":{"line":4813,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4812,"column":0},"generated":{"line":4814,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4813,"column":0},"generated":{"line":4815,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4814,"column":0},"generated":{"line":4816,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4815,"column":0},"generated":{"line":4817,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4816,"column":0},"generated":{"line":4818,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4817,"column":0},"generated":{"line":4819,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4818,"column":0},"generated":{"line":4820,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4819,"column":0},"generated":{"line":4821,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4820,"column":0},"generated":{"line":4822,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4821,"column":0},"generated":{"line":4823,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4822,"column":0},"generated":{"line":4824,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4823,"column":0},"generated":{"line":4825,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4824,"column":0},"generated":{"line":4826,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4825,"column":0},"generated":{"line":4827,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4826,"column":0},"generated":{"line":4828,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4827,"column":0},"generated":{"line":4829,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4828,"column":0},"generated":{"line":4830,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4829,"column":0},"generated":{"line":4831,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4830,"column":0},"generated":{"line":4832,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4831,"column":0},"generated":{"line":4833,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4832,"column":0},"generated":{"line":4834,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4833,"column":0},"generated":{"line":4835,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4834,"column":0},"generated":{"line":4836,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4835,"column":0},"generated":{"line":4837,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4836,"column":0},"generated":{"line":4838,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4837,"column":0},"generated":{"line":4839,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4838,"column":0},"generated":{"line":4840,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4839,"column":0},"generated":{"line":4841,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4840,"column":0},"generated":{"line":4842,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4841,"column":0},"generated":{"line":4843,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4842,"column":0},"generated":{"line":4844,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4843,"column":0},"generated":{"line":4845,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4844,"column":0},"generated":{"line":4846,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4845,"column":0},"generated":{"line":4847,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4846,"column":0},"generated":{"line":4848,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4847,"column":0},"generated":{"line":4849,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4848,"column":0},"generated":{"line":4850,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4849,"column":0},"generated":{"line":4851,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4850,"column":0},"generated":{"line":4852,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4851,"column":0},"generated":{"line":4853,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4852,"column":0},"generated":{"line":4854,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4853,"column":0},"generated":{"line":4855,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4854,"column":0},"generated":{"line":4856,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4855,"column":0},"generated":{"line":4857,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4856,"column":0},"generated":{"line":4858,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4857,"column":0},"generated":{"line":4859,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4858,"column":0},"generated":{"line":4860,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4859,"column":0},"generated":{"line":4861,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4860,"column":0},"generated":{"line":4862,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4861,"column":0},"generated":{"line":4863,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4862,"column":0},"generated":{"line":4864,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4863,"column":0},"generated":{"line":4865,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4864,"column":0},"generated":{"line":4866,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4865,"column":0},"generated":{"line":4867,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4866,"column":0},"generated":{"line":4868,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4867,"column":0},"generated":{"line":4869,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4868,"column":0},"generated":{"line":4870,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4869,"column":0},"generated":{"line":4871,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4870,"column":0},"generated":{"line":4872,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4871,"column":0},"generated":{"line":4873,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4872,"column":0},"generated":{"line":4874,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4873,"column":0},"generated":{"line":4875,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4874,"column":0},"generated":{"line":4876,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4875,"column":0},"generated":{"line":4877,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4876,"column":0},"generated":{"line":4878,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4877,"column":0},"generated":{"line":4879,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4878,"column":0},"generated":{"line":4880,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4879,"column":0},"generated":{"line":4881,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4880,"column":0},"generated":{"line":4882,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4881,"column":0},"generated":{"line":4883,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4882,"column":0},"generated":{"line":4884,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4883,"column":0},"generated":{"line":4885,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4884,"column":0},"generated":{"line":4886,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4885,"column":0},"generated":{"line":4887,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4886,"column":0},"generated":{"line":4888,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4887,"column":0},"generated":{"line":4889,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4888,"column":0},"generated":{"line":4890,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4889,"column":0},"generated":{"line":4891,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4890,"column":0},"generated":{"line":4892,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4891,"column":0},"generated":{"line":4893,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4892,"column":0},"generated":{"line":4894,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4893,"column":0},"generated":{"line":4895,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4894,"column":0},"generated":{"line":4896,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4895,"column":0},"generated":{"line":4897,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4896,"column":0},"generated":{"line":4898,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4897,"column":0},"generated":{"line":4899,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4898,"column":0},"generated":{"line":4900,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4899,"column":0},"generated":{"line":4901,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4900,"column":0},"generated":{"line":4902,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4901,"column":0},"generated":{"line":4903,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4902,"column":0},"generated":{"line":4904,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4903,"column":0},"generated":{"line":4905,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4904,"column":0},"generated":{"line":4906,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4905,"column":0},"generated":{"line":4907,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4906,"column":0},"generated":{"line":4908,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4907,"column":0},"generated":{"line":4909,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4908,"column":0},"generated":{"line":4910,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4909,"column":0},"generated":{"line":4911,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4910,"column":0},"generated":{"line":4912,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4911,"column":0},"generated":{"line":4913,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4912,"column":0},"generated":{"line":4914,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4913,"column":0},"generated":{"line":4915,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4914,"column":0},"generated":{"line":4916,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4915,"column":0},"generated":{"line":4917,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4916,"column":0},"generated":{"line":4918,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4917,"column":0},"generated":{"line":4919,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4918,"column":0},"generated":{"line":4920,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4919,"column":0},"generated":{"line":4921,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4920,"column":0},"generated":{"line":4922,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4921,"column":0},"generated":{"line":4923,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4922,"column":0},"generated":{"line":4924,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4923,"column":0},"generated":{"line":4925,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4924,"column":0},"generated":{"line":4926,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4925,"column":0},"generated":{"line":4927,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4926,"column":0},"generated":{"line":4928,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4927,"column":0},"generated":{"line":4929,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4928,"column":0},"generated":{"line":4930,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4929,"column":0},"generated":{"line":4931,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4930,"column":0},"generated":{"line":4932,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4931,"column":0},"generated":{"line":4933,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4932,"column":0},"generated":{"line":4934,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4933,"column":0},"generated":{"line":4935,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4934,"column":0},"generated":{"line":4936,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4935,"column":0},"generated":{"line":4937,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4936,"column":0},"generated":{"line":4938,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4937,"column":0},"generated":{"line":4939,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4938,"column":0},"generated":{"line":4940,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4939,"column":0},"generated":{"line":4941,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4940,"column":0},"generated":{"line":4942,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4941,"column":0},"generated":{"line":4943,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4942,"column":0},"generated":{"line":4944,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4943,"column":0},"generated":{"line":4945,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4944,"column":0},"generated":{"line":4946,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4945,"column":0},"generated":{"line":4947,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4946,"column":0},"generated":{"line":4948,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4947,"column":0},"generated":{"line":4949,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4948,"column":0},"generated":{"line":4950,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4949,"column":0},"generated":{"line":4951,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4950,"column":0},"generated":{"line":4952,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4951,"column":0},"generated":{"line":4953,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4952,"column":0},"generated":{"line":4954,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4953,"column":0},"generated":{"line":4955,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4954,"column":0},"generated":{"line":4956,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4955,"column":0},"generated":{"line":4957,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4956,"column":0},"generated":{"line":4958,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4957,"column":0},"generated":{"line":4959,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4958,"column":0},"generated":{"line":4960,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4959,"column":0},"generated":{"line":4961,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4960,"column":0},"generated":{"line":4962,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4961,"column":0},"generated":{"line":4963,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4962,"column":0},"generated":{"line":4964,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4963,"column":0},"generated":{"line":4965,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4964,"column":0},"generated":{"line":4966,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4965,"column":0},"generated":{"line":4967,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4966,"column":0},"generated":{"line":4968,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4967,"column":0},"generated":{"line":4969,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4968,"column":0},"generated":{"line":4970,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4969,"column":0},"generated":{"line":4971,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4970,"column":0},"generated":{"line":4972,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4971,"column":0},"generated":{"line":4973,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4972,"column":0},"generated":{"line":4974,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4973,"column":0},"generated":{"line":4975,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4974,"column":0},"generated":{"line":4976,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4975,"column":0},"generated":{"line":4977,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4976,"column":0},"generated":{"line":4978,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4977,"column":0},"generated":{"line":4979,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4978,"column":0},"generated":{"line":4980,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4979,"column":0},"generated":{"line":4981,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4980,"column":0},"generated":{"line":4982,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4981,"column":0},"generated":{"line":4983,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4982,"column":0},"generated":{"line":4984,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4983,"column":0},"generated":{"line":4985,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4984,"column":0},"generated":{"line":4986,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4985,"column":0},"generated":{"line":4987,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4986,"column":0},"generated":{"line":4988,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4987,"column":0},"generated":{"line":4989,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4988,"column":0},"generated":{"line":4990,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4989,"column":0},"generated":{"line":4991,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4990,"column":0},"generated":{"line":4992,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4991,"column":0},"generated":{"line":4993,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4992,"column":0},"generated":{"line":4994,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4993,"column":0},"generated":{"line":4995,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4994,"column":0},"generated":{"line":4996,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4995,"column":0},"generated":{"line":4997,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4996,"column":0},"generated":{"line":4998,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4997,"column":0},"generated":{"line":4999,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4998,"column":0},"generated":{"line":5000,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":4999,"column":0},"generated":{"line":5001,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5000,"column":0},"generated":{"line":5002,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5001,"column":0},"generated":{"line":5003,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5002,"column":0},"generated":{"line":5004,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5003,"column":0},"generated":{"line":5005,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5004,"column":0},"generated":{"line":5006,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5005,"column":0},"generated":{"line":5007,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5006,"column":0},"generated":{"line":5008,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5007,"column":0},"generated":{"line":5009,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5008,"column":0},"generated":{"line":5010,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5009,"column":0},"generated":{"line":5011,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5010,"column":0},"generated":{"line":5012,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5011,"column":0},"generated":{"line":5013,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5012,"column":0},"generated":{"line":5014,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5013,"column":0},"generated":{"line":5015,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5014,"column":0},"generated":{"line":5016,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5015,"column":0},"generated":{"line":5017,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5016,"column":0},"generated":{"line":5018,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5017,"column":0},"generated":{"line":5019,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5018,"column":0},"generated":{"line":5020,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5019,"column":0},"generated":{"line":5021,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5020,"column":0},"generated":{"line":5022,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5021,"column":0},"generated":{"line":5023,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5022,"column":0},"generated":{"line":5024,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5023,"column":0},"generated":{"line":5025,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5024,"column":0},"generated":{"line":5026,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5025,"column":0},"generated":{"line":5027,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5026,"column":0},"generated":{"line":5028,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5027,"column":0},"generated":{"line":5029,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5028,"column":0},"generated":{"line":5030,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5029,"column":0},"generated":{"line":5031,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5030,"column":0},"generated":{"line":5032,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5031,"column":0},"generated":{"line":5033,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5032,"column":0},"generated":{"line":5034,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5033,"column":0},"generated":{"line":5035,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5034,"column":0},"generated":{"line":5036,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5035,"column":0},"generated":{"line":5037,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5036,"column":0},"generated":{"line":5038,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5037,"column":0},"generated":{"line":5039,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5038,"column":0},"generated":{"line":5040,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5039,"column":0},"generated":{"line":5041,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5040,"column":0},"generated":{"line":5042,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5041,"column":0},"generated":{"line":5043,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5042,"column":0},"generated":{"line":5044,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5043,"column":0},"generated":{"line":5045,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5044,"column":0},"generated":{"line":5046,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5045,"column":0},"generated":{"line":5047,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5046,"column":0},"generated":{"line":5048,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5047,"column":0},"generated":{"line":5049,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5048,"column":0},"generated":{"line":5050,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5049,"column":0},"generated":{"line":5051,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5050,"column":0},"generated":{"line":5052,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5051,"column":0},"generated":{"line":5053,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5052,"column":0},"generated":{"line":5054,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5053,"column":0},"generated":{"line":5055,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5054,"column":0},"generated":{"line":5056,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5055,"column":0},"generated":{"line":5057,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5056,"column":0},"generated":{"line":5058,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5057,"column":0},"generated":{"line":5059,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5058,"column":0},"generated":{"line":5060,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5059,"column":0},"generated":{"line":5061,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5060,"column":0},"generated":{"line":5062,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5061,"column":0},"generated":{"line":5063,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5062,"column":0},"generated":{"line":5064,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5063,"column":0},"generated":{"line":5065,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5064,"column":0},"generated":{"line":5066,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5065,"column":0},"generated":{"line":5067,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5066,"column":0},"generated":{"line":5068,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5067,"column":0},"generated":{"line":5069,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5068,"column":0},"generated":{"line":5070,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5069,"column":0},"generated":{"line":5071,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5070,"column":0},"generated":{"line":5072,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5071,"column":0},"generated":{"line":5073,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5072,"column":0},"generated":{"line":5074,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5073,"column":0},"generated":{"line":5075,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5074,"column":0},"generated":{"line":5076,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5075,"column":0},"generated":{"line":5077,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5076,"column":0},"generated":{"line":5078,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5077,"column":0},"generated":{"line":5079,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5078,"column":0},"generated":{"line":5080,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5079,"column":0},"generated":{"line":5081,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5080,"column":0},"generated":{"line":5082,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5081,"column":0},"generated":{"line":5083,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5082,"column":0},"generated":{"line":5084,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5083,"column":0},"generated":{"line":5085,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5084,"column":0},"generated":{"line":5086,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5085,"column":0},"generated":{"line":5087,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5086,"column":0},"generated":{"line":5088,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5087,"column":0},"generated":{"line":5089,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5088,"column":0},"generated":{"line":5090,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5089,"column":0},"generated":{"line":5091,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5090,"column":0},"generated":{"line":5092,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5091,"column":0},"generated":{"line":5093,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5092,"column":0},"generated":{"line":5094,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5093,"column":0},"generated":{"line":5095,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5094,"column":0},"generated":{"line":5096,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5095,"column":0},"generated":{"line":5097,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5096,"column":0},"generated":{"line":5098,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5097,"column":0},"generated":{"line":5099,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5098,"column":0},"generated":{"line":5100,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5099,"column":0},"generated":{"line":5101,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5100,"column":0},"generated":{"line":5102,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5101,"column":0},"generated":{"line":5103,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5102,"column":0},"generated":{"line":5104,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5103,"column":0},"generated":{"line":5105,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5104,"column":0},"generated":{"line":5106,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5105,"column":0},"generated":{"line":5107,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5106,"column":0},"generated":{"line":5108,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5107,"column":0},"generated":{"line":5109,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5108,"column":0},"generated":{"line":5110,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5109,"column":0},"generated":{"line":5111,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5110,"column":0},"generated":{"line":5112,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5111,"column":0},"generated":{"line":5113,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5112,"column":0},"generated":{"line":5114,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5113,"column":0},"generated":{"line":5115,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5114,"column":0},"generated":{"line":5116,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5115,"column":0},"generated":{"line":5117,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5116,"column":0},"generated":{"line":5118,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5117,"column":0},"generated":{"line":5119,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5118,"column":0},"generated":{"line":5120,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5119,"column":0},"generated":{"line":5121,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5120,"column":0},"generated":{"line":5122,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5121,"column":0},"generated":{"line":5123,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5122,"column":0},"generated":{"line":5124,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5123,"column":0},"generated":{"line":5125,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5124,"column":0},"generated":{"line":5126,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5125,"column":0},"generated":{"line":5127,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5126,"column":0},"generated":{"line":5128,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5127,"column":0},"generated":{"line":5129,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5128,"column":0},"generated":{"line":5130,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5129,"column":0},"generated":{"line":5131,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5130,"column":0},"generated":{"line":5132,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5131,"column":0},"generated":{"line":5133,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5132,"column":0},"generated":{"line":5134,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5133,"column":0},"generated":{"line":5135,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5134,"column":0},"generated":{"line":5136,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5135,"column":0},"generated":{"line":5137,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5136,"column":0},"generated":{"line":5138,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5137,"column":0},"generated":{"line":5139,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5138,"column":0},"generated":{"line":5140,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5139,"column":0},"generated":{"line":5141,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5140,"column":0},"generated":{"line":5142,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5141,"column":0},"generated":{"line":5143,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5142,"column":0},"generated":{"line":5144,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5143,"column":0},"generated":{"line":5145,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5144,"column":0},"generated":{"line":5146,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5145,"column":0},"generated":{"line":5147,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5146,"column":0},"generated":{"line":5148,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5147,"column":0},"generated":{"line":5149,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5148,"column":0},"generated":{"line":5150,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5149,"column":0},"generated":{"line":5151,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5150,"column":0},"generated":{"line":5152,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5151,"column":0},"generated":{"line":5153,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5152,"column":0},"generated":{"line":5154,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5153,"column":0},"generated":{"line":5155,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5154,"column":0},"generated":{"line":5156,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5155,"column":0},"generated":{"line":5157,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5156,"column":0},"generated":{"line":5158,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5157,"column":0},"generated":{"line":5159,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5158,"column":0},"generated":{"line":5160,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5159,"column":0},"generated":{"line":5161,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5160,"column":0},"generated":{"line":5162,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5161,"column":0},"generated":{"line":5163,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5162,"column":0},"generated":{"line":5164,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5163,"column":0},"generated":{"line":5165,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5164,"column":0},"generated":{"line":5166,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5165,"column":0},"generated":{"line":5167,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5166,"column":0},"generated":{"line":5168,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5167,"column":0},"generated":{"line":5169,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5168,"column":0},"generated":{"line":5170,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5169,"column":0},"generated":{"line":5171,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5170,"column":0},"generated":{"line":5172,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5171,"column":0},"generated":{"line":5173,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5172,"column":0},"generated":{"line":5174,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5173,"column":0},"generated":{"line":5175,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5174,"column":0},"generated":{"line":5176,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5175,"column":0},"generated":{"line":5177,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5176,"column":0},"generated":{"line":5178,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5177,"column":0},"generated":{"line":5179,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5178,"column":0},"generated":{"line":5180,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5179,"column":0},"generated":{"line":5181,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5180,"column":0},"generated":{"line":5182,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5181,"column":0},"generated":{"line":5183,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5182,"column":0},"generated":{"line":5184,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5183,"column":0},"generated":{"line":5185,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5184,"column":0},"generated":{"line":5186,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5185,"column":0},"generated":{"line":5187,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5186,"column":0},"generated":{"line":5188,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5187,"column":0},"generated":{"line":5189,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5188,"column":0},"generated":{"line":5190,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5189,"column":0},"generated":{"line":5191,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5190,"column":0},"generated":{"line":5192,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5191,"column":0},"generated":{"line":5193,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5192,"column":0},"generated":{"line":5194,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5193,"column":0},"generated":{"line":5195,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5194,"column":0},"generated":{"line":5196,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5195,"column":0},"generated":{"line":5197,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5196,"column":0},"generated":{"line":5198,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5197,"column":0},"generated":{"line":5199,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5198,"column":0},"generated":{"line":5200,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5199,"column":0},"generated":{"line":5201,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5200,"column":0},"generated":{"line":5202,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5201,"column":0},"generated":{"line":5203,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5202,"column":0},"generated":{"line":5204,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5203,"column":0},"generated":{"line":5205,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5204,"column":0},"generated":{"line":5206,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5205,"column":0},"generated":{"line":5207,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5206,"column":0},"generated":{"line":5208,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5207,"column":0},"generated":{"line":5209,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5208,"column":0},"generated":{"line":5210,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5209,"column":0},"generated":{"line":5211,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5210,"column":0},"generated":{"line":5212,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5211,"column":0},"generated":{"line":5213,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5212,"column":0},"generated":{"line":5214,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5213,"column":0},"generated":{"line":5215,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5214,"column":0},"generated":{"line":5216,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5215,"column":0},"generated":{"line":5217,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5216,"column":0},"generated":{"line":5218,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5217,"column":0},"generated":{"line":5219,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5218,"column":0},"generated":{"line":5220,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5219,"column":0},"generated":{"line":5221,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5220,"column":0},"generated":{"line":5222,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5221,"column":0},"generated":{"line":5223,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5222,"column":0},"generated":{"line":5224,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5223,"column":0},"generated":{"line":5225,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5224,"column":0},"generated":{"line":5226,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5225,"column":0},"generated":{"line":5227,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5226,"column":0},"generated":{"line":5228,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5227,"column":0},"generated":{"line":5229,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5228,"column":0},"generated":{"line":5230,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5229,"column":0},"generated":{"line":5231,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5230,"column":0},"generated":{"line":5232,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5231,"column":0},"generated":{"line":5233,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5232,"column":0},"generated":{"line":5234,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5233,"column":0},"generated":{"line":5235,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5234,"column":0},"generated":{"line":5236,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5235,"column":0},"generated":{"line":5237,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5236,"column":0},"generated":{"line":5238,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5237,"column":0},"generated":{"line":5239,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5238,"column":0},"generated":{"line":5240,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5239,"column":0},"generated":{"line":5241,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5240,"column":0},"generated":{"line":5242,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5241,"column":0},"generated":{"line":5243,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5242,"column":0},"generated":{"line":5244,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5243,"column":0},"generated":{"line":5245,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5244,"column":0},"generated":{"line":5246,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5245,"column":0},"generated":{"line":5247,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5246,"column":0},"generated":{"line":5248,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5247,"column":0},"generated":{"line":5249,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5248,"column":0},"generated":{"line":5250,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5249,"column":0},"generated":{"line":5251,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5250,"column":0},"generated":{"line":5252,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5251,"column":0},"generated":{"line":5253,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5252,"column":0},"generated":{"line":5254,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5253,"column":0},"generated":{"line":5255,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5254,"column":0},"generated":{"line":5256,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5255,"column":0},"generated":{"line":5257,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5256,"column":0},"generated":{"line":5258,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5257,"column":0},"generated":{"line":5259,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5258,"column":0},"generated":{"line":5260,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5259,"column":0},"generated":{"line":5261,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5260,"column":0},"generated":{"line":5262,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5261,"column":0},"generated":{"line":5263,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5262,"column":0},"generated":{"line":5264,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5263,"column":0},"generated":{"line":5265,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5264,"column":0},"generated":{"line":5266,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5265,"column":0},"generated":{"line":5267,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5266,"column":0},"generated":{"line":5268,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5267,"column":0},"generated":{"line":5269,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5268,"column":0},"generated":{"line":5270,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5269,"column":0},"generated":{"line":5271,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5270,"column":0},"generated":{"line":5272,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5271,"column":0},"generated":{"line":5273,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5272,"column":0},"generated":{"line":5274,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5273,"column":0},"generated":{"line":5275,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5274,"column":0},"generated":{"line":5276,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5275,"column":0},"generated":{"line":5277,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5276,"column":0},"generated":{"line":5278,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5277,"column":0},"generated":{"line":5279,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5278,"column":0},"generated":{"line":5280,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5279,"column":0},"generated":{"line":5281,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5280,"column":0},"generated":{"line":5282,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5281,"column":0},"generated":{"line":5283,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5282,"column":0},"generated":{"line":5284,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5283,"column":0},"generated":{"line":5285,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5284,"column":0},"generated":{"line":5286,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5285,"column":0},"generated":{"line":5287,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5286,"column":0},"generated":{"line":5288,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5287,"column":0},"generated":{"line":5289,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5288,"column":0},"generated":{"line":5290,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5289,"column":0},"generated":{"line":5291,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5290,"column":0},"generated":{"line":5292,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5291,"column":0},"generated":{"line":5293,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5292,"column":0},"generated":{"line":5294,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5293,"column":0},"generated":{"line":5295,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5294,"column":0},"generated":{"line":5296,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5295,"column":0},"generated":{"line":5297,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5296,"column":0},"generated":{"line":5298,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5297,"column":0},"generated":{"line":5299,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5298,"column":0},"generated":{"line":5300,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5299,"column":0},"generated":{"line":5301,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5300,"column":0},"generated":{"line":5302,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5301,"column":0},"generated":{"line":5303,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5302,"column":0},"generated":{"line":5304,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5303,"column":0},"generated":{"line":5305,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5304,"column":0},"generated":{"line":5306,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5305,"column":0},"generated":{"line":5307,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5306,"column":0},"generated":{"line":5308,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5307,"column":0},"generated":{"line":5309,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5308,"column":0},"generated":{"line":5310,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5309,"column":0},"generated":{"line":5311,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5310,"column":0},"generated":{"line":5312,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5311,"column":0},"generated":{"line":5313,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5312,"column":0},"generated":{"line":5314,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5313,"column":0},"generated":{"line":5315,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5314,"column":0},"generated":{"line":5316,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5315,"column":0},"generated":{"line":5317,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5316,"column":0},"generated":{"line":5318,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5317,"column":0},"generated":{"line":5319,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5318,"column":0},"generated":{"line":5320,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5319,"column":0},"generated":{"line":5321,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5320,"column":0},"generated":{"line":5322,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5321,"column":0},"generated":{"line":5323,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5322,"column":0},"generated":{"line":5324,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5323,"column":0},"generated":{"line":5325,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5324,"column":0},"generated":{"line":5326,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5325,"column":0},"generated":{"line":5327,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5326,"column":0},"generated":{"line":5328,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5327,"column":0},"generated":{"line":5329,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5328,"column":0},"generated":{"line":5330,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5329,"column":0},"generated":{"line":5331,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5330,"column":0},"generated":{"line":5332,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5331,"column":0},"generated":{"line":5333,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5332,"column":0},"generated":{"line":5334,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5333,"column":0},"generated":{"line":5335,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5334,"column":0},"generated":{"line":5336,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5335,"column":0},"generated":{"line":5337,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5336,"column":0},"generated":{"line":5338,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5337,"column":0},"generated":{"line":5339,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5338,"column":0},"generated":{"line":5340,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5339,"column":0},"generated":{"line":5341,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5340,"column":0},"generated":{"line":5342,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5341,"column":0},"generated":{"line":5343,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5342,"column":0},"generated":{"line":5344,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5343,"column":0},"generated":{"line":5345,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5344,"column":0},"generated":{"line":5346,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5345,"column":0},"generated":{"line":5347,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5346,"column":0},"generated":{"line":5348,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5347,"column":0},"generated":{"line":5349,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5348,"column":0},"generated":{"line":5350,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5349,"column":0},"generated":{"line":5351,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5350,"column":0},"generated":{"line":5352,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5351,"column":0},"generated":{"line":5353,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5352,"column":0},"generated":{"line":5354,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5353,"column":0},"generated":{"line":5355,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5354,"column":0},"generated":{"line":5356,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5355,"column":0},"generated":{"line":5357,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5356,"column":0},"generated":{"line":5358,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5357,"column":0},"generated":{"line":5359,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5358,"column":0},"generated":{"line":5360,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5359,"column":0},"generated":{"line":5361,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5360,"column":0},"generated":{"line":5362,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5361,"column":0},"generated":{"line":5363,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5362,"column":0},"generated":{"line":5364,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5363,"column":0},"generated":{"line":5365,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5364,"column":0},"generated":{"line":5366,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5365,"column":0},"generated":{"line":5367,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5366,"column":0},"generated":{"line":5368,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5367,"column":0},"generated":{"line":5369,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5368,"column":0},"generated":{"line":5370,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5369,"column":0},"generated":{"line":5371,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5370,"column":0},"generated":{"line":5372,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5371,"column":0},"generated":{"line":5373,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5372,"column":0},"generated":{"line":5374,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5373,"column":0},"generated":{"line":5375,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5374,"column":0},"generated":{"line":5376,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5375,"column":0},"generated":{"line":5377,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5376,"column":0},"generated":{"line":5378,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5377,"column":0},"generated":{"line":5379,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5378,"column":0},"generated":{"line":5380,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5379,"column":0},"generated":{"line":5381,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5380,"column":0},"generated":{"line":5382,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5381,"column":0},"generated":{"line":5383,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5382,"column":0},"generated":{"line":5384,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5383,"column":0},"generated":{"line":5385,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5384,"column":0},"generated":{"line":5386,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5385,"column":0},"generated":{"line":5387,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5386,"column":0},"generated":{"line":5388,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5387,"column":0},"generated":{"line":5389,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5388,"column":0},"generated":{"line":5390,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5389,"column":0},"generated":{"line":5391,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5390,"column":0},"generated":{"line":5392,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5391,"column":0},"generated":{"line":5393,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5392,"column":0},"generated":{"line":5394,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5393,"column":0},"generated":{"line":5395,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5394,"column":0},"generated":{"line":5396,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5395,"column":0},"generated":{"line":5397,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5396,"column":0},"generated":{"line":5398,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5397,"column":0},"generated":{"line":5399,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5398,"column":0},"generated":{"line":5400,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5399,"column":0},"generated":{"line":5401,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5400,"column":0},"generated":{"line":5402,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5401,"column":0},"generated":{"line":5403,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5402,"column":0},"generated":{"line":5404,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5403,"column":0},"generated":{"line":5405,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5404,"column":0},"generated":{"line":5406,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5405,"column":0},"generated":{"line":5407,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5406,"column":0},"generated":{"line":5408,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5407,"column":0},"generated":{"line":5409,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5408,"column":0},"generated":{"line":5410,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5409,"column":0},"generated":{"line":5411,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5410,"column":0},"generated":{"line":5412,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5411,"column":0},"generated":{"line":5413,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5412,"column":0},"generated":{"line":5414,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5413,"column":0},"generated":{"line":5415,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5414,"column":0},"generated":{"line":5416,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5415,"column":0},"generated":{"line":5417,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5416,"column":0},"generated":{"line":5418,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5417,"column":0},"generated":{"line":5419,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5418,"column":0},"generated":{"line":5420,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5419,"column":0},"generated":{"line":5421,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5420,"column":0},"generated":{"line":5422,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5421,"column":0},"generated":{"line":5423,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5422,"column":0},"generated":{"line":5424,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5423,"column":0},"generated":{"line":5425,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5424,"column":0},"generated":{"line":5426,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5425,"column":0},"generated":{"line":5427,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5426,"column":0},"generated":{"line":5428,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5427,"column":0},"generated":{"line":5429,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5428,"column":0},"generated":{"line":5430,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5429,"column":0},"generated":{"line":5431,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5430,"column":0},"generated":{"line":5432,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5431,"column":0},"generated":{"line":5433,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5432,"column":0},"generated":{"line":5434,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5433,"column":0},"generated":{"line":5435,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5434,"column":0},"generated":{"line":5436,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5435,"column":0},"generated":{"line":5437,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5436,"column":0},"generated":{"line":5438,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5437,"column":0},"generated":{"line":5439,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5438,"column":0},"generated":{"line":5440,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5439,"column":0},"generated":{"line":5441,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5440,"column":0},"generated":{"line":5442,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5441,"column":0},"generated":{"line":5443,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5442,"column":0},"generated":{"line":5444,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5443,"column":0},"generated":{"line":5445,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5444,"column":0},"generated":{"line":5446,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5445,"column":0},"generated":{"line":5447,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5446,"column":0},"generated":{"line":5448,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5447,"column":0},"generated":{"line":5449,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5448,"column":0},"generated":{"line":5450,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5449,"column":0},"generated":{"line":5451,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5450,"column":0},"generated":{"line":5452,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5451,"column":0},"generated":{"line":5453,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5452,"column":0},"generated":{"line":5454,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5453,"column":0},"generated":{"line":5455,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5454,"column":0},"generated":{"line":5456,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5455,"column":0},"generated":{"line":5457,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5456,"column":0},"generated":{"line":5458,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5457,"column":0},"generated":{"line":5459,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5458,"column":0},"generated":{"line":5460,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5459,"column":0},"generated":{"line":5461,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5460,"column":0},"generated":{"line":5462,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5461,"column":0},"generated":{"line":5463,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5462,"column":0},"generated":{"line":5464,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5463,"column":0},"generated":{"line":5465,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5464,"column":0},"generated":{"line":5466,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5465,"column":0},"generated":{"line":5467,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5466,"column":0},"generated":{"line":5468,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5467,"column":0},"generated":{"line":5469,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5468,"column":0},"generated":{"line":5470,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5469,"column":0},"generated":{"line":5471,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5470,"column":0},"generated":{"line":5472,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5471,"column":0},"generated":{"line":5473,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5472,"column":0},"generated":{"line":5474,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5473,"column":0},"generated":{"line":5475,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5474,"column":0},"generated":{"line":5476,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5475,"column":0},"generated":{"line":5477,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5476,"column":0},"generated":{"line":5478,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5477,"column":0},"generated":{"line":5479,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5478,"column":0},"generated":{"line":5480,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5479,"column":0},"generated":{"line":5481,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5480,"column":0},"generated":{"line":5482,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5481,"column":0},"generated":{"line":5483,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5482,"column":0},"generated":{"line":5484,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5483,"column":0},"generated":{"line":5485,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5484,"column":0},"generated":{"line":5486,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5485,"column":0},"generated":{"line":5487,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5486,"column":0},"generated":{"line":5488,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5487,"column":0},"generated":{"line":5489,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5488,"column":0},"generated":{"line":5490,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5489,"column":0},"generated":{"line":5491,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5490,"column":0},"generated":{"line":5492,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5491,"column":0},"generated":{"line":5493,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5492,"column":0},"generated":{"line":5494,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5493,"column":0},"generated":{"line":5495,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5494,"column":0},"generated":{"line":5496,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5495,"column":0},"generated":{"line":5497,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5496,"column":0},"generated":{"line":5498,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5497,"column":0},"generated":{"line":5499,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5498,"column":0},"generated":{"line":5500,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5499,"column":0},"generated":{"line":5501,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5500,"column":0},"generated":{"line":5502,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5501,"column":0},"generated":{"line":5503,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5502,"column":0},"generated":{"line":5504,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5503,"column":0},"generated":{"line":5505,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5504,"column":0},"generated":{"line":5506,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5505,"column":0},"generated":{"line":5507,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5506,"column":0},"generated":{"line":5508,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5507,"column":0},"generated":{"line":5509,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5508,"column":0},"generated":{"line":5510,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5509,"column":0},"generated":{"line":5511,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5510,"column":0},"generated":{"line":5512,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5511,"column":0},"generated":{"line":5513,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5512,"column":0},"generated":{"line":5514,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5513,"column":0},"generated":{"line":5515,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5514,"column":0},"generated":{"line":5516,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5515,"column":0},"generated":{"line":5517,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5516,"column":0},"generated":{"line":5518,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5517,"column":0},"generated":{"line":5519,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5518,"column":0},"generated":{"line":5520,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5519,"column":0},"generated":{"line":5521,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5520,"column":0},"generated":{"line":5522,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5521,"column":0},"generated":{"line":5523,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5522,"column":0},"generated":{"line":5524,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5523,"column":0},"generated":{"line":5525,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5524,"column":0},"generated":{"line":5526,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5525,"column":0},"generated":{"line":5527,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5526,"column":0},"generated":{"line":5528,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5527,"column":0},"generated":{"line":5529,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5528,"column":0},"generated":{"line":5530,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5529,"column":0},"generated":{"line":5531,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5530,"column":0},"generated":{"line":5532,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5531,"column":0},"generated":{"line":5533,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5532,"column":0},"generated":{"line":5534,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5533,"column":0},"generated":{"line":5535,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5534,"column":0},"generated":{"line":5536,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5535,"column":0},"generated":{"line":5537,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5536,"column":0},"generated":{"line":5538,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5537,"column":0},"generated":{"line":5539,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5538,"column":0},"generated":{"line":5540,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5539,"column":0},"generated":{"line":5541,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5540,"column":0},"generated":{"line":5542,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5541,"column":0},"generated":{"line":5543,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5542,"column":0},"generated":{"line":5544,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5543,"column":0},"generated":{"line":5545,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5544,"column":0},"generated":{"line":5546,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5545,"column":0},"generated":{"line":5547,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5546,"column":0},"generated":{"line":5548,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5547,"column":0},"generated":{"line":5549,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5548,"column":0},"generated":{"line":5550,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5549,"column":0},"generated":{"line":5551,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5550,"column":0},"generated":{"line":5552,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5551,"column":0},"generated":{"line":5553,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5552,"column":0},"generated":{"line":5554,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5553,"column":0},"generated":{"line":5555,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5554,"column":0},"generated":{"line":5556,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5555,"column":0},"generated":{"line":5557,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5556,"column":0},"generated":{"line":5558,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5557,"column":0},"generated":{"line":5559,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5558,"column":0},"generated":{"line":5560,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5559,"column":0},"generated":{"line":5561,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5560,"column":0},"generated":{"line":5562,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5561,"column":0},"generated":{"line":5563,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5562,"column":0},"generated":{"line":5564,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5563,"column":0},"generated":{"line":5565,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5564,"column":0},"generated":{"line":5566,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5565,"column":0},"generated":{"line":5567,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5566,"column":0},"generated":{"line":5568,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5567,"column":0},"generated":{"line":5569,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5568,"column":0},"generated":{"line":5570,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5569,"column":0},"generated":{"line":5571,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5570,"column":0},"generated":{"line":5572,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5571,"column":0},"generated":{"line":5573,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5572,"column":0},"generated":{"line":5574,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5573,"column":0},"generated":{"line":5575,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5574,"column":0},"generated":{"line":5576,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5575,"column":0},"generated":{"line":5577,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5576,"column":0},"generated":{"line":5578,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5577,"column":0},"generated":{"line":5579,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5578,"column":0},"generated":{"line":5580,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5579,"column":0},"generated":{"line":5581,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5580,"column":0},"generated":{"line":5582,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5581,"column":0},"generated":{"line":5583,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5582,"column":0},"generated":{"line":5584,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5583,"column":0},"generated":{"line":5585,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5584,"column":0},"generated":{"line":5586,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5585,"column":0},"generated":{"line":5587,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5586,"column":0},"generated":{"line":5588,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5587,"column":0},"generated":{"line":5589,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5588,"column":0},"generated":{"line":5590,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5589,"column":0},"generated":{"line":5591,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5590,"column":0},"generated":{"line":5592,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5591,"column":0},"generated":{"line":5593,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5592,"column":0},"generated":{"line":5594,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5593,"column":0},"generated":{"line":5595,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5594,"column":0},"generated":{"line":5596,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5595,"column":0},"generated":{"line":5597,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5596,"column":0},"generated":{"line":5598,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5597,"column":0},"generated":{"line":5599,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5598,"column":0},"generated":{"line":5600,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5599,"column":0},"generated":{"line":5601,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5600,"column":0},"generated":{"line":5602,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5601,"column":0},"generated":{"line":5603,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5602,"column":0},"generated":{"line":5604,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5603,"column":0},"generated":{"line":5605,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5604,"column":0},"generated":{"line":5606,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5605,"column":0},"generated":{"line":5607,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5606,"column":0},"generated":{"line":5608,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5607,"column":0},"generated":{"line":5609,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5608,"column":0},"generated":{"line":5610,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5609,"column":0},"generated":{"line":5611,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5610,"column":0},"generated":{"line":5612,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5611,"column":0},"generated":{"line":5613,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5612,"column":0},"generated":{"line":5614,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5613,"column":0},"generated":{"line":5615,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5614,"column":0},"generated":{"line":5616,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5615,"column":0},"generated":{"line":5617,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5616,"column":0},"generated":{"line":5618,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5617,"column":0},"generated":{"line":5619,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5618,"column":0},"generated":{"line":5620,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5619,"column":0},"generated":{"line":5621,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5620,"column":0},"generated":{"line":5622,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5621,"column":0},"generated":{"line":5623,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5622,"column":0},"generated":{"line":5624,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5623,"column":0},"generated":{"line":5625,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5624,"column":0},"generated":{"line":5626,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5625,"column":0},"generated":{"line":5627,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5626,"column":0},"generated":{"line":5628,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5627,"column":0},"generated":{"line":5629,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5628,"column":0},"generated":{"line":5630,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5629,"column":0},"generated":{"line":5631,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5630,"column":0},"generated":{"line":5632,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5631,"column":0},"generated":{"line":5633,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5632,"column":0},"generated":{"line":5634,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5633,"column":0},"generated":{"line":5635,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5634,"column":0},"generated":{"line":5636,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5635,"column":0},"generated":{"line":5637,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5636,"column":0},"generated":{"line":5638,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5637,"column":0},"generated":{"line":5639,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5638,"column":0},"generated":{"line":5640,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5639,"column":0},"generated":{"line":5641,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5640,"column":0},"generated":{"line":5642,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5641,"column":0},"generated":{"line":5643,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5642,"column":0},"generated":{"line":5644,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5643,"column":0},"generated":{"line":5645,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5644,"column":0},"generated":{"line":5646,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5645,"column":0},"generated":{"line":5647,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5646,"column":0},"generated":{"line":5648,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5647,"column":0},"generated":{"line":5649,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5648,"column":0},"generated":{"line":5650,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5649,"column":0},"generated":{"line":5651,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5650,"column":0},"generated":{"line":5652,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5651,"column":0},"generated":{"line":5653,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5652,"column":0},"generated":{"line":5654,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5653,"column":0},"generated":{"line":5655,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5654,"column":0},"generated":{"line":5656,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5655,"column":0},"generated":{"line":5657,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5656,"column":0},"generated":{"line":5658,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5657,"column":0},"generated":{"line":5659,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5658,"column":0},"generated":{"line":5660,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5659,"column":0},"generated":{"line":5661,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5660,"column":0},"generated":{"line":5662,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5661,"column":0},"generated":{"line":5663,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5662,"column":0},"generated":{"line":5664,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5663,"column":0},"generated":{"line":5665,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5664,"column":0},"generated":{"line":5666,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5665,"column":0},"generated":{"line":5667,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5666,"column":0},"generated":{"line":5668,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5667,"column":0},"generated":{"line":5669,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5668,"column":0},"generated":{"line":5670,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5669,"column":0},"generated":{"line":5671,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5670,"column":0},"generated":{"line":5672,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5671,"column":0},"generated":{"line":5673,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5672,"column":0},"generated":{"line":5674,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5673,"column":0},"generated":{"line":5675,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5674,"column":0},"generated":{"line":5676,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5675,"column":0},"generated":{"line":5677,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5676,"column":0},"generated":{"line":5678,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5677,"column":0},"generated":{"line":5679,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5678,"column":0},"generated":{"line":5680,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5679,"column":0},"generated":{"line":5681,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5680,"column":0},"generated":{"line":5682,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5681,"column":0},"generated":{"line":5683,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5682,"column":0},"generated":{"line":5684,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5683,"column":0},"generated":{"line":5685,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5684,"column":0},"generated":{"line":5686,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5685,"column":0},"generated":{"line":5687,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5686,"column":0},"generated":{"line":5688,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5687,"column":0},"generated":{"line":5689,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5688,"column":0},"generated":{"line":5690,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5689,"column":0},"generated":{"line":5691,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5690,"column":0},"generated":{"line":5692,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5691,"column":0},"generated":{"line":5693,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5692,"column":0},"generated":{"line":5694,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5693,"column":0},"generated":{"line":5695,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5694,"column":0},"generated":{"line":5696,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5695,"column":0},"generated":{"line":5697,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5696,"column":0},"generated":{"line":5698,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5697,"column":0},"generated":{"line":5699,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5698,"column":0},"generated":{"line":5700,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5699,"column":0},"generated":{"line":5701,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5700,"column":0},"generated":{"line":5702,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5701,"column":0},"generated":{"line":5703,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5702,"column":0},"generated":{"line":5704,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5703,"column":0},"generated":{"line":5705,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5704,"column":0},"generated":{"line":5706,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5705,"column":0},"generated":{"line":5707,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5706,"column":0},"generated":{"line":5708,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5707,"column":0},"generated":{"line":5709,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5708,"column":0},"generated":{"line":5710,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5709,"column":0},"generated":{"line":5711,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5710,"column":0},"generated":{"line":5712,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5711,"column":0},"generated":{"line":5713,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5712,"column":0},"generated":{"line":5714,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5713,"column":0},"generated":{"line":5715,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5714,"column":0},"generated":{"line":5716,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5715,"column":0},"generated":{"line":5717,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5716,"column":0},"generated":{"line":5718,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5717,"column":0},"generated":{"line":5719,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5718,"column":0},"generated":{"line":5720,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5719,"column":0},"generated":{"line":5721,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5720,"column":0},"generated":{"line":5722,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5721,"column":0},"generated":{"line":5723,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5722,"column":0},"generated":{"line":5724,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5723,"column":0},"generated":{"line":5725,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5724,"column":0},"generated":{"line":5726,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5725,"column":0},"generated":{"line":5727,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5726,"column":0},"generated":{"line":5728,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5727,"column":0},"generated":{"line":5729,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5728,"column":0},"generated":{"line":5730,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5729,"column":0},"generated":{"line":5731,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5730,"column":0},"generated":{"line":5732,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5731,"column":0},"generated":{"line":5733,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5732,"column":0},"generated":{"line":5734,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5733,"column":0},"generated":{"line":5735,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5734,"column":0},"generated":{"line":5736,"column":0}},{"source":"node_modules/codemirror/keymap/vim.js","original":{"line":5735,"column":0},"generated":{"line":5737,"column":0}}],"sources":{"node_modules/codemirror/keymap/vim.js":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeymap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, ., :, /, _, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/dialog/dialog\"), require(\"../addon/edit/matchbrackets.js\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  'use strict';\n\n  var Pos = CodeMirror.Pos;\n\n  function transformCursor(cm, range) {\n    var vim = cm.state.vim;\n    if (!vim || vim.insertMode) return range.head;\n    var head = vim.sel.head;\n    if (!head)  return range.head;\n\n    if (vim.visualBlock) {\n      if (range.head.line != head.line) {\n        return;\n      }\n    }\n    if (range.from() == range.anchor && !range.empty()) {\n      if (range.head.line == head.line && range.head.ch != head.ch)\n        return new Pos(range.head.line, range.head.ch - 1);\n    }\n\n    return range.head;\n  }\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: 'g<Up>', type: 'keyToKey', toKeys: 'gk' },\n    { keys: 'g<Down>', type: 'keyToKey', toKeys: 'gj' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<Del>', type: 'keyToKey', toKeys: 'x', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'keyToKey', toKeys: 'i', context: 'normal'},\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '(', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: false }},\n    { keys: ')', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    {keys: \"g$\", type: \"motion\", motion: \"moveToEndOfDisplayLine\"},\n    {keys: \"g^\", type: \"motion\", motion: \"moveToStartOfDisplayLine\"},\n    {keys: \"g0\", type: \"motion\", motion: \"moveToStartOfDisplayLine\"},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '=', type: 'operator', operator: 'indentAuto' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    { keys: 'gn', type: 'motion', motion: 'findAndSelectNextInclusive', motionArgs: { forward: true }},\n    { keys: 'gN', type: 'motion', motion: 'findAndSelectNextInclusive', motionArgs: { forward: false }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-u>', type: 'operatorMotion', operator: 'delete', motion: 'moveToStartOfLine', context: 'insert' },\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    //ignore C-w in normal mode\n    { keys: '<C-w>', type: 'idle', context: 'normal' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'gi', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'lastEdit' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'gI', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'bol'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'gJ', type: 'action', action: 'joinLines', actionArgs: { keepSpaces: true }, isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }, context: 'normal'},\n    { keys: 'R', type: 'operator', operator: 'change', operatorArgs: { linewise: true, fullLine: true }, context: 'visual', exitVisualBlock: true},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n  var defaultKeymapLength = defaultKeymap.length;\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'vglobal', shortName: 'v' },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  var Vim = function() {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n      if (highlightTimeout) clearTimeout(highlightTimeout);\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim) {\n        cm.options.$customCursor = null;\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n      }\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim) {\n        if (cm.curOp) cm.curOp.selectionChanged = true;\n        cm.options.$customCursor = transformCursor;\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n      }\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = vimApi.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {Shift:'S',Ctrl:'C',Alt:'A',Cmd:'D',Mod:'A',CapsLock:''};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '_', '/']);\n    var upperCaseChars;\n    try { upperCaseChars = new RegExp(\"^[\\\\p{Lu}]$\", \"u\"); }\n    catch (_) { upperCaseChars = /^[A-Z]$/; }\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return upperCaseChars.test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function isEndOfSentenceSymbol(k) {\n      return '.?!'.indexOf(k) != -1;\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      function find(cm, offset) {\n        var oldPointer = pointer;\n        var mark = move(cm, offset);\n        pointer = oldPointer;\n        return mark && mark.find();\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        find: find,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                document.createTextNode('(recording)['+registerName+']'), null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi= {\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyway.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        return exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // Non-recursive map function.\n      // NOTE: This will not create mappings to key maps that aren't present\n      // in the default key map. See TODO at bottom of function.\n      noremap: function(lhs, rhs, ctx) {\n        function toCtxArray(ctx) {\n          return ctx ? [ctx] : ['normal', 'insert', 'visual'];\n        }\n        var ctxsToMap = toCtxArray(ctx);\n        // Look through all actual defaults to find a map candidate.\n        var actualLength = defaultKeymap.length, origLength = defaultKeymapLength;\n        for (var i = actualLength - origLength;\n             i < actualLength && ctxsToMap.length;\n             i++) {\n          var mapping = defaultKeymap[i];\n          // Omit mappings that operate in the wrong context(s) and those of invalid type.\n          if (mapping.keys == rhs &&\n              (!ctx || !mapping.context || mapping.context === ctx) &&\n              mapping.type.substr(0, 2) !== 'ex' &&\n              mapping.type.substr(0, 3) !== 'key') {\n            // Make a shallow copy of the original keymap entry.\n            var newMapping = {};\n            for (var key in mapping) {\n              newMapping[key] = mapping[key];\n            }\n            // Modify it point to the new mapping with the proper context.\n            newMapping.keys = lhs;\n            if (ctx && !newMapping.context) {\n              newMapping.context = ctx;\n            }\n            // Add it to the keymap with a higher priority than the original.\n            this._mapCommand(newMapping);\n            // Record the mapped contexts as complete.\n            var mappedCtxs = toCtxArray(mapping.context);\n            ctxsToMap = ctxsToMap.filter(function(el) { return mappedCtxs.indexOf(el) === -1; });\n          }\n        }\n        // TODO: Create non-recursive keyToKey mappings for the unmapped contexts once those exist.\n      },\n      // Remove all user-defined mappings for the provided context.\n      mapclear: function(ctx) {\n        // Partition the existing keymap into user-defined and true defaults.\n        var actualLength = defaultKeymap.length,\n            origLength = defaultKeymapLength;\n        var userKeymap = defaultKeymap.slice(0, actualLength - origLength);\n        defaultKeymap = defaultKeymap.slice(actualLength - origLength);\n        if (ctx) {\n          // If a specific context is being cleared, we need to keep mappings\n          // from all other contexts.\n          for (var i = userKeymap.length - 1; i >= 0; i--) {\n            var mapping = userKeymap[i];\n            if (ctx !== mapping.context) {\n              if (mapping.context) {\n                this._mapCommand(mapping);\n              } else {\n                // `mapping` applies to all contexts so create keymap copies\n                // for each context except the one being cleared.\n                var contexts = ['normal', 'insert', 'visual'];\n                for (var j in contexts) {\n                  if (contexts[j] !== ctx) {\n                    var newMapping = {};\n                    for (var key in mapping) {\n                      newMapping[key] = mapping[key];\n                    }\n                    newMapping.context = contexts[j];\n                    this._mapCommand(newMapping);\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            vimApi.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; }\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var mainKey = keysMatcher[2] || keysMatcher[1];\n          if (vim.inputState.operatorShortcut && vim.inputState.operatorShortcut.slice(-1) == mainKey) {\n            // multikey operators act linewise by repeating only the last character\n            mainKey = vim.inputState.operatorShortcut;\n          }\n          var match = commandDispatcher.matchCommand(mainKey, defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return !vim.insertMode && key.length === 1 ? function() { return true; } : undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!vimApi.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        // The black hole register, \"_, means delete/yank to nowhere.\n        if (registerName === '_') return;\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {type: 'none'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n          default:\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (command.keys.length > 1) {\n          inputState.operatorShortcut = command.keys;\n        }\n        if (command.exitVisualBlock) {\n            vim.visualBlock = false;\n            updateCmSelection(cm);\n        }\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: '(JavaScript regexp)',\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown, selectValueOnOpen: false});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim, inputState);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = new Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = new Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = new Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = new Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = new Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n        macroModeState.lastInsertModeChanges.visualBlock = vim.visualBlock ? vim.sel.head.line - vim.sel.anchor.line : 0;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return new Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      /**\n       * Find and select the next occurrence of the search query. If the cursor is currently\n       * within a match, then find and select the current match. Otherwise, find the next occurrence in the\n       * appropriate direction.\n       *\n       * This differs from `findNext` in the following ways:\n       *\n       * 1. Instead of only returning the \"from\", this returns a \"from\", \"to\" range.\n       * 2. If the cursor is currently inside a search match, this selects the current match\n       *    instead of the next match.\n       * 3. If there is no associated operator, this will turn on visual mode.\n       */\n      findAndSelectNextInclusive: function(cm, _head, motionArgs, vim, prevInputState) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n\n        if (!query) {\n          return;\n        }\n\n        var prev = !motionArgs.forward;\n        prev = (state.isReversed()) ? !prev : prev;\n\n        // next: [from, to] | null\n        var next = findNextFromAndToInclusive(cm, prev, query, motionArgs.repeat, vim);\n\n        // No matches.\n        if (!next) {\n          return;\n        }\n\n        // If there's an operator that will be executed, return the selection.\n        if (prevInputState.operator) {\n          return next;\n        }\n\n        // At this point, we know that there is no accompanying operator -- let's\n        // deal with visual mode in order to select an appropriate match.\n\n        var from = next[0];\n        // For whatever reason, when we use the \"to\" as returned by searchcursor.js directly,\n        // the resulting selection is extended by 1 char. Let's shrink it so that only the\n        // match is selected.\n        var to = new Pos(next[1].line, next[1].ch - 1);\n\n        if (vim.visualMode) {\n          // If we were in visualLine or visualBlock mode, get out of it.\n          if (vim.visualLine || vim.visualBlock) {\n            vim.visualLine = false;\n            vim.visualBlock = false;\n            CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: \"\"});\n          }\n\n          // If we're currently in visual mode, we should extend the selection to include\n          // the search result.\n          var anchor = vim.sel.anchor;\n          if (anchor) {\n            if (state.isReversed()) {\n              if (motionArgs.forward) {\n                return [anchor, from];\n              }\n\n              return [anchor, to];\n            } else {\n              if (motionArgs.forward) {\n                return [anchor, to];\n              }\n\n              return [anchor, from];\n            }\n          }\n        } else {\n          // Let's turn visual mode on.\n          vim.visualMode = true;\n          vim.visualLine = false;\n          vim.visualBlock = false;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: \"\"});\n        }\n\n        return prev ? [to, from] : [from, to];\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, new Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, new Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = new Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return new Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        var posV = cm.findPosV(cur, (motionArgs.forward ? repeat : -repeat), 'line', vim.lastHSPos);\n        var hasMarkedText = motionArgs.forward ? posV.line > line : posV.line < line;\n        if (hasMarkedText) {\n          line = posV.line;\n          endCh = posV.ch;\n        }\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        } else if (line > last && cur.line == last){\n            return moveToEol(cm, head, motionArgs, vim, true);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(new Pos(line, endCh),'div').left;\n        return new Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(new Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveBySentence: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findSentence(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim) {\n        return moveToEol(cm, head, motionArgs, vim, false);\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return new Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(new Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          // Only include angle brackets in analysis if they are being matched.\n          var re = (ch === '<' || ch === '>') ? /[(){}[\\]<>]/ : /[(){}[\\]]/;\n          var matched = cm.findMatchingBracket(new Pos(line, ch), {bracketRegex: re});\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return new Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return new Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      moveToStartOfDisplayLine: function(cm) {\n        cm.execCommand(\"goLineLeft\");\n        return cm.getCursor();\n      },\n      moveToEndOfDisplayLine: function(cm) {\n        cm.execCommand(\"goLineRight\");\n        var head = cm.getCursor();\n        if (head.sticky == \"before\") head.ch--;\n        return head;\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '[',\n                             '<': '>', '>': '<'};\n        var selfPaired = {'\\'': true, '\"': true, '`': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else if (character === 't') {\n          tmp = expandTagUnderCursor(cm, head, inclusive);\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        var anchor = ranges[0].anchor,\n            head = ranges[0].head;\n        if (!vim.visualMode) {\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else if (args.fullLine) {\n            head.ch = Number.MAX_VALUE;\n            head.line--;\n            cm.setSelection(anchor, head)\n            text = cm.getSelection();\n            cm.replaceSelection(\"\");\n            finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = new Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      indentAuto: function(cm, _args, ranges) {\n        cm.execCommand(\"indentAuto\");\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(new Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight;\n            break;\n          case 'bottom': y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        } else {\n          macroModeState.latestRegister = registerName;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = new Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'bol') {\n          head = new Pos(head.line, 0);\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = new Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = new Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n            if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = new Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = new Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch, sel.anchor.ch) + 1);\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        } else if (insertAt == 'lastEdit') {\n          head = getLastEditPos(cm) || head;\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, new Pos(anchor.line, anchor.ch + repeat - 1));\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, new Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = new Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = actionArgs.keepSpaces\n            ? text.replace(/\\n\\r?/g, '')\n            : text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = new Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', new Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        var text = register.toString();\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (blockwise) {\n          text = text.split('\\n');\n          if (linewise) {\n              text.pop();\n          }\n          for (var i = 0; i < text.length; i++) {\n            text[i] = (text[i] == '') ? ' ' : text[i];\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n          cur.ch = Math.min(lineLength(cm, cur.line), cur.ch);\n        } else if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = new Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  new Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, new Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = new Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = new Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = new Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /(-?)(?:(0x)([\\da-f]+)|(0b|0|)(\\d+))/gi;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        while ((match = re.exec(lineStr)) !== null) {\n          start = match.index;\n          end = start + match[0].length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (match) {\n          var baseStr = match[2] || match[4]\n          var digits = match[3] || match[5]\n          var increment = actionArgs.increase ? 1 : -1;\n          var base = {'0b': 2, '0': 8, '': 10, '0x': 16}[baseStr.toLowerCase()];\n          var number = parseInt(match[1] + digits, base) + (increment * actionArgs.repeat);\n          numberStr = number.toString(base);\n          var zeroPadding = baseStr ? new Array(digits.length - numberStr.length + 1 + match[1].length).join('0') : ''\n          if (numberStr.charAt(0) === '-') {\n            numberStr = '-' + baseStr + zeroPadding + numberStr.substr(1);\n          } else {\n            numberStr = baseStr + zeroPadding + numberStr;\n          }\n          var from = new Pos(cur.line, start);\n          var to = new Pos(cur.line, end);\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(new Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur) {\n      var vim = cm.state.vim;\n      var includeLineBreak = vim.insertMode || vim.visualMode;\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1 + !!includeLineBreak;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return new Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return new Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return new Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(new Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = new Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = new Pos(i, selectionStart.ch);\n            var head = new Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = new Pos(selectionStart.line, 0);\n            selectionEnd = new Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = new Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            fromCh = anchor.ch,\n            bottom = Math.max(anchor.line, head.line),\n            toCh = head.ch;\n        if (fromCh < toCh) { toCh += 1 }\n        else { fromCh += 1 };\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: new Pos(top + i, fromCh),\n            head: new Pos(top + i, toCh)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      if (!vim.insertMode) CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: new Pos(cur.line, start), end: new Pos(cur.line, end) };\n    }\n\n    /**\n     * Depends on the following:\n     *\n     * - editor mode should be htmlmixedmode / xml\n     * - mode/xml/xml.js should be loaded\n     * - addon/fold/xml-fold.js should be loaded\n     *\n     * If any of the above requirements are not true, this function noops.\n     *\n     * This is _NOT_ a 100% accurate implementation of vim tag text objects.\n     * The following caveats apply (based off cursory testing, I'm sure there\n     * are other discrepancies):\n     *\n     * - Does not work inside comments:\n     *   ```\n     *   <!-- <div>broken</div> -->\n     *   ```\n     * - Does not work when tags have different cases:\n     *   ```\n     *   <div>broken</DIV>\n     *   ```\n     * - Does not work when cursor is inside a broken tag:\n     *   ```\n     *   <div><brok><en></div>\n     *   ```\n     */\n    function expandTagUnderCursor(cm, head, inclusive) {\n      var cur = head;\n      if (!CodeMirror.findMatchingTag || !CodeMirror.findEnclosingTag) {\n        return { start: cur, end: cur };\n      }\n\n      var tags = CodeMirror.findMatchingTag(cm, head) || CodeMirror.findEnclosingTag(cm, head);\n      if (!tags || !tags.open || !tags.close) {\n        return { start: cur, end: cur };\n      }\n\n      if (inclusive) {\n        return { start: tags.open.from, end: tags.close.to };\n      }\n      return { start: tags.open.to, end: tags.close.from };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/^#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return new Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /*\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = new Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return new Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return new Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return new Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return new Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToEol(cm, head, motionArgs, vim, keepHPos) {\n      var cur = head;\n      var retval= new Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      var end=cm.clipPos(retval);\n      end.ch--;\n      if (!keepHPos) {\n        vim.lastHPos = Infinity;\n        vim.lastHSPos = cm.charCoords(end,'div').left;\n      }\n      return retval;\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return new Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, new Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    function findSentence(cm, cur, repeat, dir) {\n\n      /*\n        Takes an index object\n        {\n          line: the line string,\n          ln: line number,\n          pos: index in line,\n          dir: direction of traversal (-1 or 1)\n        }\n        and modifies the line, ln, and pos members to represent the\n        next valid position or sets them to null if there are\n        no more valid positions.\n       */\n      function nextChar(cm, idx) {\n        if (idx.pos + idx.dir < 0 || idx.pos + idx.dir >= idx.line.length) {\n          idx.ln += idx.dir;\n          if (!isLine(cm, idx.ln)) {\n            idx.line = null;\n            idx.ln = null;\n            idx.pos = null;\n            return;\n          }\n          idx.line = cm.getLine(idx.ln);\n          idx.pos = (idx.dir > 0) ? 0 : idx.line.length - 1;\n        }\n        else {\n          idx.pos += idx.dir;\n        }\n      }\n\n      /*\n        Performs one iteration of traversal in forward direction\n        Returns an index object of the new location\n       */\n      function forward(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n        var stop = (line === \"\");\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        }\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: curr.pos,\n        }\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n          last_valid.ln = curr.ln;\n          last_valid.pos = curr.pos;\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (stop && curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n            && !stop\n            && (curr.pos === curr.line.length - 1\n              || isWhiteSpaceString(curr.line[curr.pos + 1]))) {\n            stop = true;\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the last non whitespace character on the last\n          valid line in the case that we reach the end of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = line.length - 1; i >= 0; --i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n\n        return last_valid;\n\n      }\n\n      /*\n        Performs one iteration of traversal in reverse direction\n        Returns an index object of the new location\n       */\n      function reverse(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        }\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: null,\n        };\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            if (last_valid.pos !== null) {\n              return last_valid;\n            }\n            else {\n              return { ln: curr.ln, pos: curr.pos };\n            }\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n              && last_valid.pos !== null\n              && !(curr.ln === last_valid.ln && curr.pos + 1 === last_valid.pos)) {\n            return last_valid;\n          }\n          else if (curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            skip_empty_lines = false;\n            last_valid = { ln: curr.ln, pos: curr.pos }\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the first non whitespace character on the last\n          valid line in the case that we reach the beginning of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = 0; i < line.length; ++i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n        return last_valid;\n      }\n\n      var curr_index = {\n        ln: cur.line,\n        pos: cur.ch,\n      };\n\n      while (repeat > 0) {\n        if (dir < 0) {\n          curr_index = reverse(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        else {\n          curr_index = forward(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        repeat--;\n      }\n\n      return new Pos(curr_index.ln, curr_index.pos);\n    }\n\n    // TODO: perhaps this finagling of start and end positions belongs\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/,\n        '<': /[<>]/, '>': /[<>]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{',\n        '<': '<', '>': '<'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(new Pos(cur.line, cur.ch + offset), -1, undefined, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(new Pos(cur.line, cur.ch + offset), 1, undefined, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: new Pos(cur.line, start),\n        end: new Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function splitBySlash(argString) {\n      return splitBySeparator(argString, '/');\n    }\n\n    function findUnescapedSlashes(argString) {\n      return findUnescapedSeparators(argString, '/');\n    }\n\n    function splitBySeparator(argString, separator) {\n      var slashes = findUnescapedSeparators(argString, separator) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSeparators(str, separator) {\n      if (!separator)\n        separator = '/';\n\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == separator) {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t', '\\\\&':'&'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'im' : 'm');\n      return regexp;\n    }\n\n    /**\n     * dom - Document Object Manipulator\n     * Usage:\n     *   dom('<tag>'|<node>[, ...{<attributes>|<$styles>}|<child-node>|'<text>'])\n     * Examples:\n     *   dom('div', {id:'xyz'}, dom('p', 'CM rocks!', {$color:'red'}))\n     *   dom(document.head, dom('script', 'alert(\"hello!\")'))\n     * Not supported:\n     *   dom('p', ['arrays are objects'], Error('objects specify attributes'))\n     */\n    function dom(n) {\n      if (typeof n === 'string') n = document.createElement(n);\n      for (var a, i = 1; i < arguments.length; i++) {\n        if (!(a = arguments[i])) continue;\n        if (typeof a !== 'object') a = document.createTextNode(a);\n        if (a.nodeType) n.appendChild(a);\n        else for (var key in a) {\n          if (!Object.prototype.hasOwnProperty.call(a, key)) continue;\n          if (key[0] === '$') n.style[key.slice(1)] = a[key];\n          else n.setAttribute(key, a[key]);\n        }\n      }\n      return n;\n    }\n\n    function showConfirm(cm, template) {\n      var pre = dom('pre', {$color: 'red', class: 'cm-vim-message'}, template);\n      if (cm.openNotification) {\n        cm.openNotification(pre, {bottom: true, duration: 5000});\n      } else {\n        alert(pre.innerText);\n      }\n    }\n\n    function makePrompt(prefix, desc) {\n      return dom(document.createDocumentFragment(),\n               dom('span', {$fontFamily: 'monospace', $whiteSpace: 'pre'},\n                 prefix,\n                 dom('input', {type: 'text', autocorrect: 'off',\n                               autocapitalize: 'off', spellcheck: 'false'})),\n               desc && dom('span', {$color: '#888'}, desc));\n    }\n\n    function showPrompt(cm, options) {\n      var template = makePrompt(options.prefix, options.desc);\n      if (cm.openDialog) {\n        cm.openDialog(template, options.onClose, {\n          onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n          bottom: true, selectValueOnOpen: false, value: options.value\n        });\n      }\n      else {\n        var shortText = '';\n        if (typeof options.prefix != \"string\" && options.prefix) shortText += options.prefix.textContent;\n        if (options.desc) shortText += \" \" + options.desc;\n        options.onClose(prompt(shortText, ''));\n      }\n    }\n\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    var highlightTimeout = 0;\n    function highlightSearchMatches(cm, query) {\n      clearTimeout(highlightTimeout);\n      highlightTimeout = setTimeout(function() {\n        if (!cm.state.vim) return;\n        var searchState = getSearchState(cm);\n        var overlay = searchState.getOverlay();\n        if (!overlay || query != overlay.query) {\n          if (overlay) {\n            cm.removeOverlay(overlay);\n          }\n          overlay = searchOverlay(query);\n          cm.addOverlay(overlay);\n          if (cm.showMatchesOnScrollbar) {\n            if (searchState.getScrollbarAnnotate()) {\n              searchState.getScrollbarAnnotate().clear();\n            }\n            searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n          }\n          searchState.setOverlay(overlay);\n        }\n      }, 50);\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) {\n            var lastEndPos = prev ? cursor.from() : cursor.to();\n            found = cursor.find(prev);\n            if (found && !found[0] && cursorEqual(cursor.from(), lastEndPos)) {\n              if (cm.getLine(lastEndPos.line).length == lastEndPos.ch)\n                found = cursor.find(prev);\n            }\n          }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? new Pos(cm.lastLine()) : new Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    /**\n     * Pretty much the same as `findNext`, except for the following differences:\n     *\n     * 1. Before starting the search, move to the previous search. This way if our cursor is\n     * already inside a match, we should return the current match.\n     * 2. Rather than only returning the cursor's from, we return the cursor's from and to as a tuple.\n     */\n    function findNextFromAndToInclusive(cm, prev, query, repeat, vim) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n\n        // Go back one result to ensure that if the cursor is currently a match, we keep it.\n        var found = cursor.find(!prev);\n\n        // If we haven't moved, go back one more (similar to if i==0 logic in findNext).\n        if (!vim.visualMode && found && cursorEqual(cursor.from(), pos)) {\n          cursor.find(!prev);\n        }\n\n        for (var i = 0; i < repeat; i++) {\n          found = cursor.find(prev);\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? new Pos(cm.lastLine()) : new Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return [cursor.from(), cursor.to()];\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (typeof end == 'number') {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'' || markName == '`') {\n        return vimGlobalState.jumpList.find(cm, -1) || new Pos(0, 0);\n      } else if (markName == '.') {\n        return getLastEditPos(cm);\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    function getLastEditPos(cm) {\n      var done = cm.doc.history.done;\n      for (var i = done.length; i--;) {\n        if (done[i].changes) {\n          return copyCursor(done[i].changes[0].to);\n        }\n      }\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e.toString());\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                vimApi.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e.toString());\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+|!!|@@|[!#&*<=>@~])/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return true;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return true;\n            }\n          }\n        }\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1 || !exCommandDispatcher.unmap(mapArgs[0], ctx)) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n        }\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------\\n\\n';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '\\n'\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '\\n'\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = new Pos(lineStart, 0);\n        var curEnd = new Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      vglobal: function(cm, params) {\n        // global inspects params.commandName\n        this.global(cm, params);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        var inverted = params.commandName[0] === 'v';\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [];\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var line = cm.getLineHandle(i);\n          var matched = query.test(line.text);\n          if (matched !== inverted) {\n            matchedLines.push(cmd ? line : line.text);\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, matchedLines.join('\\n'));\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var line = matchedLines[index++];\n            var lineNum = cm.getLineNumber(line);\n            if (lineNum == null) {\n              nextCommand();\n              return;\n            }\n            var command = (lineNum + 1) + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySeparator(argString, argString[0]) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          if (getOption('pcre') && regexPart !== '') {\n              regexPart = new RegExp(regexPart).source; //normalize not escaped characters\n          }\n          replacePart = tokens[1];\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart.replace(/([^\\\\])&/g,\"$1$$&\"));\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n            }\n            if (getOption('pcre')) {\n               regexPart = regexPart + '/' + flagsPart;\n            } else {\n               regexPart = regexPart.replace(/\\//g, \"\\\\/\") + '/' + flagsPart;\n            }\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, new Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using JavaScript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos, modifiedLineNumber, joined;\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        var unmodifiedLineNumber = searchCursor.to().line;\n        searchCursor.replace(newText);\n        modifiedLineNumber = searchCursor.to().line;\n        lineEnd += modifiedLineNumber - unmodifiedLineNumber;\n        joined = modifiedLineNumber < unmodifiedLineNumber;\n      }\n      function findNextValidMatch() {\n        var lastMatchTo = lastPos && copyCursor(searchCursor.to());\n        var match = searchCursor.findNext();\n        if (match && !match[0] && lastMatchTo && cursorEqual(searchCursor.from(), lastMatchTo)) {\n          match = searchCursor.findNext();\n        }\n        return match;\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(findNextValidMatch() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && searchCursor.from().line == modifiedLineNumber && !joined) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); }\n        return;\n      }\n      showPrompt(cm, {\n        prefix: dom('span', 'replace with ', dom('strong', replaceWith), ' (y/n/a/q/l)'),\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!isPlaying) {\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          vimApi.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (lastChange.ignoreCount > 1) {\n            lastChange.ignoreCount--;\n          } else if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var selectionCount = cm.listSelections().length;\n            if (selectionCount > 1)\n              lastChange.ignoreCount = selectionCount;\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (text) {\n              if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n              } else {\n                lastChange.changes.push(text);\n              }\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var visualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.visualBlock;\n      if (visualBlock) {\n        // Set up block selection again for repeating the changes.\n        selectForInsert(cm, head, visualBlock + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (visualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            cm.replaceSelection(change);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n            cm.setCursor(end);\n          }\n        }\n      }\n      if (visualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  };\n  // Initialize Vim and make it available as an API.\n  CodeMirror.Vim = Vim();\n});\n"},"lineCount":5737}},"error":null,"hash":"aff2bc6cdfdf4646aeecac10c01817ba","cacheData":{"env":{}}}